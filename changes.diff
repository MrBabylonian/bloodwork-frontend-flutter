diff --git a/.metadata b/.metadata
index 87dc5c3..9fc6a8a 100644
--- a/.metadata
+++ b/.metadata
@@ -15,7 +15,7 @@ migration:
     - platform: root
       create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
       base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
-    - platform: macos
+    - platform: web
       create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
       base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
 
diff --git a/changes.diff b/changes.diff
index 88ad447..e69de29 100644
--- a/changes.diff
+++ b/changes.diff
@@ -1,4132 +0,0 @@
-diff --git a/changes.diff b/changes.diff
-index 3d1445e..e69de29 100644
---- a/changes.diff
-+++ b/changes.diff
-@@ -1,3720 +0,0 @@
--diff --git a/changes.diff b/changes.diff
--index 3920c32..e69de29 100644
----- a/changes.diff
--+++ b/changes.diff
--@@ -1,2869 +0,0 @@
---diff --git a/changes.diff b/changes.diff
---index 08457c2..e69de29 100644
------ a/changes.diff
---+++ b/changes.diff
---@@ -1,1140 +0,0 @@
----diff --git a/.gitignore b/.gitignore
----index c81d28c..41e4dbc 100644
------- a/.gitignore
----+++ b/.gitignore
----@@ -32,6 +32,8 @@ mock/
---- .pub-cache/
---- .pub/
---- /build/
----+.github/instructions/
----+build/
---- 
---- # Symbolication related
---- app.*.symbols
----diff --git a/.metadata b/.metadata
----index 9fc6a8a..87dc5c3 100644
------- a/.metadata
----+++ b/.metadata
----@@ -15,7 +15,7 @@ migration:
----     - platform: root
----       create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
----       base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
-----    - platform: web
----+    - platform: macos
----       create_revision: ea121f8859e4b13e47a8f845e4586164519588bc
----       base_revision: ea121f8859e4b13e47a8f845e4586164519588bc
---- 
----diff --git a/changes.diff b/changes.diff
----index c049031..e69de29 100644
----Binary files a/changes.diff and b/changes.diff differ
----diff --git a/lib/components/buttons/secondary_button.dart b/lib/components/buttons/secondary_button.dart
----index dd55d2d..da51ff0 100644
------- a/lib/components/buttons/secondary_button.dart
----+++ b/lib/components/buttons/secondary_button.dart
----@@ -29,8 +29,7 @@ class SecondaryButton extends AppButton {
----       decoration: BoxDecoration(
----         color:
----             isDisabled
-----                // ignore: deprecated_member_use
-----                ? AppColors.lightGray.withOpacity(0.5)
----+                ? AppColors.lightGray.withValues(alpha: 0.5)
----                 : AppColors.lightGray,
----         borderRadius: effectiveBorderRadius,
----       ),
----diff --git a/lib/components/dialogs/alert_dialog.dart b/lib/components/dialogs/alert_dialog.dart
----index f38c29e..02d3d90 100644
------- a/lib/components/dialogs/alert_dialog.dart
----+++ b/lib/components/dialogs/alert_dialog.dart
----@@ -116,132 +116,3 @@ Future<T?> showAppDialog<T>({
----     },
----   );
---- }
-----
-----/// A banner alert that can be shown inline in the UI.
-----class AlertBanner extends StatelessWidget {
-----  /// Creates an alert banner with the specified properties.
-----  const AlertBanner({
-----    super.key,
-----    required this.message,
-----    this.type = AlertType.info,
-----    this.onDismiss,
-----    this.action,
-----    this.actionLabel,
-----  });
-----
-----  /// The message to display in the banner.
-----  final String message;
-----
-----  /// The type of alert to display.
-----  final AlertType type;
-----
-----  /// Called when the dismiss button is tapped.
-----  final VoidCallback? onDismiss;
-----
-----  /// Called when the action button is tapped.
-----  final VoidCallback? action;
-----
-----  /// The label for the action button.
-----  final String? actionLabel;
-----
-----  @override
-----  Widget build(BuildContext context) {
-----    late Color backgroundColor;
-----    late Color textColor;
-----    late IconData iconData;
-----
-----    switch (type) {
-----      case AlertType.success:
-----        backgroundColor = Color.fromRGBO(
-----          AppColors.successGreen.r.toInt(),
-----          AppColors.successGreen.g.toInt(),
-----          AppColors.successGreen.b.toInt(),
-----          0.15,
-----        );
-----        textColor = AppColors.successGreen;
-----        iconData = CupertinoIcons.checkmark_circle_fill;
-----        break;
-----      case AlertType.warning:
-----        backgroundColor = Color.fromRGBO(
-----          AppColors.warningOrange.r.toInt(),
-----          AppColors.warningOrange.g.toInt(),
-----          AppColors.warningOrange.b.toInt(),
-----          0.15,
-----        );
-----        textColor = AppColors.warningOrange;
-----        iconData = CupertinoIcons.exclamationmark_triangle_fill;
-----        break;
-----      case AlertType.error:
-----        backgroundColor = Color.fromRGBO(
-----          AppColors.destructiveRed.r.toInt(),
-----          AppColors.destructiveRed.g.toInt(),
-----          AppColors.destructiveRed.b.toInt(),
-----          0.15,
-----        );
-----        textColor = AppColors.destructiveRed;
-----        iconData = CupertinoIcons.xmark_circle_fill;
-----        break;
-----      case AlertType.info:
-----        backgroundColor = Color.fromRGBO(
-----          AppColors.primaryBlue.r.toInt(),
-----          AppColors.primaryBlue.g.toInt(),
-----          AppColors.primaryBlue.b.toInt(),
-----          0.15,
-----        );
-----        textColor = AppColors.primaryBlue;
-----        iconData = CupertinoIcons.info_circle_fill;
-----        break;
-----    }
-----
-----    return Container(
-----      padding: const EdgeInsets.all(AppDimensions.contentPadding),
-----      decoration: BoxDecoration(
-----        color: backgroundColor,
-----        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-----      ),
-----      child: Row(
-----        crossAxisAlignment: CrossAxisAlignment.start,
-----        children: [
-----          Icon(iconData, color: textColor, size: AppDimensions.iconSizeMedium),
-----          const SizedBox(width: AppDimensions.spacingM),
-----          Expanded(
-----            child: Column(
-----              crossAxisAlignment: CrossAxisAlignment.start,
-----              children: [
-----                Text(
-----                  message,
-----                  style: AppTextStyles.body.copyWith(color: textColor),
-----                ),
-----                if (action != null && actionLabel != null) ...[
-----                  const SizedBox(height: AppDimensions.spacingS),
-----                  CupertinoButton(
-----                    padding: EdgeInsets.zero,
-----                    onPressed: action,
-----                    child: Text(
-----                      actionLabel!,
-----                      style: AppTextStyles.bodySmall.copyWith(
-----                        color: textColor,
-----                        fontWeight: FontWeight.w600,
-----                      ),
-----                    ),
-----                  ),
-----                ],
-----              ],
-----            ),
-----          ),
-----          if (onDismiss != null) ...[
-----            CupertinoButton(
-----              padding: EdgeInsets.zero,
-----              onPressed: onDismiss,
-----              child: Icon(
-----                CupertinoIcons.xmark,
-----                color: textColor,
-----                size: AppDimensions.iconSizeSmall,
-----              ),
-----            ),
-----          ],
-----        ],
-----      ),
-----    );
-----  }
-----}
----diff --git a/lib/components/display/accordion.dart b/lib/components/display/accordion.dart
----index c8fe906..1684c1a 100644
------- a/lib/components/display/accordion.dart
----+++ b/lib/components/display/accordion.dart
----@@ -3,13 +3,13 @@ import '../../theme/app_colors.dart';
---- import '../../theme/app_dimensions.dart';
---- import '../../theme/app_text_styles.dart';
---- 
-----/// An expandable accordion component that shows/hides content.
----+/// An expandable panel component that shows/hides content.
---- ///
---- /// This component allows users to toggle the visibility of content,
---- /// which is useful for displaying additional details without cluttering the UI.
-----class Accordion extends StatefulWidget {
-----  /// Creates an accordion with the specified properties.
-----  const Accordion({
----+class AppAccordionPanel extends StatefulWidget {
----+  /// Creates an accordion panel with the specified properties.
----+  const AppAccordionPanel({
----     super.key,
----     required this.title,
----     required this.child,
----@@ -58,10 +58,10 @@ class Accordion extends StatefulWidget {
----   final Duration animationDuration;
---- 
----   @override
-----  State<Accordion> createState() => _AccordionState();
----+  State<AppAccordionPanel> createState() => _AppAccordionPanelState();
---- }
---- 
-----class _AccordionState extends State<Accordion>
----+class _AppAccordionPanelState extends State<AppAccordionPanel>
----     with SingleTickerProviderStateMixin {
----   late bool _isExpanded;
----   late AnimationController _controller;
----@@ -102,9 +102,8 @@ class _AccordionState extends State<Accordion>
----         _controller.reverse();
----       }
---- 
-----      if (widget.onToggle != null) {
-----        widget.onToggle!(_isExpanded);
-----      }
----+      // Null check for widget.onToggle before calling it
----+      widget.onToggle?.call(_isExpanded);
----     });
----   }
---- 
----diff --git a/lib/components/display/badge.dart b/lib/components/display/badge.dart
----index e69de29..929f842 100644
------- a/lib/components/display/badge.dart
----+++ b/lib/components/display/badge.dart
----@@ -0,0 +1,175 @@
----+import 'package:flutter/cupertino.dart';
----+import '../../theme/app_colors.dart';
----+import '../../theme/app_text_styles.dart';
----+import '../../theme/app_dimensions.dart';
----+
----+/// Enum for different badge visual styles, mirroring shadcn/ui variants.
----+enum AppBadgeVariant {
----+  primary, // default in shadcn
----+  secondary,
----+  destructive,
----+  outline,
----+  // Custom variants from existing AppBadge
----+  success,
----+  warning,
----+  info,
----+}
----+
----+/// A badge component for displaying short pieces of information or status.
----+///
----+/// Badges can be styled with different variants to convey meaning through color.
----+/// This component aims to replicate the visual style and variants of the
----+/// shadcn/ui Badge component.
----+///
----+/// Example usage:
----+/// ```dart
----+/// AppBadge(label: "Active", variant: AppBadgeVariant.primary)
----+/// AppBadge(label: "Offline", variant: AppBadgeVariant.outline)
----+/// AppBadge(label: "Error", variant: AppBadgeVariant.destructive, icon: CupertinoIcons.xmark_circle_fill)
----+/// ```
----+class AppBadge extends StatelessWidget {
----+  /// Creates a badge with the specified properties.
----+  ///
----+  /// - [label]: The text to display within the badge.
----+  /// - [variant]: The visual style of the badge. Defaults to `AppBadgeVariant.primary`.
----+  /// - [icon]: Optional icon to display before the label.
----+  const AppBadge({
----+    super.key,
----+    required this.label,
----+    this.variant = AppBadgeVariant.primary,
----+    this.icon,
----+  });
----+
----+  final String label;
----+  final AppBadgeVariant variant;
----+  final IconData? icon;
----+
----+  @override
----+  Widget build(BuildContext context) {
----+    final _BadgeStyle style = _getVariantStyle(variant);
----+
----+    // text-xs (12px) font-semibold from shadcn
----+    // AppTextStyles.caption is 12px normal. We'll override fontWeight.
----+    final TextStyle textStyle = AppTextStyles.caption.copyWith(
----+      color: style.textColor,
----+      fontWeight: FontWeight.w600, // font-semibold
----+    );
----+
----+    // px-2.5 (10px), py-0.5 (2px) from shadcn
----+    final EdgeInsets padding = EdgeInsets.symmetric(
----+      horizontal: AppDimensions.spacingS + AppDimensions.spacingXxs, // 10px
----+      vertical: AppDimensions.spacingXxs, // 2px
----+    );
----+
----+    return Container(
----+      padding: padding,
----+      decoration: BoxDecoration(
----+        color: style.backgroundColor,
----+        // rounded-full from shadcn
----+        borderRadius: BorderRadius.circular(AppDimensions.radiusFull),
----+        border: Border.all(
----+          color: style.borderColor,
----+          // border (1px) from shadcn, only visible for outline or if borderColor is different from backgroundColor
----+          width:
----+              (variant == AppBadgeVariant.outline ||
----+                      style.borderColor != style.backgroundColor)
----+                  ? AppDimensions
----+                      .borderWidth // Use the defined borderWidth
----+                  : 0,
----+        ),
----+      ),
----+      child: Row(
----+        mainAxisSize: MainAxisSize.min,
----+        crossAxisAlignment: CrossAxisAlignment.center,
----+        children: [
----+          if (icon != null)
----+            Padding(
----+              padding: const EdgeInsets.only(right: AppDimensions.spacingXs),
----+              child: Icon(
----+                icon,
----+                color: style.textColor,
----+                size: textStyle.fontSize, // Match icon size to text size
----+              ),
----+            ),
----+          Text(label, style: textStyle),
----+        ],
----+      ),
----+    );
----+  }
----+
----+  _BadgeStyle _getVariantStyle(AppBadgeVariant variant) {
----+    Color backgroundColor;
----+    Color textColor;
----+    Color borderColor;
----+
----+    switch (variant) {
----+      case AppBadgeVariant.primary:
----+        // "border-transparent bg-primary text-primary-foreground hover:bg-primary/80"
----+        backgroundColor = AppColors.primaryBlue;
----+        textColor = AppColors.accentForeground; // primary-foreground
----+        borderColor =
----+            AppColors
----+                .primaryBlue; // border-transparent implies border color matches bg
----+        break;
----+      case AppBadgeVariant.secondary:
----+        // "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80"
----+        backgroundColor = AppColors.backgroundSecondary; // secondary
----+        textColor = AppColors.textSecondary; // secondary-foreground
----+        borderColor = AppColors.backgroundSecondary;
----+        break;
----+      case AppBadgeVariant.destructive:
----+        // "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80"
----+        backgroundColor = AppColors.destructiveRed; // destructive
----+        textColor = AppColors.accentForeground; // destructive-foreground
----+        borderColor = AppColors.destructiveRed;
----+        break;
----+      // Custom variants from original AppBadge
----+      case AppBadgeVariant.success:
----+        backgroundColor = AppColors.successGreen.withValues(alpha: 0.15);
----+        textColor = AppColors.successGreen;
----+        borderColor = AppColors.successGreen.withValues(alpha: 0.15);
----+        break;
----+      case AppBadgeVariant.warning:
----+        backgroundColor = AppColors.warningOrange.withValues(alpha: 0.15);
----+        textColor = AppColors.warningOrange;
----+        borderColor = AppColors.warningOrange.withValues(alpha: 0.15);
----+        break;
----+      case AppBadgeVariant.info:
----+        backgroundColor = AppColors.primaryBlue.withValues(alpha: 0.15);
----+        textColor = AppColors.primaryBlue;
----+        borderColor = AppColors.primaryBlue.withValues(alpha: 0.15);
----+        break;
----+      default:
----+        backgroundColor = AppColors.foregroundDark;
----+        textColor = AppColors.backgroundWhite;
----+        borderColor = AppColors.transparent;
----+    }
----+
----+    // Apply outline variant styles
----+    if (variant == AppBadgeVariant.outline) {
----+      textColor =
----+          backgroundColor; // Outline text color is the variant's base color
----+      backgroundColor = AppColors.transparent;
----+      // borderColor is already set by the switch, or defaults to transparent if not a specific outline case
----+    }
----+
----+    return _BadgeStyle(
----+      backgroundColor: backgroundColor,
----+      textColor: textColor,
----+      borderColor: borderColor,
----+    );
----+  }
----+}
----+
----+/// Helper class to hold style properties for a badge variant.
----+class _BadgeStyle {
----+  final Color backgroundColor;
----+  final Color textColor;
----+  final Color borderColor;
----+
----+  _BadgeStyle({
----+    required this.backgroundColor,
----+    required this.textColor,
----+    required this.borderColor,
----+  });
----+}
----diff --git a/lib/components/feedback/loading_indicator.dart b/lib/components/feedback/loading_indicator.dart
----index e69de29..5cf8f30 100644
------- a/lib/components/feedback/loading_indicator.dart
----+++ b/lib/components/feedback/loading_indicator.dart
----@@ -0,0 +1,21 @@
----+import 'package:flutter/cupertino.dart';
----+
----+/// A standardized loading indicator for the application.
----+///
----+/// This component wraps the `CupertinoActivityIndicator` to provide a consistent
----+/// loading spinner. It can be customized with size and color if needed in the future.
----+class LoadingIndicator extends StatelessWidget {
----+  /// Creates a loading indicator.
----+  const LoadingIndicator({
----+    super.key,
----+    this.radius = 14.0, // Default CupertinoActivityIndicator radius
----+  });
----+
----+  /// The radius of the spinner.
----+  final double radius;
----+
----+  @override
----+  Widget build(BuildContext context) {
----+    return Center(child: CupertinoActivityIndicator(radius: radius));
----+  }
----+}
----diff --git a/lib/components/feedback/status_badge.dart b/lib/components/feedback/status_badge.dart
----index e69de29..c95bf23 100644
------- a/lib/components/feedback/status_badge.dart
----+++ b/lib/components/feedback/status_badge.dart
----@@ -0,0 +1,55 @@
----+import 'package:flutter/cupertino.dart';
----+import '../display/badge.dart';
----+
----+/// Enum for different status types, influencing icon and color.
----+enum StatusType { success, warning, error, info, pending, neutral }
----+
----+/// A badge specifically designed to convey status with an icon and label.
----+///
----+/// This component uses the `AppBadge` internally and provides predefined
----+/// icons and color schemes for different status types.
----+class StatusBadge extends StatelessWidget {
----+  /// Creates a status badge with the specified properties.
----+  const StatusBadge({super.key, required this.label, required this.statusType});
----+
----+  /// The text label to display.
----+  final String label;
----+
----+  /// The type of status to represent.
----+  final StatusType statusType;
----+
----+  @override
----+  Widget build(BuildContext context) {
----+    IconData iconData;
----+    AppBadgeVariant badgeVariant;
----+
----+    switch (statusType) {
----+      case StatusType.success:
----+        iconData = CupertinoIcons.checkmark_circle_fill;
----+        badgeVariant = AppBadgeVariant.success;
----+        break;
----+      case StatusType.warning:
----+        iconData = CupertinoIcons.exclamationmark_triangle_fill;
----+        badgeVariant = AppBadgeVariant.warning;
----+        break;
----+      case StatusType.error:
----+        iconData = CupertinoIcons.xmark_circle_fill;
----+        badgeVariant = AppBadgeVariant.destructive;
----+        break;
----+      case StatusType.info:
----+        iconData = CupertinoIcons.info_circle_fill;
----+        badgeVariant = AppBadgeVariant.info;
----+        break;
----+      case StatusType.pending:
----+        iconData = CupertinoIcons.time_solid;
----+        badgeVariant = AppBadgeVariant.secondary;
----+        break;
----+      case StatusType.neutral:
----+        iconData = CupertinoIcons.circle_fill;
----+        badgeVariant = AppBadgeVariant.secondary;
----+        break;
----+    }
----+
----+    return AppBadge(label: label, variant: badgeVariant, icon: iconData);
----+  }
----+}
----diff --git a/lib/components/forms/file_upload.dart b/lib/components/forms/file_upload.dart
----index a8ef00d..881f755 100644
------- a/lib/components/forms/file_upload.dart
----+++ b/lib/components/forms/file_upload.dart
----@@ -1,3 +1,5 @@
----+// ignore_for_file: prefer_final_fields
----+
---- import 'package:file_picker/file_picker.dart';
---- import 'package:flutter/cupertino.dart';
---- import '../../theme/app_colors.dart';
----@@ -43,7 +45,7 @@ class FileUploadField extends StatefulWidget {
---- 
---- class _FileUploadFieldState extends State<FileUploadField> {
----   List<PlatformFile> _selectedFiles = [];
-----  // ignore: prefer_final_fields
----+
----   bool _isDragging = false;
---- 
----   /// Returns the appropriate icon based on file extension
----diff --git a/lib/components/forms/text_input.dart b/lib/components/forms/text_input.dart
----index 5f9750d..48e359e 100644
------- a/lib/components/forms/text_input.dart
----+++ b/lib/components/forms/text_input.dart
----@@ -2,8 +2,10 @@ import 'package:flutter/cupertino.dart';
---- import '../../theme/app_colors.dart';
---- import '../../theme/app_dimensions.dart';
---- import '../../theme/app_text_styles.dart';
----+import '../../theme/app_theme.dart';
---- 
-----/// A customized text input field following Cupertino design principles.
----+/// A customized text input field following Cupertino design principles,
----+/// aligned with the styling from input.tsx mock.
---- ///
---- /// This component creates a consistent text input experience throughout
---- /// the application with built-in label, placeholder, and validation support.
----@@ -27,6 +29,9 @@ class AppTextInput extends StatelessWidget {
----     this.autofocus = false,
----     this.autocorrect = true,
----     this.focusNode,
----+    this.prefix,
----+    this.suffix,
----+    this.textCapitalization = TextCapitalization.none,
----   });
---- 
----   /// Controller for the text field.
----@@ -77,15 +82,77 @@ class AppTextInput extends StatelessWidget {
----   /// Focus node for controlling the focus of this input.
----   final FocusNode? focusNode;
---- 
----+  /// Optional widget to display before the text input.
----+  final Widget? prefix;
----+
----+  /// Optional widget to display after the text input.
----+  final Widget? suffix;
----+
----+  /// Configures how the platform keyboard behaviorally capitalizes digits.
----+  final TextCapitalization textCapitalization;
----+
----   @override
----   Widget build(BuildContext context) {
----+    final appTheme = AppTheme.of(context);
----+    final bool hasError = errorText != null && errorText!.isNotEmpty;
----+
----+    // Determine background color based on enabled state and theme.
----+    // CupertinoTextFields typically use a light gray background.
----+    // The mock uses `bg-background` which we map to `AppColors.backgroundSecondary` (lightGray) for enabled, and `AppColors.backgroundDisabled` for disabled.
----+    Color textFieldFillColor;
----+    if (!enabled) {
----+      textFieldFillColor = AppColors.backgroundDisabled;
----+    } else {
----+      // For light theme, use AppColors.backgroundSecondary. For dark theme, a darker equivalent would be needed.
----+      // Since darkTheme currently maps to lightTheme, this will resolve to AppColors.backgroundSecondary.
----+      textFieldFillColor =
----+          appTheme.isDarkMode
----+              ? AppColors.backgroundSecondary
----+              : AppColors
----+                  .backgroundSecondary; // Placeholder for actual dark theme color
----+    }
----+
----+    BoxDecoration decoration = BoxDecoration(
----+      color: textFieldFillColor,
----+      borderRadius: BorderRadius.circular(AppDimensions.borderRadiusMedium),
----+      border: Border.all(
----+        color: hasError ? AppColors.error : AppColors.borderGray,
----+        width: AppDimensions.borderWidth,
----+      ),
----+    );
----+
----+    // Style for the input text itself, matching text-base or md:text-sm from mock
----+    TextStyle inputTextStyle = AppTextStyles.formInput.copyWith(
----+      color:
----+          enabled
----+              ? (appTheme.isDarkMode
----+                  ? AppColors.white
----+                  : AppColors
----+                      .foregroundDark) // Adjust for dark mode if implemented
----+              : AppColors.textDisabled,
----+    );
----+
----+    // Style for placeholder text, matching placeholder:text-muted-foreground
----+    TextStyle placeholderTextStyle = AppTextStyles.formPlaceholder.copyWith(
----+      color: AppColors.textDisabled, // text-muted-foreground equivalent
----+    );
----+
----+    // Style for the label
----+    TextStyle labelStyle = AppTextStyles.formLabel.copyWith(
----+      color:
----+          appTheme.isDarkMode
----+              ? AppColors.white.withValues(alpha: 0.8)
----+              : AppColors.foregroundDark, // Adjust for dark mode
----+    );
----+
----     return Column(
----       crossAxisAlignment: CrossAxisAlignment.start,
----+      mainAxisSize: MainAxisSize.min,
----       children: [
----         if (label != null) ...[
----           Padding(
----             padding: const EdgeInsets.only(bottom: AppDimensions.spacingXs),
-----            child: Text(label!, style: AppTextStyles.formLabel),
----+            child: Text(label!, style: labelStyle),
----           ),
----         ],
----         CupertinoTextField(
----@@ -103,29 +170,30 @@ class AppTextInput extends StatelessWidget {
----           autofocus: autofocus,
----           autocorrect: autocorrect,
----           focusNode: focusNode,
----+          prefix: prefix,
----+          suffix: suffix,
----+          textCapitalization: textCapitalization,
----           padding: const EdgeInsets.symmetric(
-----            horizontal: AppDimensions.spacingM,
-----            vertical: AppDimensions.spacingS,
----+            horizontal:
----+                AppDimensions.paddingMedium, // Corresponds to px-3 in mock
----+            vertical:
----+                AppDimensions
----+                    .paddingSmall, // Corresponds to py-2 in mock (adjust if h-10 target is strict)
----           ),
-----          decoration: BoxDecoration(
-----            color: AppColors.lightGray,
-----            borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-----            border:
-----                errorText != null
-----                    ? Border.all(color: AppColors.destructiveRed)
-----                    : null,
-----          ),
-----          style: AppTextStyles.formInput,
-----          placeholderStyle: AppTextStyles.formPlaceholder,
----+          decoration: decoration,
----+          style: inputTextStyle,
----+          placeholderStyle: placeholderTextStyle,
----+          cursorColor: AppColors.primaryBlue, // Standard cursor color
----         ),
-----        if (errorText != null) ...[
----+        if (hasError) ...[
----           Padding(
-----            padding: const EdgeInsets.only(top: AppDimensions.spacingXs),
----+            padding: const EdgeInsets.only(
----+              top: AppDimensions.spacingXxs,
----+              left: AppDimensions.paddingSmall,
----+            ),
----             child: Text(
----               errorText!,
-----              style: AppTextStyles.caption.copyWith(
-----                color: AppColors.destructiveRed,
-----              ),
----+              style: AppTextStyles.caption.copyWith(color: AppColors.error),
----             ),
----           ),
----         ],
----@@ -133,3 +201,126 @@ class AppTextInput extends StatelessWidget {
----     );
----   }
---- }
----+
----+// --- Example Usage (Illustrative) ---
----+/*
----+class MyFormPage extends StatefulWidget {
----+  const MyFormPage({super.key});
----+
----+  @override
----+  State<MyFormPage> createState() => _MyFormPageState();
----+}
----+
----+class _MyFormPageState extends State<MyFormPage> {
----+  final _formKey = GlobalKey<FormState>();
----+  final _nameController = TextEditingController();
----+  final _emailController = TextEditingController();
----+  final _passwordController = TextEditingController();
----+  String? _nameError;
----+
----+  @override
----+  void dispose() {
----+    _nameController.dispose();
----+    _emailController.dispose();
----+    _passwordController.dispose();
----+    super.dispose();
----+  }
----+
----+  void _validateName(String value) {
----+    setState(() {
----+      if (value.isEmpty) {
----+        _nameError = 'Name cannot be empty.';
----+      } else if (value.length < 3) {
----+        _nameError = 'Name must be at least 3 characters.';
----+      } else {
----+        _nameError = null;
----+      }
----+    });
----+  }
----+
----+  @override
----+  Widget build(BuildContext context) {
----+    return CupertinoPageScaffold(
----+      navigationBar: const CupertinoNavigationBar(
----+        middle: Text('Text Input Examples'),
----+      ),
----+      child: SafeArea(
----+        child: Padding(
----+          padding: const EdgeInsets.all(AppDimensions.paddingLarge),
----+          child: Form(
----+            key: _formKey,
----+            child: ListView(
----+              children: <Widget>[
----+                AppTextInput(
----+                  controller: _nameController,
----+                  label: 'Full Name',
----+                  placeholder: 'Enter your full name',
----+                  textInputAction: TextInputAction.next,
----+                  errorText: _nameError,
----+                  onChanged: _validateName,
----+                  prefix: const Padding(
----+                    padding: EdgeInsets.only(right: AppDimensions.spacingS),
----+                    child: Icon(CupertinoIcons.person, color: AppColors.mediumGray, size: AppDimensions.iconSizeMedium),
----+                  ),
----+                ),
----+                const SizedBox(height: AppDimensions.spacingM),
----+                AppTextInput(
----+                  controller: _emailController,
----+                  label: 'Email Address',
----+                  placeholder: 'you@example.com',
----+                  keyboardType: TextInputType.emailAddress,
----+                  textInputAction: TextInputAction.next,
----+                  // No direct error prop for this example, assuming form validation handles it
----+                ),
----+                const SizedBox(height: AppDimensions.spacingM),
----+                AppTextInput(
----+                  controller: _passwordController,
----+                  label: 'Password',
----+                  placeholder: 'Enter your password',
----+                  obscureText: true,
----+                  textInputAction: TextInputAction.done,
----+                  suffix: Padding(
----+                    padding: const EdgeInsets.only(left: AppDimensions.spacingS),
----+                    child: CupertinoButton(
----+                      padding: EdgeInsets.zero,
----+                      child: const Icon(CupertinoIcons.eye_slash, color: AppColors.mediumGray, size: AppDimensions.iconSizeMedium),
----+                      onPressed: () {
----+                        // Toggle password visibility logic here
----+                        print('Toggle password visibility');
----+                      },
----+                    ),
----+                  ),
----+                ),
----+                const SizedBox(height: AppDimensions.spacingM),
----+                AppTextInput(
----+                  controller: TextEditingController(text: 'Disabled Text'),
----+                  label: 'Disabled Field',
----+                  enabled: false,
----+                ),
----+                const SizedBox(height: AppDimensions.spacingXl),
----+                CupertinoButton.filled(
----+                  child: const Text('Submit'),
----+                  onPressed: () {
----+                    _validateName(_nameController.text); // Trigger validation for name field
----+                    if (_formKey.currentState!.validate()) {
----+                      // This example doesn't use FormField, so direct validation check is illustrative
----+                      if (_nameError == null) {
----+                         print('Form submitted successfully!');
----+                         print('Name: ${_nameController.text}');
----+                         print('Email: ${_emailController.text}');
----+                         print('Password: ${_passwordController.text}');
----+                      } else {
----+                        print('Please correct the errors.');
----+                      }
----+                    }
----+                  },
----+                ),
----+              ],
----+            ),
----+          ),
----+        ),
----+      ),
----+    );
----+  }
----+}
----+*/
----diff --git a/lib/main.dart b/lib/main.dart
----index 8b13789..ea5702d 100644
------- a/lib/main.dart
----+++ b/lib/main.dart
----@@ -1 +1,90 @@
----+import 'package:flutter/cupertino.dart';
----+import 'package:flutter/services.dart';
----+import 'package:provider/provider.dart';
----+import 'theme/app_theme.dart';
----+import 'pages/landing_page.dart';
---- 
----+void main() {
----+  // Ensure Flutter is initialized
----+  WidgetsFlutterBinding.ensureInitialized();
----+
----+  // Set preferred device orientations (optional)
----+  SystemChrome.setPreferredOrientations([
----+    DeviceOrientation.portraitUp,
----+    DeviceOrientation.portraitDown,
----+    DeviceOrientation.landscapeLeft,
----+    DeviceOrientation.landscapeRight,
----+  ]);
----+
----+  // Run the app with theme provider
----+  runApp(const VetAnalyticsApp());
----+}
----+
----+/// The main application widget for VetAnalytics
----+class VetAnalyticsApp extends StatelessWidget {
----+  const VetAnalyticsApp({super.key});
----+
----+  @override
----+  Widget build(BuildContext context) {
----+    // Wrap app with ChangeNotifierProvider for theme management
----+    return ChangeNotifierProvider(
----+      create: (_) => AppTheme(),
----+      child: Consumer<AppTheme>(
----+        builder: (context, appTheme, child) {
----+          return CupertinoApp(
----+            // App Configuration
----+            title: 'VetAnalytics',
----+            debugShowCheckedModeBanner: false,
----+
----+            // Localization (Italian)
----+            locale: const Locale('it', 'IT'),
----+
----+            // Theme Configuration - Using the currentTheme getter
----+            theme: appTheme.currentTheme,
----+
----+            // Home Page
----+            home: const LandingPage(),
----+
----+            // Route Generation (for future navigation)
----+            onGenerateRoute: _generateRoute,
----+
----+            // Initial Route
----+            initialRoute: '/',
----+          );
----+        },
----+      ),
----+    );
----+  }
----+
----+  /// Route generator for navigation
----+  /// This will be expanded as we add more pages
----+  static Route<dynamic>? _generateRoute(RouteSettings settings) {
----+    switch (settings.name) {
----+      case '/':
----+        return CupertinoPageRoute(
----+          builder: (_) => const LandingPage(),
----+          settings: settings,
----+        );
----+
----+      // Future routes will go here:
----+      // case '/login':
----+      //   return CupertinoPageRoute(
----+      //     builder: (_) => const LoginPage(),
----+      //     settings: settings,
----+      //   );
----+      //
----+      // case '/dashboard':
----+      //   return CupertinoPageRoute(
----+      //     builder: (_) => const DashboardPage(),
----+      //     settings: settings,
----+      //   );
----+
----+      default:
----+        // Fallback to landing page for unknown routes
----+        return CupertinoPageRoute(
----+          builder: (_) => const LandingPage(),
----+          settings: settings,
----+        );
----+    }
----+  }
----+}
----diff --git a/lib/theme/app_colors.dart b/lib/theme/app_colors.dart
----index 7aa5d53..51d8259 100644
------- a/lib/theme/app_colors.dart
----+++ b/lib/theme/app_colors.dart
----@@ -10,6 +10,12 @@ class AppColors {
----   /// Used in primary buttons, links, progress indicators
----   static const Color primaryBlue = Color(0xFF007AFF);
---- 
----+  /// Foreground color for elements on an accent background (e.g., text on a primaryBlue button)
----+  static const Color accentForeground = Color(0xFFFFFFFF); // White
----+
----+  /// Background color for popover elements like dropdowns, menus
----+  static const Color popoverBackground = Color(0xFFFFFFFF); // Typically white
----+
----   /// Main background color for pages, cards, and dialog backgrounds
----   static const Color backgroundWhite = Color(0xFFFFFFFF);
---- 
----@@ -27,6 +33,30 @@ class AppColors {
----   /// Used for borders, dividers, and subtle separations between elements
----   static const Color borderGray = Color(0xFFDCDCDC);
---- 
----+  /// General border color, can be an alias for borderGray or a slightly different shade
----+  static const Color border = borderGray;
----+
----+  // Semantic Aliases (derived from base palette for clarity)
----+
----+  /// Color for secondary text elements (often same as mediumGray)
----+  static const Color textSecondary = mediumGray;
----+
----+  /// Color for disabled text elements
----+  static const Color textDisabled = Color(
----+    0x618E8E93,
----+  ); // mediumGray at 38% opacity
----+
----+  /// Color for secondary backgrounds (e.g., input fields, selected items)
----+  static const Color backgroundSecondary = lightGray;
----+
----+  /// Color for disabled backgrounds or components
----+  static const Color backgroundDisabled = Color(
----+    0xFFE5E5EA,
----+  ); // A slightly darker, less vibrant gray
----+
----+  /// Color for error text and icons (often same as destructiveRed)
----+  static const Color error = destructiveRed;
----+
----   // Accent colors
---- 
----   /// Green color for success states, positive feedback, checkmarks
----@@ -54,6 +84,17 @@ class AppColors {
----   /// Pure white for text on dark backgrounds and overlay elements
----   static const Color white = Color(0xFFFFFFFF);
---- 
----+  /// Transparent color
----+  static const Color transparent = Color(0x00000000);
----+
----+  /// Muted background color
----+  static const Color muted = Color(0xFFF1F5F9); // Example: A light gray
----+
----+  /// Muted foreground color (text on muted background)
----+  static const Color mutedForeground = Color(
----+    0xFF64748B,
----+  ); // Example: A darker gray
----+
----   /// Primary gradient applied from top-left to bottom-right (135 degrees)
----   /// Used for premium element and brand highligts
----   static const LinearGradient primaryGradient = LinearGradient(
----diff --git a/lib/theme/app_dimensions.dart b/lib/theme/app_dimensions.dart
----index 824cec8..00877e3 100644
------- a/lib/theme/app_dimensions.dart
----+++ b/lib/theme/app_dimensions.dart
----@@ -7,6 +7,9 @@
---- class AppDimensions {
----   // Spacing/Padding values
---- 
----+  /// Extra extra small spacing - used for fine-grained adjustments (2px)
----+  static const double spacingXxs = 2.0;
----+
----   /// Tiny spacing - used for minimal separation (4px)
----   static const double spacingXs = 4.0;
---- 
----@@ -25,6 +28,19 @@ class AppDimensions {
----   /// Double extra large spacing - used for very significant breaks (48px)
----   static const double spacingXxl = 48.0;
---- 
----+  // Semantic Aliases for Padding (can map to spacing or be distinct)
----+  // For consistency, we'll map them directly to spacing values for now.
----+  // If more specific padding values are needed later, they can be defined separately.
----+
----+  /// Small padding (maps to spacingS)
----+  static const double paddingSmall = spacingS;
----+
----+  /// Medium padding (maps to spacingM)
----+  static const double paddingMedium = spacingM;
----+
----+  /// Large padding (maps to spacingL)
----+  static const double paddingLarge = spacingL;
----+
----   // Border radius values
---- 
----   /// Small radius - used for subtle rounding (4px)
----@@ -39,6 +55,17 @@ class AppDimensions {
----   /// Full radius - used for pill shapes (9999px)
----   static const double radiusFull = 9999.0;
---- 
----+  // Semantic Aliases for Border Radius
----+
----+  /// Small border radius (maps to radiusSmall)
----+  static const double borderRadiusSmall = radiusSmall;
----+
----+  /// Medium border radius (maps to radiusMedium)
----+  static const double borderRadiusMedium = radiusMedium;
----+
----+  /// Large border radius (maps to radiusLarge)
----+  static const double borderRadiusLarge = radiusLarge;
----+
----   // Element sizing
---- 
----   /// Small button/input height (32px)
----@@ -50,6 +77,9 @@ class AppDimensions {
----   /// Large button/input height (56px)
----   static const double buttonHeightLarge = 56.0;
---- 
----+  /// Icon size - extra small (12px) - Added for finer icon control
----+  static const double iconSizeXs = 12.0;
----+
----   /// Icon size - small (16px)
----   static const double iconSizeSmall = 16.0;
---- 
----@@ -59,6 +89,22 @@ class AppDimensions {
----   /// Icon size - large (32px)
----   static const double iconSizeLarge = 32.0;
---- 
----+  /// Standard width for borders (1.0px)
----+  static const double borderWidth = 1.0;
----+
----+  /// Standard avatar radius (20px, for a 40px diameter avatar)
----+  static const double avatarRadiusStandard = 20.0;
----+
----+  // Existing avatar radii - these might be for different contexts or can be reviewed later
----+  /// Small avatar radius (16px)
----+  static const double avatarRadiusSmall = 16.0;
----+
----+  /// Medium avatar radius (24px)
----+  static const double avatarRadiusMedium = 24.0;
----+
----+  /// Large avatar radius (32px)
----+  static const double avatarRadiusLarge = 32.0;
----+
----   // Responsive breakpoints for web
---- 
----   /// Small mobile breakpoint (320px)
----@@ -87,9 +133,6 @@ class AppDimensions {
----   /// Standard card elevation (2.0)
----   static const double cardElevation = 2.0;
---- 
-----  /// Border width for outlines, dividers (1.0px)
-----  static const double borderWidth = 1.0;
-----
----   /// Larger border width for emphasis (2.0px)
----   static const double borderWidthLarge = 2.0;
---- 
----diff --git a/lib/theme/app_text_styles.dart b/lib/theme/app_text_styles.dart
----index cf523f4..c076343 100644
------- a/lib/theme/app_text_styles.dart
----+++ b/lib/theme/app_text_styles.dart
----@@ -60,6 +60,16 @@ class AppTextStyles {
----     height: 1.5,
----   );
---- 
----+  /// Bold primary body text style
----+  static const TextStyle bodyBold = TextStyle(
----+    fontFamily: 'SF Pro Text',
----+    fontSize: 17.0,
----+    fontWeight: FontWeight.bold,
----+    letterSpacing: -0.41,
----+    color: AppColors.foregroundDark,
----+    height: 1.5,
----+  );
----+
----   /// Secondary, smaller body text for details and descriptions
----   static const TextStyle bodySmall = TextStyle(
----     fontFamily: 'SF Pro Text',
----@@ -70,6 +80,16 @@ class AppTextStyles {
----     height: 1.5,
----   );
---- 
----+  /// Footnote text style for ancillary information
----+  static const TextStyle footnote = TextStyle(
----+    fontFamily: 'SF Pro Text',
----+    fontSize: 13.0,
----+    fontWeight: FontWeight.normal,
----+    letterSpacing: -0.08,
----+    color: AppColors.mediumGray, // Changed to AppColors.mediumGray
----+    height: 1.4,
----+  );
----+
----   // Button and interactive element styles
---- 
----   /// Text style for primary buttons
----@@ -129,10 +149,20 @@ class AppTextStyles {
----   /// Style for captions and annotations
----   static const TextStyle caption = TextStyle(
----     fontFamily: 'SF Pro Text',
-----    fontSize: 12.0,
----+    fontSize: 12.0, // Ensure this is defined
----     fontWeight: FontWeight.normal,
----     letterSpacing: 0.0,
-----    color: AppColors.mediumGray,
----+    color: AppColors.mediumGray, // Ensure this is defined
----     height: 1.3,
----   );
----+
----+  /// Style for error messages
----+  static const TextStyle error = TextStyle(
----+    fontFamily: 'SF Pro Text',
----+    fontSize: 13.0,
----+    fontWeight: FontWeight.normal,
----+    letterSpacing: -0.08,
----+    color: AppColors.destructiveRed,
----+    height: 1.4,
----+  );
---- }
----diff --git a/pubspec.lock b/pubspec.lock
----index 3f1c9e7..d9d531b 100644
------- a/pubspec.lock
----+++ b/pubspec.lock
----@@ -256,6 +256,14 @@ packages:
----       url: "https://pub.dev"
----     source: hosted
----     version: "6.1.5"
----+  shimmer:
----+    dependency: "direct main"
----+    description:
----+      name: shimmer
----+      sha256: "5f88c883a22e9f9f299e5ba0e4f7e6054857224976a5d9f839d4ebdc94a14ac9"
----+      url: "https://pub.dev"
----+    source: hosted
----+    version: "3.0.0"
----   sky_engine:
----     dependency: transitive
----     description: flutter
----diff --git a/pubspec.yaml b/pubspec.yaml
----index e9d4fb1..f9e90f5 100644
------- a/pubspec.yaml
----+++ b/pubspec.yaml
----@@ -38,6 +38,7 @@ dependencies:
----   go_router: ^15.1.3
----   flutter_adaptive_ui: ^0.8.0+1
----   fl_chart: ^1.0.0
----+  shimmer: ^3.0.0
---- 
----   # The following adds the Cupertino Icons font to your application.
----   # Use with the CupertinoIcons class for iOS style icons.
---diff --git a/lib/components/buttons/app_button.dart b/lib/components/buttons/app_button.dart
---deleted file mode 100644
---index 1e63f86..0000000
------ a/lib/components/buttons/app_button.dart
---+++ /dev/null
---@@ -1,94 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_dimensions.dart';
----
----/// Button size variants
----enum AppButtonSize {
----  /// Small, compact buttons
----  small,
----
----  /// Default, standard-sized buttons
----  medium,
----
----  /// Large, prominent buttons
----  large,
----}
----
----/// Base button class that defines common properties and behaviors for
----/// all button types in the application.
----///
----/// This abstract class ensures consistent styling and behavior across
----/// different button variants while allowing for customization.
----abstract class AppButton extends StatelessWidget {
----  /// Creates a button with the specified properties.
----  const AppButton({
----    super.key,
----    required this.onPressed,
----    required this.child,
----    this.size = AppButtonSize.medium,
----    this.width,
----    this.isLoading = false,
----    this.isDisabled = false,
----    this.borderRadius,
----  });
----
----  /// Callback that is called when the button is tapped.
----  final VoidCallback? onPressed;
----
----  /// Widget to display as the button's content.
----  final Widget child;
----
----  /// Size variant of the button.
----  final AppButtonSize size;
----
----  /// Optional explicit width for the button.
----  /// If null, the button will size to fit its content.
----  final double? width;
----
----  /// Whether the button should show a loading indicator.
----  final bool isLoading;
----
----  /// Whether the button is disabled.
----  final bool isDisabled;
----
----  /// Custom border radius. If not specified, uses default radius.
----  final BorderRadius? borderRadius;
----
----  /// Get the appropriate height for the button based on its size.
----  double get buttonHeight {
----    switch (size) {
----      case AppButtonSize.small:
----        return AppDimensions.buttonHeightSmall;
----      case AppButtonSize.medium:
----        return AppDimensions.buttonHeightMedium;
----      case AppButtonSize.large:
----        return AppDimensions.buttonHeightLarge;
----    }
----  }
----
----  /// Get the appropriate horizontal padding for the button based on its size.
----  double get horizontalPadding {
----    switch (size) {
----      case AppButtonSize.small:
----        return AppDimensions.spacingS;
----      case AppButtonSize.medium:
----        return AppDimensions.spacingM;
----      case AppButtonSize.large:
----        return AppDimensions.spacingL;
----    }
----  }
----
----  /// Get the default button border radius.
----  BorderRadius get defaultBorderRadius {
----    switch (size) {
----      case AppButtonSize.small:
----        return BorderRadius.circular(AppDimensions.radiusSmall);
----      case AppButtonSize.medium:
----        return BorderRadius.circular(AppDimensions.radiusMedium);
----      case AppButtonSize.large:
----        return BorderRadius.circular(AppDimensions.radiusLarge);
----    }
----  }
----
----  /// Get the effective border radius, using custom or default.
----  BorderRadius get effectiveBorderRadius => borderRadius ?? defaultBorderRadius;
----}
---diff --git a/lib/components/buttons/destructive_button.dart b/lib/components/buttons/destructive_button.dart
---deleted file mode 100644
---index 2bf9102..0000000
------ a/lib/components/buttons/destructive_button.dart
---+++ /dev/null
---@@ -1,47 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_text_styles.dart';
----import 'app_button.dart';
----
----/// Destructive button component for dangerous or destructive actions.
----///
----/// Used for actions that delete data, cancel processes, or perform
----/// other potentially destructive operations. The red color provides
----/// a clear visual indication of caution to the user.
----class DestructiveButton extends AppButton {
----  /// Creates a destructive button with the specified properties.
----  const DestructiveButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium,
----    super.width,
----    super.isLoading = false,
----    super.isDisabled = false,
----    super.borderRadius,
----  });
----
----  @override
----  Widget build(BuildContext context) {
----    return Container(
----      width: width,
----      height: buttonHeight,
----      decoration: BoxDecoration(
----        color: isDisabled ? AppColors.lightGray : AppColors.destructiveRed,
----        borderRadius: effectiveBorderRadius,
----      ),
----      child: CupertinoButton(
----        padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
----        borderRadius: effectiveBorderRadius,
----        onPressed: isDisabled || isLoading ? null : onPressed,
----        child:
----            isLoading
----                ? const CupertinoActivityIndicator(color: AppColors.white)
----                : DefaultTextStyle(
----                  style: AppTextStyles.buttonPrimary,
----                  child: child,
----                ),
----      ),
----    );
----  }
----}
---diff --git a/lib/components/buttons/ghost_button.dart b/lib/components/buttons/ghost_button.dart
---deleted file mode 100644
---index 5b58b9e..0000000
------ a/lib/components/buttons/ghost_button.dart
---+++ /dev/null
---@@ -1,80 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_text_styles.dart';
----import 'app_button.dart';
----
----/// Ghost button component, typically used for less prominent actions.
----/// It has no border and a transparent background, with text color indicating interactivity.
----class GhostButton extends AppButton {
----  /// Creates a ghost button.
----  const GhostButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium,
----    super.width,
----    super.isLoading = false,
----    super.isDisabled = false,
----    super.borderRadius,
----    this.foregroundColor,
----    this.pressedColor,
----  });
----
----  /// The color for the text and icon. Defaults to `AppColors.primaryBlue`.
----  final Color? foregroundColor;
----
----  /// The background color when the button is pressed. Defaults to a light gray.
----  final Color? pressedColor;
----
----  @override
----  Widget build(BuildContext context) {
----    final Color effectiveForegroundColor =
----        foregroundColor ?? AppColors.primaryBlue;
----
----    return CupertinoButton(
----      padding: EdgeInsets.symmetric(
----        horizontal: horizontalPadding,
----        vertical:
----            (buttonHeight - (AppTextStyles.buttonSecondary.fontSize ?? 16)) / 2,
----      ),
----      borderRadius: effectiveBorderRadius,
----      color: CupertinoColors.transparent, // Explicitly transparent
----      disabledColor:
----          CupertinoColors
----              .transparent, // Explicitly transparent for disabled state
----      minSize: buttonHeight,
----      onPressed: isDisabled || isLoading ? null : onPressed,
----      child: Builder(
----        builder: (context) {
----          final Color currentForegroundColor =
----              isDisabled ? AppColors.mediumGray : effectiveForegroundColor;
----          Widget buttonChild = child;
----
----          // Apply the foreground color to the text style if the child is Text
----          if (child is Text) {
----            Text textChild = child as Text;
----            buttonChild = Text(
----              textChild.data!,
----              style: (textChild.style ?? AppTextStyles.buttonSecondary)
----                  .copyWith(color: currentForegroundColor),
----              textAlign: textChild.textAlign,
----              overflow: textChild.overflow,
----              maxLines: textChild.maxLines,
----            );
----          } else if (child is Icon) {
----            Icon iconChild = child as Icon;
----            buttonChild = Icon(
----              iconChild.icon,
----              color: currentForegroundColor,
----              size: iconChild.size, // Use provided icon size
----            );
----          }
----
----          return isLoading
----              ? CupertinoActivityIndicator(color: currentForegroundColor)
----              : buttonChild;
----        },
----      ),
----    );
----  }
----}
---diff --git a/lib/components/buttons/link_button.dart b/lib/components/buttons/link_button.dart
---deleted file mode 100644
---index 689e514..0000000
------ a/lib/components/buttons/link_button.dart
---+++ /dev/null
---@@ -1,90 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_text_styles.dart';
----import '../../theme/app_dimensions.dart';
----import 'app_button.dart';
----
----/// Link button component, styled to look like a hyperlink.
----class LinkButton extends AppButton {
----  /// Creates a link button.
----  const LinkButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium, // Size might affect padding/tap target
----    super.width,
----    super.isLoading = false, // Link buttons usually don't have a loading state
----    super.isDisabled = false,
----    this.foregroundColor,
----  });
----
----  /// The color for the text. Defaults to `AppColors.primaryBlue`.
----  final Color? foregroundColor;
----
----  @override
----  Widget build(BuildContext context) {
----    final Color effectiveForegroundColor =
----        foregroundColor ?? AppColors.primaryBlue;
----
----    // Link buttons typically don't have a prominent background or border
----    // Their height is determined by the text itself mostly.
----    // We use CupertinoButton for its onPressed handling and disabled state.
----    return CupertinoButton(
----      padding: EdgeInsets.symmetric(
----        horizontal: horizontalPadding / 2,
----        vertical: AppDimensions.spacingXs, // Corrected: Use AppDimensions
----      ), // Minimal padding
----      onPressed: isDisabled || isLoading ? null : onPressed,
----      minSize: 0, // Allow the button to be as small as its child
----      child: Builder(
----        builder: (context) {
----          final Color currentForegroundColor =
----              isDisabled ? AppColors.mediumGray : effectiveForegroundColor;
----          Widget buttonChild = child;
----
----          if (child is Text) {
----            Text textChild = child as Text;
----            // Assuming AppTextStyles.link is not defined, using a base style and adding underline.
----            // If AppTextStyles.link exists, it should be used directly.
----            TextStyle linkStyle =
----                (textChild.style ?? AppTextStyles.buttonSecondary).copyWith(
----                  color: currentForegroundColor,
----                  decoration: TextDecoration.underline,
----                  decorationColor: currentForegroundColor,
----                  decorationThickness: 2.0, // Make underline more visible
----                );
----            buttonChild = Text(
----              textChild.data!,
----              style: linkStyle,
----              textAlign: textChild.textAlign,
----              overflow: textChild.overflow,
----              maxLines: textChild.maxLines,
----            );
----          } else if (child is Icon) {
----            // Icons in link buttons are less common but possible
----            Icon iconChild = child as Icon;
----            // Use a default size if iconChild.size is null, e.g., from a text style if appropriate
----            final iconSize =
----                iconChild.size ??
----                (AppTextStyles.buttonSecondary.fontSize ?? 16.0);
----            buttonChild = Icon(
----              iconChild.icon,
----              color: currentForegroundColor,
----              size: iconSize,
----            );
----          }
----
----          // Link buttons typically don't show a loading indicator in the same way
----          // If isLoading is true, we might just disable it or show a very subtle indicator elsewhere.
----          return isLoading
----              ? CupertinoActivityIndicator(
----                // Adjust radius based on a text style if AppTextStyles.link is not available
----                radius: (AppTextStyles.buttonSecondary.fontSize ?? 16.0) / 2.5,
----                color: currentForegroundColor,
----              )
----              : buttonChild;
----        },
----      ),
----    );
----  }
----}
---diff --git a/lib/components/buttons/outline_button.dart b/lib/components/buttons/outline_button.dart
---deleted file mode 100644
---index 05afed5..0000000
------ a/lib/components/buttons/outline_button.dart
---+++ /dev/null
---@@ -1,97 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_dimensions.dart';
----import '../../theme/app_text_styles.dart';
----import 'app_button.dart';
----
----/// Outline button component with a transparent background and a visible border.
----///
----/// Used for actions that need to be available but not as prominent as primary
----/// or secondary buttons.
----class OutlineButton extends AppButton {
----  /// Creates an outline button with the specified properties.
----  const OutlineButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium,
----    super.width,
----    super.isLoading = false,
----    super.isDisabled = false,
----    super.borderRadius,
----    this.outlineColor,
----    this.pressedColor,
----  });
----
----  /// Optional color for the outline border and text/icon.
----  /// Defaults to `AppColors.primaryBlue`.
----  final Color? outlineColor;
----
----  /// Optional background color when the button is pressed.
----  /// Defaults to a semi-transparent version of `outlineColor`.
----  final Color? pressedColor;
----
----  @override
----  Widget build(BuildContext context) {
----    final Color effectiveOutlineColor = outlineColor ?? AppColors.primaryBlue;
----
----    return Container(
----      width: width,
----      height: buttonHeight,
----      decoration: BoxDecoration(
----        color:
----            CupertinoColors
----                .transparent, // Outline buttons have no fill by default
----        borderRadius: effectiveBorderRadius,
----        border: Border.all(
----          color: isDisabled ? AppColors.mediumGray : effectiveOutlineColor,
----          width: AppDimensions.borderWidth,
----        ),
----      ),
----      child: CupertinoButton(
----        padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
----        borderRadius: effectiveBorderRadius,
----        color:
----            CupertinoColors
----                .transparent, // Ensure CupertinoButton itself doesn't add a color
----        disabledColor: CupertinoColors.transparent,
----        pressedOpacity:
----            1.0, // We handle pressed state with background color change if desired
----        onPressed: isDisabled || isLoading ? null : onPressed,
----        child: Builder(
----          builder: (context) {
----            // Determine the foreground color based on disabled state
----            final Color foreground =
----                isDisabled ? AppColors.mediumGray : effectiveOutlineColor;
----            Widget buttonChild = child;
----
----            // Apply the foreground color to the text style if the child is Text
----            if (child is Text) {
----              Text textChild = child as Text;
----              buttonChild = Text(
----                textChild.data!,
----                style: (textChild.style ?? AppTextStyles.buttonSecondary)
----                    .copyWith(color: foreground),
----                textAlign: textChild.textAlign,
----                overflow: textChild.overflow,
----                maxLines: textChild.maxLines,
----              );
----            } else if (child is Icon) {
----              Icon iconChild = child as Icon;
----              buttonChild = Icon(
----                iconChild.icon,
----                color: foreground,
----                size: iconChild.size,
----              );
----            }
----            // For more complex children, color might need to be handled inside the child widget itself.
----
----            return isLoading
----                ? CupertinoActivityIndicator(color: foreground)
----                : buttonChild;
----          },
----        ),
----      ),
----    );
----  }
----}
---diff --git a/lib/components/buttons/primary_button.dart b/lib/components/buttons/primary_button.dart
---deleted file mode 100644
---index 2c49430..0000000
------ a/lib/components/buttons/primary_button.dart
---+++ /dev/null
---@@ -1,46 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_text_styles.dart';
----import 'app_button.dart';
----
----/// Primary button component using the application's primary color.
----///
----/// Used for main actions and the most important interactions on screens.
----/// Follows Apple's Human Interface Guidelines for button styling.
----class PrimaryButton extends AppButton {
----  /// Creates a primary button with the specified properties.
----  const PrimaryButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium,
----    super.width,
----    super.isLoading = false,
----    super.isDisabled = false,
----    super.borderRadius,
----  });
----
----  @override
----  Widget build(BuildContext context) {
----    return Container(
----      width: width,
----      height: buttonHeight,
----      decoration: BoxDecoration(
----        color: isDisabled ? AppColors.lightGray : AppColors.primaryBlue,
----        borderRadius: effectiveBorderRadius,
----      ),
----      child: CupertinoButton(
----        padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
----        borderRadius: effectiveBorderRadius,
----        onPressed: isDisabled || isLoading ? null : onPressed,
----        child:
----            isLoading
----                ? const CupertinoActivityIndicator(color: AppColors.white)
----                : DefaultTextStyle(
----                  style: AppTextStyles.buttonPrimary,
----                  child: child,
----                ),
----      ),
----    );
----  }
----}
---diff --git a/lib/components/buttons/secondary_button.dart b/lib/components/buttons/secondary_button.dart
---deleted file mode 100644
---index da51ff0..0000000
------ a/lib/components/buttons/secondary_button.dart
---+++ /dev/null
---@@ -1,52 +0,0 @@
----import 'package:flutter/cupertino.dart';
----import '../../theme/app_colors.dart';
----import '../../theme/app_text_styles.dart';
----import 'app_button.dart';
----
----/// Secondary button component with a lighter visual weight.
----///
----/// Used for secondary actions that don't require the visual prominence
----/// of a primary button. Provides clear affordance while maintaining
----/// hierarchy with primary actions.
----class SecondaryButton extends AppButton {
----  /// Creates a secondary button with the specified properties.
----  const SecondaryButton({
----    super.key,
----    required super.onPressed,
----    required super.child,
----    super.size = AppButtonSize.medium,
----    super.width,
----    super.isLoading = false,
----    super.isDisabled = false,
----    super.borderRadius,
----  });
----
----  @override
----  Widget build(BuildContext context) {
----    return Container(
----      width: width,
----      height: buttonHeight,
----      decoration: BoxDecoration(
----        color:
----            isDisabled
----                ? AppColors.lightGray.withValues(alpha: 0.5)
----                : AppColors.lightGray,
----        borderRadius: effectiveBorderRadius,
----      ),
----      child: CupertinoButton(
----        padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
----        borderRadius: effectiveBorderRadius,
----        onPressed: isDisabled || isLoading ? null : onPressed,
----        child:
----            isLoading
----                ? const CupertinoActivityIndicator(
----                  color: AppColors.foregroundDark,
----                )
----                : DefaultTextStyle(
----                  style: AppTextStyles.buttonSecondary,
----                  child: child,
----                ),
----      ),
----    );
----  }
----}
---diff --git a/lib/components/dialogs/add_patient_modal.dart b/lib/components/dialogs/add_patient_modal.dart
---index a296320..32a8b0b 100644
------ a/lib/components/dialogs/add_patient_modal.dart
---+++ b/lib/components/dialogs/add_patient_modal.dart
---@@ -5,8 +5,7 @@ import '../../theme/app_dimensions.dart';
--- import '../dialogs/app_generic_dialog.dart';
--- import '../forms/app_form.dart';
--- import '../forms/app_label.dart';
----import '../buttons/primary_button.dart';
----import '../buttons/outline_button.dart';
---+import '../buttons/index.dart';
--- 
--- /// Data model for patient form
--- class PatientFormData {
---diff --git a/lib/components/forms/file_upload.dart b/lib/components/forms/file_upload.dart
---index 881f755..87c8b26 100644
------ a/lib/components/forms/file_upload.dart
---+++ b/lib/components/forms/file_upload.dart
---@@ -5,8 +5,7 @@ import 'package:flutter/cupertino.dart';
--- import '../../theme/app_colors.dart';
--- import '../../theme/app_dimensions.dart';
--- import '../../theme/app_text_styles.dart';
----import '../buttons/secondary_button.dart';
----import '../buttons/app_button.dart';
---+import '../buttons/index.dart';
--- 
--- /// A file upload component that allows users to select PDF files and images.
--- ///
---@@ -244,7 +243,7 @@ class _FileUploadFieldState extends State<FileUploadField> {
---                               Row(
---                                 children: [
---                                   SecondaryButton(
----                                    size: AppButtonSize.small,
---+                                    size: ButtonSize.small,
---                                     onPressed: () => _pickFiles(FileType.image),
---                                     child: const Text('Aggiungi Immagini'),
---                                   ),
---@@ -255,7 +254,7 @@ class _FileUploadFieldState extends State<FileUploadField> {
---                                       width: AppDimensions.spacingS,
---                                     ),
---                                     SecondaryButton(
----                                      size: AppButtonSize.small,
---+                                      size: ButtonSize.small,
---                                       onPressed: () => _pickFiles(FileType.any),
---                                       child: const Text('Aggiungi PDF'),
---                                     ),
---diff --git a/lib/components/navigation/app_header.dart b/lib/components/navigation/app_header.dart
---index 0af8ae7..310a29c 100644
------ a/lib/components/navigation/app_header.dart
---+++ b/lib/components/navigation/app_header.dart
---@@ -3,7 +3,7 @@ import '../../theme/app_colors.dart';
--- import '../../theme/app_text_styles.dart';
--- import '../../theme/app_dimensions.dart';
--- import '../../theme/app_gradients.dart';
----import '../buttons/ghost_button.dart';
---+import '../buttons/index.dart';
--- 
--- /// A header component for the application
--- ///
---diff --git a/lib/main.dart b/lib/main.dart
---index ea5702d..67381df 100644
------ a/lib/main.dart
---+++ b/lib/main.dart
---@@ -1,90 +1,19 @@
--- import 'package:flutter/cupertino.dart';
----import 'package:flutter/services.dart';
----import 'package:provider/provider.dart';
----import 'theme/app_theme.dart';
--- import 'pages/landing_page.dart';
--- 
--- void main() {
----  // Ensure Flutter is initialized
----  WidgetsFlutterBinding.ensureInitialized();
----
----  // Set preferred device orientations (optional)
----  SystemChrome.setPreferredOrientations([
----    DeviceOrientation.portraitUp,
----    DeviceOrientation.portraitDown,
----    DeviceOrientation.landscapeLeft,
----    DeviceOrientation.landscapeRight,
----  ]);
----
----  // Run the app with theme provider
---   runApp(const VetAnalyticsApp());
--- }
--- 
----/// The main application widget for VetAnalytics
--- class VetAnalyticsApp extends StatelessWidget {
---   const VetAnalyticsApp({super.key});
--- 
---   @override
---   Widget build(BuildContext context) {
----    // Wrap app with ChangeNotifierProvider for theme management
----    return ChangeNotifierProvider(
----      create: (_) => AppTheme(),
----      child: Consumer<AppTheme>(
----        builder: (context, appTheme, child) {
----          return CupertinoApp(
----            // App Configuration
----            title: 'VetAnalytics',
----            debugShowCheckedModeBanner: false,
----
----            // Localization (Italian)
----            locale: const Locale('it', 'IT'),
----
----            // Theme Configuration - Using the currentTheme getter
----            theme: appTheme.currentTheme,
----
----            // Home Page
----            home: const LandingPage(),
----
----            // Route Generation (for future navigation)
----            onGenerateRoute: _generateRoute,
----
----            // Initial Route
----            initialRoute: '/',
----          );
----        },
----      ),
---+    return const CupertinoApp(
---+      title: 'VetAnalytics',
---+      home: LandingPage(),
---+      debugShowCheckedModeBanner: false,
---     );
---   }
----
----  /// Route generator for navigation
----  /// This will be expanded as we add more pages
----  static Route<dynamic>? _generateRoute(RouteSettings settings) {
----    switch (settings.name) {
----      case '/':
----        return CupertinoPageRoute(
----          builder: (_) => const LandingPage(),
----          settings: settings,
----        );
----
----      // Future routes will go here:
----      // case '/login':
----      //   return CupertinoPageRoute(
----      //     builder: (_) => const LoginPage(),
----      //     settings: settings,
----      //   );
----      //
----      // case '/dashboard':
----      //   return CupertinoPageRoute(
----      //     builder: (_) => const DashboardPage(),
----      //     settings: settings,
----      //   );
----
----      default:
----        // Fallback to landing page for unknown routes
----        return CupertinoPageRoute(
----          builder: (_) => const LandingPage(),
----          settings: settings,
----        );
----    }
----  }
--- }
---diff --git a/lib/pages/landing_page.dart b/lib/pages/landing_page.dart
---index 6de2325..7d8ca01 100644
------ a/lib/pages/landing_page.dart
---+++ b/lib/pages/landing_page.dart
---@@ -2,11 +2,9 @@ import 'package:flutter/cupertino.dart';
--- import '../theme/app_colors.dart';
--- import '../theme/app_text_styles.dart';
--- import '../theme/app_dimensions.dart';
----import '../components/layout/page_scaffold.dart';
----import '../components/buttons/primary_button.dart';
----import '../components/buttons/ghost_button.dart';
---+import '../components/buttons/index.dart';
--- 
----// Data model for features section
---+// Data models for the landing page sections
--- class FeatureItem {
---   final IconData icon;
---   final String title;
---@@ -19,7 +17,6 @@ class FeatureItem {
---   });
--- }
--- 
----// Data model for stats section
--- class StatItem {
---   final IconData icon;
---   final String value;
---@@ -35,7 +32,7 @@ class StatItem {
--- class LandingPage extends StatelessWidget {
---   const LandingPage({super.key});
--- 
----  // Define our feature data - translated to Italian
---+  // Features data in Italian
---   static const List<FeatureItem> features = [
---     FeatureItem(
---       icon: CupertinoIcons.waveform_path_ecg,
---@@ -57,7 +54,7 @@ class LandingPage extends StatelessWidget {
---     ),
---   ];
--- 
----  // Define our stats data - translated to Italian
---+  // Stats data in Italian
---   static const List<StatItem> stats = [
---     StatItem(
---       icon: CupertinoIcons.group,
---@@ -78,224 +75,372 @@ class LandingPage extends StatelessWidget {
--- 
---   @override
---   Widget build(BuildContext context) {
----    return PageScaffold(
----      layoutType:
----          PageLayoutType.fullWidth, // Full width for landing page design
---+    return CupertinoPageScaffold(
---       backgroundColor: AppColors.backgroundWhite,
----      padding:
----          EdgeInsets.zero, // No default padding, we'll handle it per section
----      navigationBar: _buildNavigationBar(context),
----      body: Column(
----        children: [
----          // Hero Section
----          _buildHeroSection(context),
---+      child: SingleChildScrollView(
---+        child: Column(
---+          children: [
---+            // Header
---+            _buildHeader(context),
--- 
----          // Features Section
----          _buildFeaturesSection(context),
---+            // Hero Section
---+            _buildHeroSection(context),
--- 
----          // Stats Section
----          _buildStatsSection(context),
---+            // Features Section
---+            _buildFeaturesSection(context),
--- 
----          // CTA Section
----          _buildCTASection(context),
----        ],
---+            // Stats Section
---+            _buildStatsSection(context),
---+
---+            // CTA Section
---+            _buildCTASection(context),
---+
---+            // Footer
---+            _buildFooter(context),
---+          ],
---+        ),
---       ),
----      footer: _buildFooter(context),
---     );
---   }
--- 
----  // Navigation Bar using CupertinoNavigationBar
----  CupertinoNavigationBar _buildNavigationBar(BuildContext context) {
----    return CupertinoNavigationBar(
----      backgroundColor: AppColors.backgroundWhite.withValues(alpha: 0.95),
----      border: const Border(
----        bottom: BorderSide(color: AppColors.borderGray, width: 0.5),
---+  // Header with navigation
---+  Widget _buildHeader(BuildContext context) {
---+    return Container(
---+      padding: const EdgeInsets.symmetric(
---+        horizontal: AppDimensions.spacingL,
---+        vertical: AppDimensions.spacingS,
---+      ),
---+      decoration: BoxDecoration(
---+        color: AppColors.backgroundWhite.withValues(alpha: 0.95),
---+        border: const Border(
---+          bottom: BorderSide(color: AppColors.borderGray, width: 0.5),
---+        ),
---       ),
----      middle: Row(
----        mainAxisSize: MainAxisSize.min,
---+      child: Row(
---+        mainAxisAlignment: MainAxisAlignment.spaceBetween,
---         children: [
----          Container(
----            width: 24,
----            height: 24,
----            decoration: BoxDecoration(
----              gradient: LinearGradient(
----                colors: [
----                  AppColors.primaryBlue,
----                  AppColors.primaryBlue.withValues(alpha: 0.7),
----                ],
---+          // Logo
---+          Row(
---+            mainAxisSize: MainAxisSize.min,
---+            children: [
---+              Container(
---+                width: 32,
---+                height: 32,
---+                decoration: BoxDecoration(
---+                  gradient: const LinearGradient(
---+                    colors: [AppColors.primaryBlue, Color(0xFF4A90E2)],
---+                  ),
---+                  borderRadius: BorderRadius.circular(
---+                    AppDimensions.radiusSmall,
---+                  ),
---+                ),
---+                child: const Center(
---+                  child: Text(
---+                    'V',
---+                    style: TextStyle(
---+                      color: AppColors.white,
---+                      fontSize: 16,
---+                      fontWeight: FontWeight.bold,
---+                    ),
---+                  ),
---+                ),
---               ),
----              borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
----            ),
----            child: const Center(
----              child: Text(
----                'V',
----                style: TextStyle(
----                  color: CupertinoColors.white,
----                  fontSize: 12,
----                  fontWeight: FontWeight.bold,
---+              const SizedBox(width: AppDimensions.spacingS),
---+              Text(
---+                'VetAnalytics',
---+                style: AppTextStyles.title3.copyWith(
---+                  fontWeight: FontWeight.w600,
---                 ),
---               ),
----            ),
----          ),
----          const SizedBox(width: AppDimensions.spacingXs),
----          Text(
----            'VetAnalytics',
----            style: AppTextStyles.body.copyWith(fontWeight: FontWeight.w600),
----          ),
----        ],
----      ),
----      trailing: Row(
----        mainAxisSize: MainAxisSize.min,
----        children: [
----          GhostButton(
----            onPressed: () {
----              debugPrint('Navigate to login');
----            },
----            child: const Text('Accedi'),
---+            ],
---           ),
----          const SizedBox(width: AppDimensions.spacingS),
----          PrimaryButton(
----            onPressed: () {
----              debugPrint('Navigate to get started');
----            },
----            child: const Text('Inizia'),
---+
---+          // Navigation buttons
---+          Row(
---+            mainAxisSize: MainAxisSize.min,
---+            children: [
---+              GhostButton(
---+                size: ButtonSize.small,
---+                onPressed: () => debugPrint('Accedi tapped'),
---+                child: const Text('Accedi'),
---+              ),
---+              const SizedBox(width: AppDimensions.spacingS),
---+              PrimaryButton(
---+                size: ButtonSize.small,
---+                onPressed: () => debugPrint('Inizia tapped'),
---+                child: const Text('Inizia'),
---+              ),
---+            ],
---           ),
---         ],
---       ),
---     );
---   }
--- 
----  // Hero Section - Main banner with call to action
---+  // Hero section
---   Widget _buildHeroSection(BuildContext context) {
---     return Container(
---       width: double.infinity,
---+      padding: const EdgeInsets.fromLTRB(
---+        AppDimensions.spacingL,
---+        AppDimensions.spacingXxl + AppDimensions.spacingXl,
---+        AppDimensions.spacingL,
---+        AppDimensions.spacingXxl,
---+      ),
---       decoration: const BoxDecoration(
---         gradient: LinearGradient(
---           begin: Alignment.topLeft,
---           end: Alignment.bottomRight,
---           colors: [
---             AppColors.backgroundWhite,
----            AppColors.lightGray,
---+            Color(0xFFF8F9FA),
---             AppColors.backgroundWhite,
---           ],
---         ),
---       ),
----      padding: const EdgeInsets.all(AppDimensions.spacingXxl),
---       child: Column(
---         children: [
----          const SizedBox(height: AppDimensions.spacingXxl),
---+          Container(
---+            constraints: const BoxConstraints(maxWidth: 960),
---+            child: Column(
---+              children: [
---+                // Main headline with gradient text
---+                RichText(
---+                  textAlign: TextAlign.center,
---+                  text: TextSpan(
---+                    style: const TextStyle(
---+                      fontSize: 48,
---+                      fontWeight: FontWeight.bold,
---+                      color: AppColors.foregroundDark,
---+                      height: 1.1,
---+                    ),
---+                    children: [
---+                      const TextSpan(text: 'Analisi '),
---+                      TextSpan(
---+                        text: 'Rivoluzionaria ',
---+                        style: TextStyle(
---+                          foreground:
---+                              Paint()
---+                                ..shader = const LinearGradient(
---+                                  colors: [
---+                                    AppColors.primaryBlue,
---+                                    Color(0xFF4A90E2),
---+                                  ],
---+                                ).createShader(
---+                                  const Rect.fromLTWH(0.0, 0.0, 200.0, 70.0),
---+                                ),
---+                        ),
---+                      ),
---+                      const TextSpan(text: 'del Sangue'),
---+                    ],
---+                  ),
---+                ),
--- 
----          // Main headline
----          Text(
----            'Analisi Professionale del Sangue\nper l\'Eccellenza Veterinaria',
----            style: AppTextStyles.largeTitle.copyWith(fontSize: 48, height: 1.1),
----            textAlign: TextAlign.center,
----          ),
---+                const SizedBox(height: AppDimensions.spacingL),
--- 
----          const SizedBox(height: AppDimensions.spacingL),
---+                // Subtitle
---+                Text(
---+                  'Trasforma la diagnostica veterinaria con l\'analisi del sangue basata sull\'intelligenza artificiale. '
---+                  'Ottieni insight istantanei e precisi per fornire la migliore cura ai tuoi pazienti.',
---+                  style: AppTextStyles.title3.copyWith(
---+                    color: AppColors.textSecondary,
---+                    fontWeight: FontWeight.normal,
---+                    height: 1.5,
---+                  ),
---+                  textAlign: TextAlign.center,
---+                ),
--- 
----          // Subtitle
----          Text(
----            'Trasforma la tua pratica veterinaria con l\'analisi del sangue basata sull\'IA.\nOttieni risultati istantanei e accurati che ti aiutano a fornire la migliore cura per i tuoi pazienti.',
----            style: AppTextStyles.body.copyWith(
----              color: AppColors.mediumGray,
----              fontSize: 18,
----              height: 1.5,
---+                const SizedBox(height: AppDimensions.spacingXl),
---+
---+                // CTA buttons
---+                _buildResponsiveCTAButtons(context),
---+              ],
---             ),
----            textAlign: TextAlign.center,
---           ),
---+        ],
---+      ),
---+    );
---+  }
--- 
----          const SizedBox(height: AppDimensions.spacingXxl),
---+  // Responsive CTA buttons for hero section
---+  Widget _buildResponsiveCTAButtons(BuildContext context) {
---+    return LayoutBuilder(
---+      builder: (context, constraints) {
---+        final isSmallScreen = constraints.maxWidth < AppDimensions.breakpointM;
--- 
----          // CTA Buttons
----          Wrap(
----            spacing: AppDimensions.spacingM,
----            runSpacing: AppDimensions.spacingM,
----            alignment: WrapAlignment.center,
---+        if (isSmallScreen) {
---+          return Column(
---             children: [
----              PrimaryButton(
----                onPressed: () {
----                  debugPrint('Start analyzing');
----                },
----                child: Row(
----                  mainAxisSize: MainAxisSize.min,
----                  children: [
----                    const Icon(CupertinoIcons.play_fill, size: 16),
----                    const SizedBox(width: AppDimensions.spacingXs),
----                    const Text('Inizia ad Analizzare'),
----                  ],
---+              SizedBox(
---+                width: double.infinity,
---+                child: PrimaryButton(
---+                  size: ButtonSize.large,
---+                  onPressed: () => debugPrint('Inizia Analisi tapped'),
---+                  child: const Row(
---+                    mainAxisSize: MainAxisSize.min,
---+                    mainAxisAlignment: MainAxisAlignment.center,
---+                    children: [
---+                      Text('Inizia Analisi'),
---+                      SizedBox(width: AppDimensions.spacingS),
---+                      Icon(CupertinoIcons.chevron_right, size: 20),
---+                    ],
---+                  ),
---                 ),
---               ),
----
----              GhostButton(
----                onPressed: () {
----                  debugPrint('Watch demo');
----                },
----                child: Row(
----                  mainAxisSize: MainAxisSize.min,
----                  children: [
----                    const Icon(CupertinoIcons.play_circle, size: 16),
----                    const SizedBox(width: AppDimensions.spacingXs),
----                    const Text('Guarda Demo'),
----                  ],
---+              const SizedBox(height: AppDimensions.spacingM),
---+              SizedBox(
---+                width: double.infinity,
---+                child: OutlineButton(
---+                  size: ButtonSize.large,
---+                  onPressed: () => debugPrint('Guarda Demo tapped'),
---+                  child: const Row(
---+                    mainAxisSize: MainAxisSize.min,
---+                    mainAxisAlignment: MainAxisAlignment.center,
---+                    children: [
---+                      Icon(CupertinoIcons.play_fill, size: 20),
---+                      SizedBox(width: AppDimensions.spacingS),
---+                      Text('Guarda Demo'),
---+                    ],
---+                  ),
---                 ),
---               ),
---             ],
----          ),
----
----          const SizedBox(height: AppDimensions.spacingXxl),
----        ],
----      ),
---+          );
---+        } else {
---+          return Center(
---+            child: Container(
---+              constraints: const BoxConstraints(maxWidth: 600),
---+              child: Row(
---+                mainAxisSize: MainAxisSize.min,
---+                mainAxisAlignment: MainAxisAlignment.center,
---+                children: [
---+                  PrimaryButton(
---+                    size: ButtonSize.large,
---+                    onPressed: () => debugPrint('Inizia Analisi tapped'),
---+                    child: const Row(
---+                      mainAxisSize: MainAxisSize.min,
---+                      mainAxisAlignment: MainAxisAlignment.center,
---+                      children: [
---+                        Text('Inizia Analisi'),
---+                        SizedBox(width: AppDimensions.spacingS),
---+                        Icon(CupertinoIcons.chevron_right, size: 20),
---+                      ],
---+                    ),
---+                  ),
---+                  const SizedBox(width: AppDimensions.spacingM),
---+                  OutlineButton(
---+                    size: ButtonSize.large,
---+                    onPressed: () => debugPrint('Guarda Demo tapped'),
---+                    child: const Row(
---+                      mainAxisSize: MainAxisSize.min,
---+                      children: [
---+                        Icon(CupertinoIcons.play_fill, size: 20),
---+                        SizedBox(width: AppDimensions.spacingS),
---+                        Text('Guarda Demo'),
---+                      ],
---+                    ),
---+                  ),
---+                ],
---+              ),
---+            ),
---+          );
---+        }
---+      },
---     );
---   }
--- 
----  // Features Section - Showcasing key benefits
---+  // Features section
---   Widget _buildFeaturesSection(BuildContext context) {
---     return Container(
---       width: double.infinity,
----      padding: const EdgeInsets.all(AppDimensions.spacingXxl),
---+      padding: const EdgeInsets.symmetric(
---+        horizontal: AppDimensions.spacingL,
---+        vertical: AppDimensions.spacingXxl,
---+      ),
---       child: Column(
---         children: [
----          // Section title
----          Text(
----            'Perché Scegliere VetAnalytics?',
----            style: AppTextStyles.title1.copyWith(fontSize: 32),
----            textAlign: TextAlign.center,
----          ),
---+          Container(
---+            constraints: const BoxConstraints(
---+              maxWidth: AppDimensions.maxContentWidth,
---+            ),
---+            child: Column(
---+              children: [
---+                // Section header
---+                Column(
---+                  children: [
---+                    Text(
---+                      'Perché Scegliere VetAnalytics?',
---+                      style: AppTextStyles.largeTitle.copyWith(
---+                        fontWeight: FontWeight.bold,
---+                      ),
---+                      textAlign: TextAlign.center,
---+                    ),
---+                    const SizedBox(height: AppDimensions.spacingM),
---+                    Text(
---+                      'Costruito per le moderne pratiche veterinarie che richiedono precisione, velocità e affidabilità',
---+                      style: AppTextStyles.title3.copyWith(
---+                        color: AppColors.textSecondary,
---+                        fontWeight: FontWeight.normal,
---+                      ),
---+                      textAlign: TextAlign.center,
---+                    ),
---+                  ],
---+                ),
--- 
----          const SizedBox(height: AppDimensions.spacingM),
---+                const SizedBox(height: AppDimensions.spacingXxl),
--- 
----          // Section subtitle
----          Text(
----            'Costruito per pratiche veterinarie moderne che richiedono precisione, velocità e affidabilità',
----            style: AppTextStyles.body.copyWith(
----              color: AppColors.mediumGray,
----              fontSize: 18,
---+                // Feature cards
---+                _buildFeatureCards(context),
---+              ],
---             ),
----            textAlign: TextAlign.center,
---           ),
---+        ],
---+      ),
---+    );
---+  }
--- 
----          const SizedBox(height: AppDimensions.spacingXxl),
----
----          // Features grid - Using Wrap for better responsive behavior
----          Wrap(
---+  // Feature cards grid
---+  Widget _buildFeatureCards(BuildContext context) {
---+    return LayoutBuilder(
---+      builder: (context, constraints) {
---+        final isSmallScreen = constraints.maxWidth < AppDimensions.breakpointM;
---+
---+        if (isSmallScreen) {
---+          return IntrinsicHeight(
---+            child: Column(
---+              children:
---+                  features
---+                      .map(
---+                        (feature) => Padding(
---+                          padding: const EdgeInsets.only(
---+                            bottom: AppDimensions.spacingL,
---+                          ),
---+                          child: _buildFeatureCard(feature),
---+                        ),
---+                      )
---+                      .toList(),
---+            ),
---+          );
---+        } else {
---+          return Wrap(
---             spacing: AppDimensions.spacingL,
---             runSpacing: AppDimensions.spacingL,
---             children:
---                 features
---                     .map(
----                      (feature) => ConstrainedBox(
----                        constraints: const BoxConstraints(
----                          minWidth: 280,
----                          maxWidth: 350,
----                        ),
---+                      (feature) => SizedBox(
---+                        width:
---+                            (constraints.maxWidth -
---+                                2 * AppDimensions.spacingL) /
---+                            3,
---+                        height: 280, // Fixed height for equal card heights
---                         child: _buildFeatureCard(feature),
---                       ),
---                     )
---                     .toList(),
----          ),
----        ],
----      ),
---+          );
---+        }
---+      },
---     );
---   }
--- 
---@@ -303,23 +448,17 @@ class LandingPage extends StatelessWidget {
---   Widget _buildFeatureCard(FeatureItem feature) {
---     return Container(
---       width: double.infinity,
---+      height: double.infinity,
---       padding: const EdgeInsets.all(AppDimensions.spacingXl),
---       decoration: BoxDecoration(
----        color: AppColors.backgroundWhite,
---+        color: AppColors.backgroundSecondary.withValues(alpha: 0.5),
---         borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
----        border: Border.all(color: AppColors.borderGray),
----        boxShadow: [
----          BoxShadow(
----            color: CupertinoColors.black.withValues(alpha: 0.05),
----            blurRadius: 10,
----            offset: const Offset(0, 4),
----          ),
----        ],
---+        border: Border.all(color: AppColors.borderGray.withValues(alpha: 0.5)),
---       ),
---       child: Column(
---         crossAxisAlignment: CrossAxisAlignment.start,
---         children: [
----          // Icon container
---+          // Icon
---           Container(
---             width: 48,
---             height: 48,
---@@ -333,16 +472,25 @@ class LandingPage extends StatelessWidget {
---           const SizedBox(height: AppDimensions.spacingL),
--- 
---           // Title
----          Text(feature.title, style: AppTextStyles.title3),
---+          Text(
---+            feature.title,
---+            style: AppTextStyles.title3.copyWith(
---+              color: AppColors.foregroundDark,
---+              fontWeight: FontWeight.w600,
---+            ),
---+          ),
--- 
----          const SizedBox(height: AppDimensions.spacingS),
---+          const SizedBox(height: AppDimensions.spacingM),
--- 
---           // Description
----          Text(
----            feature.description,
----            style: AppTextStyles.body.copyWith(
----              color: AppColors.mediumGray,
----              height: 1.6,
---+          Flexible(
---+            child: Text(
---+              feature.description,
---+              style: AppTextStyles.body.copyWith(
---+                color: AppColors.textSecondary,
---+                height: 1.5,
---+              ),
---+              overflow: TextOverflow.fade,
---             ),
---           ),
---         ],
---@@ -350,163 +498,174 @@ class LandingPage extends StatelessWidget {
---     );
---   }
--- 
----  // Stats Section - Social proof with numbers
---+  // Stats section
---   Widget _buildStatsSection(BuildContext context) {
---     return Container(
---       width: double.infinity,
----      padding: const EdgeInsets.all(AppDimensions.spacingXxl),
----      decoration: const BoxDecoration(color: AppColors.lightGray),
----      child: Wrap(
----        spacing: AppDimensions.spacingXl,
----        runSpacing: AppDimensions.spacingL,
----        alignment: WrapAlignment.spaceEvenly,
----        children: stats.map((stat) => _buildStatItem(stat)).toList(),
---+      padding: const EdgeInsets.symmetric(
---+        horizontal: AppDimensions.spacingL,
---+        vertical: AppDimensions.spacingXxl,
---+      ),
---+      decoration: BoxDecoration(
---+        color: AppColors.backgroundSecondary.withValues(alpha: 0.3),
---+      ),
---+      child: Container(
---+        constraints: const BoxConstraints(
---+          maxWidth: AppDimensions.maxContentWidth,
---+        ),
---+        child: _buildStatsGrid(context),
---       ),
---     );
---   }
--- 
---+  // Stats grid
---+  Widget _buildStatsGrid(BuildContext context) {
---+    return LayoutBuilder(
---+      builder: (context, constraints) {
---+        final isSmallScreen = constraints.maxWidth < AppDimensions.breakpointM;
---+
---+        if (isSmallScreen) {
---+          return Column(
---+            children:
---+                stats
---+                    .map(
---+                      (stat) => Padding(
---+                        padding: const EdgeInsets.only(
---+                          bottom: AppDimensions.spacingL,
---+                        ),
---+                        child: _buildStatItem(stat),
---+                      ),
---+                    )
---+                    .toList(),
---+          );
---+        } else {
---+          return Row(
---+            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
---+            children:
---+                stats
---+                    .map((stat) => Expanded(child: _buildStatItem(stat)))
---+                    .toList(),
---+          );
---+        }
---+      },
---+    );
---+  }
---+
---   // Individual stat item
---   Widget _buildStatItem(StatItem stat) {
---     return Column(
---       children: [
---+        // Icon and value
---         Row(
----          mainAxisSize: MainAxisSize.min,
---+          mainAxisAlignment: MainAxisAlignment.center,
---           children: [
---             Icon(stat.icon, color: AppColors.primaryBlue, size: 32),
----            const SizedBox(width: AppDimensions.spacingS),
---+            const SizedBox(width: AppDimensions.spacingM),
---             Text(
---               stat.value,
----              style: AppTextStyles.largeTitle.copyWith(
----                fontSize: 40,
---+              style: const TextStyle(
---+                fontSize: 36,
---                 fontWeight: FontWeight.bold,
---+                color: AppColors.foregroundDark,
---               ),
---             ),
---           ],
---         ),
--- 
----        const SizedBox(height: AppDimensions.spacingS),
---+        const SizedBox(height: AppDimensions.spacingM),
--- 
---+        // Label
---         Text(
---           stat.label,
----          style: AppTextStyles.body.copyWith(
----            color: AppColors.mediumGray,
----            fontSize: 18,
----          ),
---+          style: AppTextStyles.title3.copyWith(color: AppColors.textSecondary),
---+          textAlign: TextAlign.center,
---         ),
---       ],
---     );
---   }
--- 
----  // Call to Action Section
---+  // CTA section
---   Widget _buildCTASection(BuildContext context) {
---     return Container(
---       width: double.infinity,
----      padding: const EdgeInsets.all(AppDimensions.spacingXxl),
----      child: Container(
----        padding: const EdgeInsets.all(AppDimensions.spacingXxl),
----        decoration: BoxDecoration(
----          gradient: LinearGradient(
----            colors: [
----              AppColors.primaryBlue,
----              AppColors.primaryBlue.withValues(alpha: 0.8),
----            ],
----          ),
----          borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
----          boxShadow: [
----            BoxShadow(
----              color: AppColors.primaryBlue.withValues(alpha: 0.3),
----              blurRadius: 20,
----              offset: const Offset(0, 8),
---+      padding: const EdgeInsets.symmetric(
---+        horizontal: AppDimensions.spacingL,
---+        vertical: AppDimensions.spacingXxl,
---+      ),
---+      child: Center(
---+        child: Container(
---+          constraints: const BoxConstraints(maxWidth: 768),
---+          padding: const EdgeInsets.all(AppDimensions.spacingXxl),
---+          decoration: BoxDecoration(
---+            gradient: const LinearGradient(
---+              colors: [AppColors.primaryBlue, Color(0xFF4A90E2)],
---             ),
----          ],
----        ),
----        child: Column(
----          children: [
----            Text(
----              'Pronto a Trasformare la Tua Pratica?',
----              style: AppTextStyles.title1.copyWith(
----                color: CupertinoColors.white,
----                fontSize: 32,
---+            borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
---+          ),
---+          child: Column(
---+            children: [
---+              // Title
---+              Text(
---+                'Pronto a Trasformare la Tua Pratica?',
---+                style: AppTextStyles.largeTitle.copyWith(
---+                  color: AppColors.white,
---+                  fontWeight: FontWeight.bold,
---+                ),
---+                textAlign: TextAlign.center,
---               ),
----              textAlign: TextAlign.center,
----            ),
--- 
----            const SizedBox(height: AppDimensions.spacingM),
---+              const SizedBox(height: AppDimensions.spacingM),
--- 
----            Text(
----              'Unisciti a centinaia di professionisti veterinari che si fidano di VetAnalytics\nper analisi del sangue accurate e veloci.',
----              style: AppTextStyles.body.copyWith(
----                color: CupertinoColors.white.withValues(alpha: 0.9),
----                fontSize: 18,
----                height: 1.5,
---+              // Description
---+              Text(
---+                'Unisciti a centinaia di professionisti veterinari che si fidano di VetAnalytics '
---+                'per analisi del sangue accurate e veloci.',
---+                style: AppTextStyles.title3.copyWith(
---+                  color: AppColors.white.withValues(alpha: 0.9),
---+                  fontWeight: FontWeight.normal,
---+                  height: 1.5,
---+                ),
---+                textAlign: TextAlign.center,
---               ),
----              textAlign: TextAlign.center,
----            ),
--- 
----            const SizedBox(height: AppDimensions.spacingXl),
----
----            // Custom CTA Button
----            GestureDetector(
----              onTap: () {
----                debugPrint('Get started today');
----              },
----              child: Container(
----                padding: const EdgeInsets.symmetric(
----                  horizontal: AppDimensions.spacingXl,
----                  vertical: AppDimensions.spacingM,
----                ),
----                decoration: BoxDecoration(
----                  color: CupertinoColors.white,
----                  borderRadius: BorderRadius.circular(
----                    AppDimensions.radiusMedium,
----                  ),
----                  boxShadow: [
----                    BoxShadow(
----                      color: CupertinoColors.black.withValues(alpha: 0.1),
----                      blurRadius: 8,
----                      offset: const Offset(0, 2),
----                    ),
----                  ],
----                ),
----                child: Row(
---+              const SizedBox(height: AppDimensions.spacingXl),
---+
---+              // CTA button
---+              Button(
---+                size: ButtonSize.large,
---+                onPressed: () => debugPrint('Inizia Oggi tapped'),
---+                variant: ButtonVariant.secondary,
---+                child: const Row(
---                   mainAxisSize: MainAxisSize.min,
---                   children: [
----                    Text(
----                      'Inizia Oggi',
----                      style: AppTextStyles.body.copyWith(
----                        color: AppColors.primaryBlue,
----                        fontSize: 16,
----                        fontWeight: FontWeight.w600,
----                      ),
----                    ),
----                    const SizedBox(width: AppDimensions.spacingXs),
----                    Icon(
----                      CupertinoIcons.chevron_right,
----                      size: 16,
----                      color: AppColors.primaryBlue,
----                    ),
---+                    Text('Inizia Oggi'),
---+                    SizedBox(width: AppDimensions.spacingS),
---+                    Icon(CupertinoIcons.chevron_right, size: 20),
---                   ],
---                 ),
---               ),
----            ),
----          ],
---+            ],
---+          ),
---         ),
---       ),
---     );
---   }
--- 
----  // Footer Section
---+  // Footer
---   Widget _buildFooter(BuildContext context) {
---     return Container(
---       width: double.infinity,
----      padding: const EdgeInsets.all(AppDimensions.spacingM),
----      decoration: const BoxDecoration(
----        color: AppColors.lightGray,
----        border: Border(top: BorderSide(color: AppColors.borderGray)),
---+      padding: const EdgeInsets.symmetric(
---+        horizontal: AppDimensions.spacingL,
---+        vertical: AppDimensions.spacingM,
---+      ),
---+      decoration: BoxDecoration(
---+        color: AppColors.backgroundSecondary.withValues(alpha: 0.2),
---+        border: const Border(top: BorderSide(color: AppColors.borderGray)),
---       ),
---       child: Column(
---         children: [
----          // Logo and title
---+          // Logo
---           Row(
---             mainAxisAlignment: MainAxisAlignment.center,
---             children: [
---@@ -514,11 +673,8 @@ class LandingPage extends StatelessWidget {
---                 width: 24,
---                 height: 24,
---                 decoration: BoxDecoration(
----                  gradient: LinearGradient(
----                    colors: [
----                      AppColors.primaryBlue,
----                      AppColors.primaryBlue.withValues(alpha: 0.7),
----                    ],
---+                  gradient: const LinearGradient(
---+                    colors: [AppColors.primaryBlue, Color(0xFF4A90E2)],
---                   ),
---                   borderRadius: BorderRadius.circular(
---                     AppDimensions.radiusSmall,
---@@ -528,14 +684,14 @@ class LandingPage extends StatelessWidget {
---                   child: Text(
---                     'V',
---                     style: TextStyle(
----                      color: CupertinoColors.white,
---+                      color: AppColors.white,
---                       fontSize: 12,
---                       fontWeight: FontWeight.bold,
---                     ),
---                   ),
---                 ),
---               ),
----              const SizedBox(width: AppDimensions.spacingXs),
---+              const SizedBox(width: AppDimensions.spacingS),
---               Text(
---                 'VetAnalytics',
---                 style: AppTextStyles.body.copyWith(fontWeight: FontWeight.w600),
---@@ -548,9 +704,8 @@ class LandingPage extends StatelessWidget {
---           // Copyright
---           Text(
---             '© 2024 VetAnalytics. Tutti i diritti riservati.',
----            style: AppTextStyles.bodySmall.copyWith(
----              color: AppColors.mediumGray,
----            ),
---+            style: AppTextStyles.body.copyWith(color: AppColors.textSecondary),
---+            textAlign: TextAlign.center,
---           ),
---         ],
---       ),
---diff --git a/lib/theme/app_dimensions.dart b/lib/theme/app_dimensions.dart
---index 00877e3..df91fff 100644
------ a/lib/theme/app_dimensions.dart
---+++ b/lib/theme/app_dimensions.dart
---@@ -41,16 +41,16 @@ class AppDimensions {
---   /// Large padding (maps to spacingL)
---   static const double paddingLarge = spacingL;
--- 
----  // Border radius values
---+  // Border radius values (updated to match React design system)
--- 
----  /// Small radius - used for subtle rounding (4px)
----  static const double radiusSmall = 4.0;
---+  /// Small radius - used for subtle rounding (8px)
---+  static const double radiusSmall = 8.0;
--- 
----  /// Medium radius - default for most elements (8px)
----  static const double radiusMedium = 8.0;
---+  /// Medium radius - default for most elements (12px) - matches React --radius
---+  static const double radiusMedium = 12.0;
--- 
----  /// Large radius - used for prominent elements (12px)
----  static const double radiusLarge = 12.0;
---+  /// Large radius - used for prominent elements (16px)
---+  static const double radiusLarge = 16.0;
--- 
---   /// Full radius - used for pill shapes (9999px)
---   static const double radiusFull = 9999.0;
---@@ -66,16 +66,36 @@ class AppDimensions {
---   /// Large border radius (maps to radiusLarge)
---   static const double borderRadiusLarge = radiusLarge;
--- 
----  // Element sizing
---+  // Element sizing (updated to match React button system)
--- 
----  /// Small button/input height (32px)
----  static const double buttonHeightSmall = 32.0;
---+  /// Small button height (36px) - matches React 'sm' size (h-9)
---+  static const double buttonHeightSmall = 36.0;
--- 
----  /// Standard button/input height (44px)
----  static const double buttonHeightMedium = 44.0;
---+  /// Standard button height (40px) - matches React 'default' size (h-10)
---+  static const double buttonHeightMedium = 40.0;
--- 
----  /// Large button/input height (56px)
----  static const double buttonHeightLarge = 56.0;
---+  /// Large button height (44px) - matches React 'lg' size (h-11)
---+  static const double buttonHeightLarge = 44.0;
---+
---+  /// Button widths - minimum widths for consistent sizing
---+  /// Small button minimum width (80px)
---+  static const double buttonWidthSmall = 80.0;
---+
---+  /// Medium button minimum width (120px)
---+  static const double buttonWidthMedium = 120.0;
---+
---+  /// Large button minimum width (160px)
---+  static const double buttonWidthLarge = 160.0;
---+
---+  /// Button horizontal padding - matches React system
---+  /// Small button padding (12px) - matches React 'sm' (px-3)
---+  static const double buttonPaddingSmall = 12.0;
---+
---+  /// Medium button padding (16px) - matches React 'default' (px-4)
---+  static const double buttonPaddingMedium = 16.0;
---+
---+  /// Large button padding (32px) - matches React 'lg' (px-8)
---+  static const double buttonPaddingLarge = 32.0;
--- 
---   /// Icon size - extra small (12px) - Added for finer icon control
---   static const double iconSizeXs = 12.0;
--diff --git a/lib/components/dialogs/add_patient_modal.dart b/lib/components/dialogs/add_patient_modal.dart
--index 32a8b0b..293bfd8 100644
----- a/lib/components/dialogs/add_patient_modal.dart
--+++ b/lib/components/dialogs/add_patient_modal.dart
--@@ -2,66 +2,19 @@ import 'package:flutter/cupertino.dart';
-- import '../../theme/app_colors.dart';
-- import '../../theme/app_text_styles.dart';
-- import '../../theme/app_dimensions.dart';
---import '../dialogs/app_generic_dialog.dart';
---import '../forms/app_form.dart';
---import '../forms/app_label.dart';
-- import '../buttons/index.dart';
--+import '../forms/text_input.dart';
-- 
---/// Data model for patient form
---class PatientFormData {
---  final String name;
---  final String owner;
---  final String species;
---  final String breed;
---  final String age;
---  final String weight;
---  final String contactEmail;
---  final String contactPhone;
---
---  const PatientFormData({
---    required this.name,
---    required this.owner,
---    required this.species,
---    required this.breed,
---    required this.age,
---    required this.weight,
---    required this.contactEmail,
---    required this.contactPhone,
---  });
---
---  Map<String, dynamic> toJson() {
---    return {
---      'name': name,
---      'owner': owner,
---      'species': species,
---      'breed': breed,
---      'age': age,
---      'weight': weight,
---      'contactEmail': contactEmail,
---      'contactPhone': contactPhone,
---    };
---  }
---}
---
---/// A modal dialog for adding new patient information
---///
---/// This modal provides a comprehensive form for entering patient details
---/// including personal information, physical characteristics, and contact details.
--+/// Modal for adding a new patient
--+/// Matches the React AddPatientModal structure with Italian localization
-- class AddPatientModal extends StatefulWidget {
---  /// Whether the modal is currently visible
--   final bool isOpen;
---
---  /// Callback when the modal should be closed
---  final ValueChanged<bool> onOpenChanged;
---
---  /// Callback when a new patient is submitted
---  final ValueChanged<PatientFormData>? onPatientAdded;
--+  final VoidCallback onClose;
-- 
--   const AddPatientModal({
--     super.key,
--     required this.isOpen,
---    required this.onOpenChanged,
---    this.onPatientAdded,
--+    required this.onClose,
--   });
-- 
--   @override
--@@ -69,303 +22,252 @@ class AddPatientModal extends StatefulWidget {
-- }
-- 
-- class _AddPatientModalState extends State<AddPatientModal> {
---  late AppFormController _formController;
---  bool _isSubmitting = false;
---
---  @override
---  void initState() {
---    super.initState();
---    _formController = AppFormController();
---    _setupForm();
---  }
--+  final _nameController = TextEditingController();
--+  final _ownerController = TextEditingController();
--+  final _speciesController = TextEditingController();
--+  final _breedController = TextEditingController();
--+  final _ageController = TextEditingController();
--+  final _weightController = TextEditingController();
--+  final _emailController = TextEditingController();
--+  final _phoneController = TextEditingController();
-- 
--   @override
--   void dispose() {
---    _formController.dispose();
--+    _nameController.dispose();
--+    _ownerController.dispose();
--+    _speciesController.dispose();
--+    _breedController.dispose();
--+    _ageController.dispose();
--+    _weightController.dispose();
--+    _emailController.dispose();
--+    _phoneController.dispose();
--     super.dispose();
--   }
-- 
---  void _setupForm() {
---    // Register form fields with validators
---    _formController.registerField<String>(
---      'name',
---      validator: AppFormValidators.required('Patient name is required'),
---    );
---    _formController.registerField<String>(
---      'owner',
---      validator: AppFormValidators.required('Owner name is required'),
---    );
---    _formController.registerField<String>(
---      'species',
---      validator: AppFormValidators.required('Species is required'),
---    );
---    _formController.registerField<String>('breed');
---    _formController.registerField<String>('age');
---    _formController.registerField<String>('weight');
---    _formController.registerField<String>(
---      'contactEmail',
---      validator: AppFormValidators.combine([
---        AppFormValidators.required('Email is required'),
---        AppFormValidators.email(),
---      ]),
---    );
---    _formController.registerField<String>('contactPhone');
--+  void _handleSubmit() {
--+    // Mock submission
--+    debugPrint('New patient data:');
--+    debugPrint('Name: ${_nameController.text}');
--+    debugPrint('Owner: ${_ownerController.text}');
--+    debugPrint('Species: ${_speciesController.text}');
--+    debugPrint('Breed: ${_breedController.text}');
--+    debugPrint('Age: ${_ageController.text}');
--+    debugPrint('Weight: ${_weightController.text}');
--+    debugPrint('Email: ${_emailController.text}');
--+    debugPrint('Phone: ${_phoneController.text}');
--+
--+    // Clear form and close modal
--+    _clearForm();
--+    widget.onClose();
--   }
-- 
---  void _onSubmit() async {
---    if (_isSubmitting) return;
---
---    if (!_formController.validateAll()) {
---      return;
---    }
---
---    setState(() {
---      _isSubmitting = true;
---    });
---
---    try {
---      final data = _formController.getData();
---      final patientData = PatientFormData(
---        name: data['name'] ?? '',
---        owner: data['owner'] ?? '',
---        species: data['species'] ?? '',
---        breed: data['breed'] ?? '',
---        age: data['age'] ?? '',
---        weight: data['weight'] ?? '',
---        contactEmail: data['contactEmail'] ?? '',
---        contactPhone: data['contactPhone'] ?? '',
---      );
---
---      // Simulate API call delay
---      await Future.delayed(const Duration(milliseconds: 500));
---
---      widget.onPatientAdded?.call(patientData);
---      _formController.reset();
---      widget.onOpenChanged(false);
---    } catch (e) {
---      // Handle error - in a real app you'd show a toast or snackbar
---      debugPrint('Error adding patient: $e');
---    } finally {
---      if (mounted) {
---        setState(() {
---          _isSubmitting = false;
---        });
---      }
---    }
---  }
---
---  void _onCancel() {
---    _formController.reset();
---    widget.onOpenChanged(false);
--+  void _clearForm() {
--+    _nameController.clear();
--+    _ownerController.clear();
--+    _speciesController.clear();
--+    _breedController.clear();
--+    _ageController.clear();
--+    _weightController.clear();
--+    _emailController.clear();
--+    _phoneController.clear();
--   }
-- 
--   @override
--   Widget build(BuildContext context) {
---    if (!widget.isOpen) {
---      return const SizedBox.shrink();
---    }
---
---    return AppGenericDialog(
---      title: Row(
---        children: [
---          Icon(CupertinoIcons.add, size: 20, color: AppColors.primaryBlue),
---          const SizedBox(width: AppDimensions.spacingXs),
---          Text('Add New Patient', style: AppTextStyles.title3),
---        ],
---      ),
---      content: SizedBox(
---        width: 500,
---        child: AppForm(
---          controller: _formController,
---          child: Column(
---            mainAxisSize: MainAxisSize.min,
---            crossAxisAlignment: CrossAxisAlignment.start,
---            children: [
---              // Patient and Owner Info
---              Row(
---                children: [
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'name',
---                      label: 'Patient Name',
---                      placeholder: 'Buddy',
---                    ),
---                  ),
---                  const SizedBox(width: AppDimensions.spacingM),
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'owner',
---                      label: 'Owner Name',
---                      placeholder: 'John Smith',
---                    ),
--+    if (!widget.isOpen) return const SizedBox.shrink();
--+
--+    return GestureDetector(
--+      onTap: widget.onClose,
--+      child: Container(
--+        color: AppColors.foregroundDark.withValues(alpha: 0.5),
--+        child: Center(
--+          child: GestureDetector(
--+            onTap: () {}, // Prevent closing when tapping on modal content
--+            child: Container(
--+              width: MediaQuery.of(context).size.width * 0.9,
--+              constraints: const BoxConstraints(maxWidth: 500),
--+              margin: const EdgeInsets.all(AppDimensions.spacingL),
--+              padding: const EdgeInsets.all(AppDimensions.spacingXl),
--+              decoration: BoxDecoration(
--+                color: AppColors.backgroundWhite,
--+                borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
--+                boxShadow: [
--+                  BoxShadow(
--+                    color: AppColors.foregroundDark.withValues(alpha: 0.2),
--+                    blurRadius: 20,
--+                    offset: const Offset(0, 10),
--                   ),
--                 ],
--               ),
---
---              const SizedBox(height: AppDimensions.spacingM),
---
---              // Species and Breed
---              Row(
---                children: [
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'species',
---                      label: 'Species',
---                      placeholder: 'Dog',
---                    ),
---                  ),
---                  const SizedBox(width: AppDimensions.spacingM),
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'breed',
---                      label: 'Breed',
---                      placeholder: 'Golden Retriever',
--+              child: SingleChildScrollView(
--+                child: Column(
--+                  mainAxisSize: MainAxisSize.min,
--+                  crossAxisAlignment: CrossAxisAlignment.stretch,
--+                  children: [
--+                    // Header
--+                    Row(
--+                      children: [
--+                        const Icon(
--+                          CupertinoIcons.plus,
--+                          color: AppColors.primaryBlue,
--+                          size: 20,
--+                        ),
--+                        const SizedBox(width: AppDimensions.spacingS),
--+                        Text(
--+                          'Aggiungi Nuovo Paziente',
--+                          style: AppTextStyles.title3.copyWith(
--+                            fontWeight: FontWeight.w600,
--+                          ),
--+                        ),
--+                        const Spacer(),
--+                        CupertinoButton(
--+                          padding: EdgeInsets.zero,
--+                          minSize: 0,
--+                          onPressed: widget.onClose,
--+                          child: const Icon(
--+                            CupertinoIcons.xmark,
--+                            color: AppColors.mediumGray,
--+                            size: 20,
--+                          ),
--+                        ),
--+                      ],
--                     ),
---                  ),
---                ],
---              ),
---
---              const SizedBox(height: AppDimensions.spacingM),
-- 
---              // Age and Weight
---              Row(
---                children: [
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'age',
---                      label: 'Age',
---                      placeholder: '5 years',
--+                    const SizedBox(height: AppDimensions.spacingXl),
--+
--+                    // Form
--+                    _buildForm(),
--+
--+                    const SizedBox(height: AppDimensions.spacingXl),
--+
--+                    // Action Buttons
--+                    Row(
--+                      children: [
--+                        Expanded(
--+                          child: GhostButton(
--+                            size: ButtonSize.large,
--+                            onPressed: widget.onClose,
--+                            child: const Text('Annulla'),
--+                          ),
--+                        ),
--+                        const SizedBox(width: AppDimensions.spacingM),
--+                        Expanded(
--+                          child: PrimaryButton(
--+                            size: ButtonSize.large,
--+                            onPressed: _handleSubmit,
--+                            child: const Text('Aggiungi Paziente'),
--+                          ),
--+                        ),
--+                      ],
--                     ),
---                  ),
---                  const SizedBox(width: AppDimensions.spacingM),
---                  Expanded(
---                    child: _buildFormField(
---                      name: 'weight',
---                      label: 'Weight',
---                      placeholder: '25 kg',
---                    ),
---                  ),
---                ],
---              ),
---
---              const SizedBox(height: AppDimensions.spacingM),
---
---              // Contact Information
---              _buildFormField(
---                name: 'contactEmail',
---                label: 'Contact Email',
---                placeholder: 'owner@email.com',
---                keyboardType: TextInputType.emailAddress,
---              ),
---
---              const SizedBox(height: AppDimensions.spacingM),
---
---              _buildFormField(
---                name: 'contactPhone',
---                label: 'Contact Phone',
---                placeholder: '+1 (555) 123-4567',
---                keyboardType: TextInputType.phone,
--+                  ],
--+                ),
--               ),
---            ],
--+            ),
--           ),
--         ),
--       ),
---      actions: [
---        OutlineButton(
---          onPressed: _isSubmitting ? null : _onCancel,
---          child: const Text('Cancel'),
---        ),
---        const SizedBox(width: AppDimensions.spacingS),
---        PrimaryButton(
---          onPressed: _isSubmitting ? null : _onSubmit,
---          isLoading: _isSubmitting,
---          child: const Text('Add Patient'),
---        ),
---      ],
--     );
--   }
-- 
---  Widget _buildFormField({
---    required String name,
---    required String label,
---    required String placeholder,
---    TextInputType? keyboardType,
---  }) {
---    return AppFormField<String>(
---      name: name,
---      builder: (context, value, error, onChanged) {
---        return Column(
---          crossAxisAlignment: CrossAxisAlignment.start,
--+  Widget _buildForm() {
--+    return Column(
--+      children: [
--+        // Name and Owner
--+        Row(
--           children: [
---            AppLabel(
---              text: label,
---              required:
---                  name == 'name' ||
---                  name == 'owner' ||
---                  name == 'species' ||
---                  name == 'contactEmail',
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _nameController,
--+                label: 'Nome Paziente',
--+                placeholder: 'Buddy',
--+                textInputAction: TextInputAction.next,
--+              ),
--             ),
---            const SizedBox(height: AppDimensions.spacingXs),
---            CupertinoTextField(
---              controller: TextEditingController(text: value ?? ''),
---              placeholder: placeholder,
---              onChanged: onChanged,
---              keyboardType: keyboardType,
---              decoration: BoxDecoration(
---                color: AppColors.backgroundSecondary,
---                borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
---                border:
---                    error != null
---                        ? Border.all(color: AppColors.primaryBlue, width: 1)
---                        : null,
--+            const SizedBox(width: AppDimensions.spacingM),
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _ownerController,
--+                label: 'Nome Proprietario',
--+                placeholder: 'Mario Rossi',
--+                textInputAction: TextInputAction.next,
--               ),
---              padding: const EdgeInsets.all(AppDimensions.paddingMedium),
---              style: AppTextStyles.body,
--             ),
---            if (error != null) ...[
---              const SizedBox(height: AppDimensions.spacingXs),
---              Text(
---                error,
---                style: AppTextStyles.footnote.copyWith(
---                  color: AppColors.primaryBlue,
---                ),
--+          ],
--+        ),
--+
--+        const SizedBox(height: AppDimensions.spacingL),
--+
--+        // Species and Breed
--+        Row(
--+          children: [
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _speciesController,
--+                label: 'Specie',
--+                placeholder: 'Cane',
--+                textInputAction: TextInputAction.next,
--               ),
---            ],
--+            ),
--+            const SizedBox(width: AppDimensions.spacingM),
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _breedController,
--+                label: 'Razza',
--+                placeholder: 'Golden Retriever',
--+                textInputAction: TextInputAction.next,
--+              ),
--+            ),
--           ],
---        );
---      },
---    );
---  }
---}
--+        ),
--+
--+        const SizedBox(height: AppDimensions.spacingL),
--+
--+        // Age and Weight
--+        Row(
--+          children: [
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _ageController,
--+                label: 'Età',
--+                placeholder: '5 anni',
--+                textInputAction: TextInputAction.next,
--+              ),
--+            ),
--+            const SizedBox(width: AppDimensions.spacingM),
--+            Expanded(
--+              child: AppTextInput(
--+                controller: _weightController,
--+                label: 'Peso',
--+                placeholder: '25 kg',
--+                textInputAction: TextInputAction.next,
--+              ),
--+            ),
--+          ],
--+        ),
--+
--+        const SizedBox(height: AppDimensions.spacingL),
--+
--+        // Contact Email
--+        AppTextInput(
--+          controller: _emailController,
--+          label: 'Email di Contatto',
--+          placeholder: 'proprietario@email.com',
--+          keyboardType: TextInputType.emailAddress,
--+          textInputAction: TextInputAction.next,
--+        ),
-- 
---/// Helper function to show the AddPatientModal
---Future<PatientFormData?> showAddPatientModal({
---  required BuildContext context,
---  ValueChanged<PatientFormData>? onPatientAdded,
---}) {
---  return showCupertinoDialog<PatientFormData>(
---    context: context,
---    barrierDismissible: true,
---    builder: (context) {
---      return StatefulBuilder(
---        builder: (context, setState) {
---          bool isOpen = true;
--+        const SizedBox(height: AppDimensions.spacingL),
-- 
---          return AddPatientModal(
---            isOpen: isOpen,
---            onOpenChanged: (open) {
---              if (!open) {
---                setState(() => isOpen = false);
---                Navigator.of(context).pop();
---              }
---            },
---            onPatientAdded: (data) {
---              onPatientAdded?.call(data);
---              Navigator.of(context).pop(data);
---            },
---          );
---        },
---      );
---    },
---  );
--+        // Contact Phone
--+        AppTextInput(
--+          controller: _phoneController,
--+          label: 'Telefono di Contatto',
--+          placeholder: '+39 123 456 7890',
--+          keyboardType: TextInputType.phone,
--+          textInputAction: TextInputAction.done,
--+        ),
--+      ],
--+    );
--+  }
-- }
--diff --git a/lib/components/navigation/app_header.dart b/lib/components/navigation/app_header.dart
--index 310a29c..8a55563 100644
----- a/lib/components/navigation/app_header.dart
--+++ b/lib/components/navigation/app_header.dart
--@@ -2,7 +2,6 @@ import 'package:flutter/cupertino.dart';
-- import '../../theme/app_colors.dart';
-- import '../../theme/app_text_styles.dart';
-- import '../../theme/app_dimensions.dart';
---import '../../theme/app_gradients.dart';
-- import '../buttons/index.dart';
-- 
-- /// A header component for the application
--@@ -52,50 +51,36 @@ class AppHeader extends StatelessWidget implements PreferredSizeWidget {
--     final shouldShowBackButton = showBackButton ?? canPop;
-- 
--     return Container(
--+      padding: const EdgeInsets.symmetric(
--+        horizontal: AppDimensions.spacingL,
--+        vertical: AppDimensions.spacingS,
--+      ),
--       decoration: BoxDecoration(
--         color:
--             backgroundColor ??
--             AppColors.backgroundWhite.withValues(alpha: 0.95),
---        border: Border(bottom: BorderSide(color: AppColors.border, width: 1)),
---        boxShadow: [
---          BoxShadow(
---            color: CupertinoColors.black.withValues(alpha: 0.05),
---            blurRadius: 8,
---            offset: const Offset(0, 2),
---          ),
---        ],
--+        border: const Border(
--+          bottom: BorderSide(color: AppColors.borderGray, width: 0.5),
--+        ),
--       ),
--       child: SafeArea(
--         bottom: false,
---        child: Padding(
---          padding: const EdgeInsets.symmetric(
---            horizontal: AppDimensions.paddingLarge,
---            vertical: AppDimensions.paddingMedium,
---          ),
---          child: Row(
---            children: [
---              // Leading section (back button or logo)
---              if (shouldShowBackButton)
---                _buildBackButton(context)
---              else
---                _buildLogo(context),
---
---              // Spacer
---              const Spacer(),
---
---              // Custom title or default title
---              if (title != null)
---                title!
---              else if (!shouldShowBackButton)
---                _buildTitle(context),
---
---              // Spacer
---              const Spacer(),
---
---              // Actions section
---              _buildActions(context),
---            ],
---          ),
--+        child: Row(
--+          mainAxisAlignment: MainAxisAlignment.spaceBetween,
--+          children: [
--+            // Leading section (back button or logo)
--+            if (shouldShowBackButton)
--+              _buildBackButton(context)
--+            else
--+              _buildLogo(context),
--+
--+            // Custom title or default title (only show if there's a back button)
--+            if (title != null && shouldShowBackButton)
--+              Expanded(child: Center(child: title!)),
--+
--+            // Actions section
--+            _buildActions(context),
--+          ],
--         ),
--       ),
--     );
--@@ -116,16 +101,18 @@ class AppHeader extends StatelessWidget implements PreferredSizeWidget {
--           width: 32,
--           height: 32,
--           decoration: BoxDecoration(
---            gradient: AppGradients.primary,
---            borderRadius: BorderRadius.circular(8),
--+            gradient: const LinearGradient(
--+              colors: [AppColors.primaryBlue, Color(0xFF4A90E2)],
--+            ),
--+            borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
--           ),
--           child: const Center(
--             child: Text(
--               'V',
--               style: TextStyle(
---                color: CupertinoColors.white,
--+                color: AppColors.white,
--+                fontSize: 16,
--                 fontWeight: FontWeight.bold,
---                fontSize: 14,
--               ),
--             ),
--           ),
--@@ -133,59 +120,39 @@ class AppHeader extends StatelessWidget implements PreferredSizeWidget {
--         const SizedBox(width: AppDimensions.spacingS),
--         Text(
--           'VetAnalytics',
---          style: AppTextStyles.body.copyWith(
---            fontWeight: FontWeight.w600,
---            fontSize: 18,
---          ),
--+          style: AppTextStyles.title3.copyWith(fontWeight: FontWeight.w600),
--         ),
--       ],
--     );
--   }
-- 
---  Widget _buildTitle(BuildContext context) {
---    return Text(
---      'VetAnalytics',
---      style: AppTextStyles.body.copyWith(
---        fontWeight: FontWeight.w600,
---        fontSize: 18,
---      ),
---    );
---  }
---
--   Widget _buildActions(BuildContext context) {
--     final defaultActions = <Widget>[];
-- 
--     if (showAuth) {
--       defaultActions.addAll([
--         GhostButton(
--+          size: ButtonSize.small,
--           onPressed: onProfileTap,
---          child: Row(
--+          child: const Row(
--             mainAxisSize: MainAxisSize.min,
--             children: [
---              const Icon(CupertinoIcons.person, size: 16),
---              const SizedBox(width: AppDimensions.spacingXs),
---              Text('Profile', style: AppTextStyles.bodySmall),
--+              Icon(CupertinoIcons.person, size: 16),
--+              SizedBox(width: AppDimensions.spacingXs),
--+              Text('Profilo'),
--             ],
--           ),
--         ),
--         const SizedBox(width: AppDimensions.spacingS),
--         GhostButton(
--+          size: ButtonSize.small,
--           onPressed: onLogoutTap,
---          child: Row(
--+          child: const Row(
--             mainAxisSize: MainAxisSize.min,
--             children: [
---              Icon(
---                CupertinoIcons.square_arrow_right,
---                size: 16,
---                color: AppColors.primaryBlue,
---              ),
---              const SizedBox(width: AppDimensions.spacingXs),
---              Text(
---                'Logout',
---                style: AppTextStyles.bodySmall.copyWith(
---                  color: AppColors.primaryBlue,
---                ),
---              ),
--+              Icon(CupertinoIcons.arrow_right_square, size: 16),
--+              SizedBox(width: AppDimensions.spacingXs),
--+              Text('Esci'),
--             ],
--           ),
--         ),
--diff --git a/lib/navigation/app_router.dart b/lib/navigation/app_router.dart
--index 973fc4a..60fdec6 100644
----- a/lib/navigation/app_router.dart
--+++ b/lib/navigation/app_router.dart
--@@ -2,6 +2,7 @@ import 'package:flutter/cupertino.dart';
-- import 'package:go_router/go_router.dart';
-- import '../pages/landing_page.dart';
-- import '../pages/login_page.dart';
--+import '../pages/dashboard_page.dart';
-- 
-- /// Application router configuration using go_router
-- ///
--@@ -34,15 +35,11 @@ class AppRouter {
--           builder: (context, state) => const LoginPage(),
--         ),
-- 
---        // Dashboard Page (to be implemented)
--+        // Dashboard Page
--         GoRoute(
--           path: dashboard,
--           name: 'dashboard',
---          builder:
---              (context, state) => const _ComingSoonPage(
---                title: 'Dashboard',
---                description: 'Patient management dashboard coming soon...',
---              ),
--+          builder: (context, state) => const DashboardPage(),
--         ),
-- 
--         // Upload Page (to be implemented)
--diff --git a/lib/theme/app_colors.dart b/lib/theme/app_colors.dart
--index 51d8259..3f3f436 100644
----- a/lib/theme/app_colors.dart
--+++ b/lib/theme/app_colors.dart
--@@ -68,6 +68,9 @@ class AppColors {
--   /// Red color for error states, delete actions, and critical alerts
--   static const Color destructiveRed = Color(0xFFFF3B30);
-- 
--+  /// Alias for error red color
--+  static const Color errorRed = destructiveRed;
--+
--   // Gradient colors
-- 
--   /// Starting color for primary gradient (matches primaryBlue)
--diff --git a/lib/theme/app_text_styles.dart b/lib/theme/app_text_styles.dart
--index c076343..2497ff7 100644
----- a/lib/theme/app_text_styles.dart
--+++ b/lib/theme/app_text_styles.dart
--@@ -48,6 +48,22 @@ class AppTextStyles {
--     height: 1.4,
--   );
-- 
--+  /// Page title style - alias for title1
--+  static const TextStyle pageTitle = title1;
--+
--+  /// Card title style - alias for title3
--+  static const TextStyle title = title3;
--+
--+  /// Subtitle style for secondary headings
--+  static const TextStyle subtitle = TextStyle(
--+    fontFamily: 'SF Pro Display',
--+    fontSize: 18.0,
--+    fontWeight: FontWeight.w500,
--+    letterSpacing: -0.24,
--+    color: AppColors.foregroundDark,
--+    height: 1.4,
--+  );
--+
--   // Body text styles
-- 
--   /// Primary body text style used for most content
-diff --git a/lib/core/api/api_service.dart b/lib/core/api/api_service.dart
-index 95618aa..d041987 100644
---- a/lib/core/api/api_service.dart
-+++ b/lib/core/api/api_service.dart
-@@ -4,6 +4,7 @@ import 'package:logger/logger.dart';
- import '../interceptors/auth_interceptor.dart';
- import '../providers/auth_provider.dart';
- import '../services/storage_service.dart';
-+import '../models/auth_models.dart';
- 
- /// Production-grade API service with automatic authentication
- ///
-@@ -19,11 +20,12 @@ class ApiService {
- 
-   late final Dio _dio;
-   final Logger _logger = Logger();
-+  final StorageService _storageService;
- 
-   ApiService({
-     required StorageService storageService,
-     required AuthProvider authProvider,
--  }) {
-+  }) : _storageService = storageService {
-     _dio = Dio(
-       BaseOptions(
-         baseUrl: _baseUrl,
-@@ -123,4 +125,196 @@ class ApiService {
-       rethrow;
-     }
-   }
-+
-+  // -------------------------
-+  // AUTH ENDPOINTS (high-level)
-+  // -------------------------
-+
-+  Future<LoginResponse?> login({
-+    required String username,
-+    required String password,
-+  }) async {
-+    try {
-+      final response = await post(
-+        '/api/v1/auth/login',
-+        data: LoginRequest(username: username, password: password).toJson(),
-+      );
-+
-+      if (response.statusCode == 200) {
-+        final loginResp = LoginResponse.fromJson(response.data);
-+
-+        // Persist tokens & user data
-+        await _storageService.saveAuthData(
-+          accessToken: loginResp.accessToken,
-+          refreshToken: loginResp.refreshToken,
-+          user: loginResp.user,
-+          expiresIn: loginResp.expiresIn,
-+        );
-+
-+        // Set auth header for subsequent requests
-+        _dio.options.headers['Authorization'] =
-+            'Bearer ${loginResp.accessToken}';
-+
-+        return loginResp;
-+      }
-+      _logger.w('Login failed: ${response.statusCode}');
-+      return null;
-+    } on DioException catch (e) {
-+      _logger.e('Login error: ${e.message}');
-+      return null;
-+    }
-+  }
-+
-+  Future<bool> logout() async {
-+    try {
-+      final refresh = await _storageService.getRefreshToken();
-+      if (refresh != null) {
-+        await post('/api/v1/auth/logout', data: {'refresh_token': refresh});
-+      }
-+
-+      await _storageService.clearAuthData();
-+      _dio.options.headers.remove('Authorization');
-+      return true;
-+    } catch (e) {
-+      _logger.e('Logout error: $e');
-+      return false;
-+    }
-+  }
-+
-+  Future<bool> refreshToken() async {
-+    try {
-+      final refresh = await _storageService.getRefreshToken();
-+      if (refresh == null) return false;
-+
-+      final response = await post(
-+        '/api/v1/auth/refresh',
-+        data: {'refresh_token': refresh},
-+      );
-+
-+      if (response.statusCode == 200) {
-+        final refreshResp = RefreshTokenResponse.fromJson(response.data);
-+        await _storageService.updateAccessToken(
-+          accessToken: refreshResp.accessToken,
-+          expiresIn: refreshResp.expiresIn,
-+        );
-+        _dio.options.headers['Authorization'] =
-+            'Bearer ${refreshResp.accessToken}';
-+        return true;
-+      }
-+      _logger.w('Token refresh failed: ${response.statusCode}');
-+      return false;
-+    } on DioException catch (e) {
-+      _logger.e('Token refresh dio error: ${e.message}');
-+      return false;
-+    } catch (e) {
-+      _logger.e('Token refresh error: $e');
-+      return false;
-+    }
-+  }
-+
-+  Future<bool> isAuthenticated() async {
-+    final loggedIn = await _storageService.isLoggedIn();
-+    if (!loggedIn) return false;
-+
-+    final expired = await _storageService.isTokenExpired();
-+    if (expired) {
-+      _logger.d('Access token expired, attempting refresh');
-+      return await refreshToken();
-+    }
-+
-+    final access = await _storageService.getAccessToken();
-+    if (access != null) {
-+      _dio.options.headers['Authorization'] = 'Bearer $access';
-+    }
-+    return true;
-+  }
-+
-+  Future<UserModel?> getCurrentUser() async {
-+    return _storageService.getUserData();
-+  }
-+
-+  Future<bool> initializeAuth() async {
-+    return isAuthenticated();
-+  }
-+
-+  Future<RegistrationResponse?> register({
-+    required String username,
-+    required String email,
-+    required String password,
-+    required UserRole role,
-+    required UserProfile profile,
-+  }) async {
-+    try {
-+      final response = await post(
-+        '/api/v1/auth/register',
-+        data:
-+            RegistrationRequest(
-+              username: username,
-+              email: email,
-+              password: password,
-+              role: role,
-+              profile: profile.toJson(),
-+            ).toJson(),
-+      );
-+
-+      if (response.statusCode == 201) {
-+        return RegistrationResponse.fromJson(response.data);
-+      }
-+      _logger.w('Register failed: ${response.statusCode}');
-+      return null;
-+    } on DioException catch (e) {
-+      _logger.e('Register dio error: ${e.message}');
-+      return null;
-+    }
-+  }
-+
-+  Future<bool> updateProfile({
-+    required String userId,
-+    required Map<String, dynamic> profileData,
-+  }) async {
-+    try {
-+      final response = await put('/api/v1/auth/profile', data: profileData);
-+      if (response.statusCode == 200) {
-+        // Update locally
-+        final current = await _storageService.getUserData();
-+        if (current != null) {
-+          final updatedProfile = {...current.profile, ...profileData};
-+          final updatedUser = UserModel(
-+            id: current.id,
-+            username: current.username,
-+            email: current.email,
-+            role: current.role,
-+            profile: updatedProfile,
-+          );
-+          await _storageService.saveUserData(updatedUser);
-+        }
-+        return true;
-+      }
-+      return false;
-+    } catch (e) {
-+      _logger.e('Update profile error: $e');
-+      return false;
-+    }
-+  }
-+
-+  Future<bool> updatePassword({
-+    required String currentPassword,
-+    required String newPassword,
-+    required String confirmPassword,
-+  }) async {
-+    try {
-+      final response = await put(
-+        '/api/v1/auth/password',
-+        data: {
-+          'current_password': currentPassword,
-+          'new_password': newPassword,
-+          'confirm_password': confirmPassword,
-+        },
-+      );
-+      return response.statusCode == 200;
-+    } catch (e) {
-+      _logger.e('Update password error: $e');
-+      return false;
-+    }
-+  }
- }
-diff --git a/lib/core/providers/auth_provider.dart b/lib/core/providers/auth_provider.dart
-index 767798e..5b6abc5 100644
---- a/lib/core/providers/auth_provider.dart
-+++ b/lib/core/providers/auth_provider.dart
-@@ -1,16 +1,15 @@
- import 'package:flutter/foundation.dart';
- import 'package:logger/logger.dart';
--import '../repositories/auth_repository.dart';
-+import '../api/api_service.dart';
- import '../models/auth_models.dart';
- 
- enum AuthStatus { initial, loading, authenticated, unauthenticated, error }
- 
- class AuthProvider extends ChangeNotifier {
--  final AuthRepository _authRepository;
-+  ApiService? _apiService;
-   final Logger _logger = Logger();
- 
--  AuthProvider({AuthRepository? authRepository})
--    : _authRepository = authRepository ?? AuthRepository();
-+  AuthProvider();
- 
-   // Private state variables
-   AuthStatus _status = AuthStatus.initial;
-@@ -24,16 +23,24 @@ class AuthProvider extends ChangeNotifier {
-   bool get isAuthenticated => _status == AuthStatus.authenticated;
-   bool get isLoading => _status == AuthStatus.loading;
- 
-+  // Inject ApiService after ServiceLocator creates it to break circular dependency
-+  void setApiService(ApiService apiService) {
-+    _apiService = apiService;
-+  }
-+
-   // Initialize authentication (call on app start)
-   Future<void> initialize() async {
-     try {
-       _logger.d('Initializing authentication provider');
-       _setStatus(AuthStatus.loading);
- 
--      final isAuth = await _authRepository.initializeAuth();
-+      if (_apiService == null) {
-+        throw StateError('ApiService not set in AuthProvider');
-+      }
-+      final isAuth = await _apiService!.initializeAuth();
- 
-       if (isAuth) {
--        final user = await _authRepository.getCurrentUser();
-+        final user = await _apiService!.getCurrentUser();
-         _currentUser = user;
-         _setStatus(AuthStatus.authenticated);
-         _logger.d('User is authenticated: ${user?.username}');
-@@ -59,7 +66,7 @@ class AuthProvider extends ChangeNotifier {
-       _setStatus(AuthStatus.loading);
-       _clearError();
- 
--      final loginResponse = await _authRepository.login(
-+      final loginResponse = await _apiService!.login(
-         username: username,
-         password: password,
-       );
-@@ -94,7 +101,7 @@ class AuthProvider extends ChangeNotifier {
-       // STEP 1: Set loading state
-       _setStatus(AuthStatus.loading);
- 
--      final success = await _authRepository.logout();
-+      final success = await _apiService!.logout();
- 
-       if (success) {
-         // STEP 2: Logout successful - clear state and set unauthenticated
-@@ -123,7 +130,7 @@ class AuthProvider extends ChangeNotifier {
-     try {
-       _logger.d('Refreshing token');
- 
--      final success = await _authRepository.refreshToken();
-+      final success = await _apiService!.refreshToken();
- 
-       if (!success) {
-         _logger.w('Token refresh failed, logging out');
-@@ -142,10 +149,10 @@ class AuthProvider extends ChangeNotifier {
-   // Check authentication status
-   Future<bool> checkAuthStatus() async {
-     try {
--      final isAuth = await _authRepository.isAuthenticated();
-+      final isAuth = await _apiService!.isAuthenticated();
- 
-       if (isAuth && _status != AuthStatus.authenticated) {
--        final user = await _authRepository.getCurrentUser();
-+        final user = await _apiService!.getCurrentUser();
-         _currentUser = user;
-         _setStatus(AuthStatus.authenticated);
-       } else if (!isAuth && _status == AuthStatus.authenticated) {
-@@ -192,7 +199,7 @@ class AuthProvider extends ChangeNotifier {
-       _setStatus(AuthStatus.loading);
-       _clearError();
- 
--      final response = await _authRepository.register(
-+      final response = await _apiService!.register(
-         username: username,
-         email: email,
-         password: password,
-@@ -259,14 +266,14 @@ class AuthProvider extends ChangeNotifier {
-         return false;
-       }
- 
--      final success = await _authRepository.updateProfile(
-+      final success = await _apiService!.updateProfile(
-         userId: _currentUser!.id,
-         profileData: profileData,
-       );
- 
-       if (success) {
-         // Refresh current user data
--        final user = await _authRepository.getCurrentUser();
-+        final user = await _apiService!.getCurrentUser();
-         _currentUser = user;
-         notifyListeners();
-         return true;
-@@ -286,7 +293,7 @@ class AuthProvider extends ChangeNotifier {
-     required String confirmPassword,
-   }) async {
-     try {
--      final success = await _authRepository.updatePassword(
-+      final success = await _apiService!.updatePassword(
-         currentPassword: currentPassword,
-         newPassword: newPassword,
-         confirmPassword: confirmPassword,
-diff --git a/lib/core/services/service_locator.dart b/lib/core/services/service_locator.dart
-index f7617cc..befaa89 100644
---- a/lib/core/services/service_locator.dart
-+++ b/lib/core/services/service_locator.dart
-@@ -1,7 +1,6 @@
- import '../api/api_service.dart';
- import '../providers/auth_provider.dart';
- import '../repositories/analysis_repository.dart';
--import '../repositories/auth_repository.dart';
- import '../repositories/patient_repository.dart';
- import '../services/storage_service.dart';
- 
-@@ -19,7 +18,6 @@ class ServiceLocator {
-   ApiService? _apiService;
- 
-   // Repositories
--  AuthRepository? _authRepository;
-   AnalysisRepository? _analysisRepository;
-   PatientRepository? _patientRepository;
- 
-@@ -31,14 +29,8 @@ class ServiceLocator {
-     // Initialize storage service first
-     _storageService = StorageService();
- 
--    // Create auth repository (will create its own simple ApiService initially)
--    _authRepository = AuthRepository();
--
--    // Create auth provider
--    _authProvider = AuthProvider(authRepository: _authRepository);
--
--    // Initialize auth provider
--    await _authProvider!.initialize();
-+    // Create auth provider (no repository needed)
-+    _authProvider = AuthProvider();
- 
-     // Now create the full ApiService with interceptors
-     _apiService = ApiService(
-@@ -46,6 +38,12 @@ class ServiceLocator {
-       authProvider: _authProvider!,
-     );
- 
-+    // Inject ApiService into AuthProvider to break circular dependency
-+    _authProvider!.setApiService(_apiService!);
-+
-+    // Initialize auth provider (now that ApiService is ready)
-+    await _authProvider!.initialize();
-+
-     // Update repositories to use the full ApiService
-     _analysisRepository = AnalysisRepository(apiService: _apiService!);
-     _patientRepository = PatientRepository(apiService: _apiService!);
-@@ -54,7 +52,6 @@ class ServiceLocator {
-   // Getters
-   StorageService get storageService => _storageService!;
-   ApiService get apiService => _apiService!;
--  AuthRepository get authRepository => _authRepository!;
-   AnalysisRepository get analysisRepository => _analysisRepository!;
-   PatientRepository get patientRepository => _patientRepository!;
-   AuthProvider get authProvider => _authProvider!;
diff --git a/lib/components/buttons/README.md b/lib/components/buttons/README.md
deleted file mode 100644
index 3a99961..0000000
--- a/lib/components/buttons/README.md
+++ /dev/null
@@ -1,228 +0,0 @@
-# Button Component System
-
-This directory contains a complete button system with clean naming conventions and best practices.
-
-## 🏗️ **Architecture Overview**
-
-The button system follows a **variant-based approach** similar to the
-
-### **Core Components:**
-
-- `button.dart` - Main Button component with all variants
-- `button_variants.dart` - Convenience constructors for common variants
-- `index.dart` - Clean export API
-
-### **Legacy Components (Deprecated):**
-
-- `app_button.dart` - Old base class (deprecated)
-- `primary_button.dart` - Old primary button (deprecated)
-- `secondary_button.dart` - Old secondary button (deprecated)
-- `ghost_button.dart` - Old ghost button (deprecated)
-- Other old components...
-
-## 🎨 **Button Variants**
-
-### **Available Variants:**
-
-```dart
-enum ButtonVariant {
-  primary,      // Filled primary color
-  secondary,    // Light gray background
-  destructive,  // Red background for dangerous actions
-  outline,      // Transparent with border
-  ghost,        // Transparent background
-  link,         // Text with underline
-}
-```
-
-### **Available Sizes:**
-
-```dart
-enum ButtonSize {
-  small,        // 36px height
-  medium,       // 44px height (default)
-  large,        // 52px height
-  icon,         // Square button for icons
-}
-```
-
-## 📝 **Usage Examples**
-
-### **Main Button Component:**
-
-```dart
-import '../components/buttons/index.dart';
-
-// Using main Button component
-Button(
-  variant: ButtonVariant.primary,
-  size: ButtonSize.large,
-  onPressed: () => print('Pressed'),
-  child: Text('Click me'),
-)
-```
-
-### **Convenience Constructors:**
-
-```dart
-// These are easier to use and cleaner
-PrimaryButton(
-  onPressed: () => print('Primary'),
-  child: Text('Primary Action'),
-)
-
-SecondaryButton(
-  size: ButtonSize.small,
-  onPressed: () => print('Secondary'),
-  child: Text('Secondary Action'),
-)
-
-DestructiveButton(
-  onPressed: () => print('Delete'),
-  child: Text('Delete Item'),
-)
-
-OutlineButton(
-  onPressed: () => print('Outline'),
-  child: Text('Outline Style'),
-)
-
-GhostButton(
-  onPressed: () => print('Ghost'),
-  child: Text('Ghost Style'),
-)
-
-LinkButton(
-  onPressed: () => print('Link'),
-  child: Text('Link Style'),
-)
-
-IconButton(
-  variant: ButtonVariant.primary,
-  onPressed: () => print('Icon'),
-  child: Icon(CupertinoIcons.heart),
-)
-```
-
-### **Advanced Usage:**
-
-```dart
-// With loading state
-PrimaryButton(
-  isLoading: true,
-  onPressed: () => print('Loading...'),
-  child: Text('Save Changes'),
-)
-
-// Disabled state
-SecondaryButton(
-  disabled: true,
-  onPressed: () => print('Disabled'),
-  child: Text('Disabled Button'),
-)
-
-// Custom width
-PrimaryButton(
-  width: 200,
-  onPressed: () => print('Custom width'),
-  child: Text('Wide Button'),
-)
-
-// Custom border radius
-OutlineButton(
-  borderRadius: BorderRadius.circular(20),
-  onPressed: () => print('Rounded'),
-  child: Text('Rounded Button'),
-)
-```
-
-## 🎯 **Key Features**
-
-- Same variant names and approach
-- Clean, predictable API
-- Proper separation of concerns
-
-### **✅ Comprehensive Sizing:**
-
-- Responsive height system
-- Proper padding based on size
-- Icon button support
-
-### **✅ Full State Management:**
-
-- Loading states with activity indicators
-- Disabled states with proper styling
-- Hover and press feedback
-
-### **✅ Customizable:**
-
-- Custom widths and border radius
-- Flexible content (text, icons, rows)
-- Theme-based color system
-
-### **✅ Best Practices:**
-
-- Proper accessibility
-- Performance optimized
-- Clean documentation
-
-## 🔄 **Migration Guide**
-
-### **From Old System:**
-
-```dart
-// OLD WAY (deprecated)
-PrimaryButton(
-  size: AppButtonSize.medium,
-  width: AppButtonWidth.large,
-  onPressed: () {},
-  child: Text('Button'),
-)
-
-// NEW WAY (recommended)
-PrimaryButton(
-  size: ButtonSize.medium,
-  width: 200, // explicit width
-  onPressed: () {},
-  child: Text('Button'),
-)
-```
-
-### **Import Changes:**
-
-```dart
-// OLD WAY
-import '../components/buttons/primary_button.dart';
-import '../components/buttons/ghost_button.dart';
-
-// NEW WAY (clean)
-import '../components/buttons/index.dart';
-```
-
-## 🎨 **Styling System**
-
-All buttons use the centralized theme system:
-
-- Colors from `AppColors`
-- Text styles from `AppTextStyles`
-- Dimensions from `AppDimensions`
-
-This ensures consistency across the entire application and makes theme changes easy to implement.
-
-## 🔧 **Technical Details**
-
-### **Text Centering:**
-
-The new button system properly handles text centering by:
-
-- Using `DefaultTextStyle` with `textAlign: TextAlign.center`
-- Proper container constraints
-- Consistent padding system
-
-### **Performance:**
-
-- Minimal widget rebuilds
-- Efficient color calculations
-- Optimized for various screen sizes
-
-This button system provides a solid foundation for the entire application with clean code, proper naming conventions, and excellent maintainability.
diff --git a/lib/components/buttons/app_toggle.dart b/lib/components/buttons/app_toggle.dart
deleted file mode 100644
index f4ca1b6..0000000
--- a/lib/components/buttons/app_toggle.dart
+++ /dev/null
@@ -1,323 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// Size variants for toggle buttons.
-enum AppToggleSize { small, medium, large }
-
-/// Variant styles for toggle buttons.
-enum AppToggleVariant { default_, outline }
-
-/// A toggle button widget that can be pressed to toggle between states.
-///
-/// providing a pressable toggle button with different visual states.
-class AppToggle extends StatefulWidget {
-  /// Creates a toggle button.
-  const AppToggle({
-    super.key,
-    required this.child,
-    this.isPressed = false,
-    this.onPressed,
-    this.disabled = false,
-    this.size = AppToggleSize.medium,
-    this.variant = AppToggleVariant.default_,
-    this.borderRadius,
-  });
-
-  /// The widget to display inside the toggle button.
-  final Widget child;
-
-  /// Whether the toggle is currently pressed/active.
-  final bool isPressed;
-
-  /// Called when the toggle is pressed.
-  final ValueChanged<bool>? onPressed;
-
-  /// Whether the toggle is disabled.
-  final bool disabled;
-
-  /// Size variant of the toggle.
-  final AppToggleSize size;
-
-  /// Visual variant of the toggle.
-  final AppToggleVariant variant;
-
-  /// Custom border radius.
-  final BorderRadius? borderRadius;
-
-  @override
-  State<AppToggle> createState() => _AppToggleState();
-}
-
-class _AppToggleState extends State<AppToggle> {
-  bool _isPressed = false;
-
-  @override
-  void initState() {
-    super.initState();
-    _isPressed = widget.isPressed;
-  }
-
-  @override
-  void didUpdateWidget(AppToggle oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.isPressed != oldWidget.isPressed) {
-      _isPressed = widget.isPressed;
-    }
-  }
-
-  void _handleTap() {
-    if (widget.disabled) return;
-
-    setState(() {
-      _isPressed = !_isPressed;
-    });
-
-    widget.onPressed?.call(_isPressed);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(
-      onTap: _handleTap,
-      child: AnimatedContainer(
-        duration: const Duration(milliseconds: 150),
-        padding: _getPadding(),
-        decoration: BoxDecoration(
-          color: _getBackgroundColor(),
-          border: _getBorder(),
-          borderRadius:
-              widget.borderRadius ??
-              BorderRadius.circular(AppDimensions.radiusSmall),
-        ),
-        child: DefaultTextStyle(
-          style: TextStyle(color: _getTextColor(), fontSize: _getFontSize()),
-          child: widget.child,
-        ),
-      ),
-    );
-  }
-
-  EdgeInsets _getPadding() {
-    switch (widget.size) {
-      case AppToggleSize.small:
-        return const EdgeInsets.symmetric(horizontal: 8, vertical: 4);
-      case AppToggleSize.medium:
-        return const EdgeInsets.symmetric(
-          horizontal: AppDimensions.paddingMedium,
-          vertical: AppDimensions.paddingSmall,
-        );
-      case AppToggleSize.large:
-        return const EdgeInsets.symmetric(
-          horizontal: AppDimensions.paddingLarge,
-          vertical: AppDimensions.paddingMedium,
-        );
-    }
-  }
-
-  double _getFontSize() {
-    switch (widget.size) {
-      case AppToggleSize.small:
-        return 12;
-      case AppToggleSize.medium:
-        return 14;
-      case AppToggleSize.large:
-        return 16;
-    }
-  }
-
-  Color _getBackgroundColor() {
-    if (widget.disabled) {
-      return AppColors.lightGray.withValues(alpha: 0.5);
-    }
-
-    switch (widget.variant) {
-      case AppToggleVariant.default_:
-        return _isPressed
-            ? AppColors.primaryBlue.withValues(alpha: 0.1)
-            : const Color(0x00000000);
-      case AppToggleVariant.outline:
-        return _isPressed
-            ? AppColors.primaryBlue.withValues(alpha: 0.1)
-            : AppColors.backgroundWhite;
-    }
-  }
-
-  Border? _getBorder() {
-    switch (widget.variant) {
-      case AppToggleVariant.default_:
-        return null;
-      case AppToggleVariant.outline:
-        return Border.all(
-          color: _isPressed ? AppColors.primaryBlue : AppColors.borderGray,
-        );
-    }
-  }
-
-  Color _getTextColor() {
-    if (widget.disabled) return AppColors.mediumGray;
-
-    return _isPressed ? AppColors.primaryBlue : AppColors.foregroundDark;
-  }
-}
-
-/// A group of toggle buttons where only one can be selected at a time.
-class AppToggleGroup<T> extends StatefulWidget {
-  /// Creates a toggle group.
-  const AppToggleGroup({
-    super.key,
-    required this.options,
-    this.value,
-    this.onChanged,
-    this.disabled = false,
-    this.size = AppToggleSize.medium,
-    this.variant = AppToggleVariant.default_,
-    this.direction = Axis.horizontal,
-    this.spacing = 4.0,
-  });
-
-  /// The available options in the toggle group.
-  final List<AppToggleOption<T>> options;
-
-  /// Currently selected value.
-  final T? value;
-
-  /// Called when the selection changes.
-  final ValueChanged<T?>? onChanged;
-
-  /// Whether the entire group is disabled.
-  final bool disabled;
-
-  /// Size variant for all toggles in the group.
-  final AppToggleSize size;
-
-  /// Visual variant for all toggles in the group.
-  final AppToggleVariant variant;
-
-  /// Direction to layout the toggles.
-  final Axis direction;
-
-  /// Spacing between toggle buttons.
-  final double spacing;
-
-  @override
-  State<AppToggleGroup<T>> createState() => _AppToggleGroupState<T>();
-}
-
-class _AppToggleGroupState<T> extends State<AppToggleGroup<T>> {
-  T? _selectedValue;
-
-  @override
-  void initState() {
-    super.initState();
-    _selectedValue = widget.value;
-  }
-
-  @override
-  void didUpdateWidget(AppToggleGroup<T> oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.value != oldWidget.value) {
-      _selectedValue = widget.value;
-    }
-  }
-
-  void _handleTogglePressed(T value, bool isPressed) {
-    if (widget.disabled) return;
-
-    setState(() {
-      _selectedValue = isPressed ? value : null;
-    });
-
-    widget.onChanged?.call(_selectedValue);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final children =
-        widget.options.map((option) {
-          final isSelected = _selectedValue == option.value;
-
-          return AppToggle(
-            isPressed: isSelected,
-            onPressed: (pressed) => _handleTogglePressed(option.value, pressed),
-            disabled: widget.disabled || option.disabled,
-            size: widget.size,
-            variant: widget.variant,
-            child: Row(
-              mainAxisSize: MainAxisSize.min,
-              children: [
-                if (option.icon != null) ...[
-                  Icon(option.icon, size: _getIconSize()),
-                  const SizedBox(width: 4),
-                ],
-                Text(option.label),
-              ],
-            ),
-          );
-        }).toList();
-
-    if (widget.direction == Axis.horizontal) {
-      return Row(
-        mainAxisSize: MainAxisSize.min,
-        children: _addSpacing(children, widget.spacing),
-      );
-    } else {
-      return Column(
-        mainAxisSize: MainAxisSize.min,
-        children: _addSpacing(children, widget.spacing),
-      );
-    }
-  }
-
-  double _getIconSize() {
-    switch (widget.size) {
-      case AppToggleSize.small:
-        return 14;
-      case AppToggleSize.medium:
-        return 16;
-      case AppToggleSize.large:
-        return 18;
-    }
-  }
-
-  List<Widget> _addSpacing(List<Widget> children, double spacing) {
-    if (children.isEmpty) return children;
-
-    final spacedChildren = <Widget>[];
-    for (int i = 0; i < children.length; i++) {
-      spacedChildren.add(children[i]);
-      if (i < children.length - 1) {
-        spacedChildren.add(
-          SizedBox(
-            width: widget.direction == Axis.horizontal ? spacing : 0,
-            height: widget.direction == Axis.vertical ? spacing : 0,
-          ),
-        );
-      }
-    }
-    return spacedChildren;
-  }
-}
-
-/// A toggle option for use in toggle groups.
-class AppToggleOption<T> {
-  /// Creates a toggle option.
-  const AppToggleOption({
-    required this.value,
-    required this.label,
-    this.icon,
-    this.disabled = false,
-  });
-
-  /// The value of this option.
-  final T value;
-
-  /// The display label.
-  final String label;
-
-  /// Optional icon to display.
-  final IconData? icon;
-
-  /// Whether this option is disabled.
-  final bool disabled;
-}
diff --git a/lib/components/buttons/app_toggle_button.dart b/lib/components/buttons/app_toggle_button.dart
deleted file mode 100644
index a2999d1..0000000
--- a/lib/components/buttons/app_toggle_button.dart
+++ /dev/null
@@ -1,167 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-enum AppToggleButtonVariant {
-  defaultStyle, // Renamed from 'default' to avoid keyword clash
-  outline,
-}
-
-enum AppToggleButtonSize {
-  defaultSize, // Renamed
-  sm,
-  lg,
-}
-
-class AppToggleButton extends StatefulWidget {
-  final bool isOn;
-  final ValueChanged<bool> onPressed;
-  final Widget child;
-  final AppToggleButtonVariant variant;
-  final AppToggleButtonSize size;
-  final bool disabled;
-
-  const AppToggleButton({
-    super.key,
-    required this.isOn,
-    required this.onPressed,
-    required this.child,
-    this.variant = AppToggleButtonVariant.defaultStyle,
-    this.size = AppToggleButtonSize.defaultSize,
-    this.disabled = false,
-  });
-
-  @override
-  AppToggleButtonState createState() => AppToggleButtonState();
-}
-
-class AppToggleButtonState extends State<AppToggleButton> {
-  bool _isHovered = false;
-  bool _isFocused = false; // Basic focus state
-
-  // Style determination based on variant, size, and state
-  Color _getBackgroundColor(BuildContext context) {
-    if (widget.disabled) {
-      return AppColors.backgroundDisabled.withAlpha((255 * 0.5).round());
-    }
-    if (widget.isOn) {
-      return AppColors.primaryBlue; // accent
-    }
-    if (_isHovered) {
-      return AppColors.mediumGray.withAlpha((255 * 0.1).round());
-    }
-    if (widget.variant == AppToggleButtonVariant.outline) {
-      return CupertinoColors.transparent;
-    }
-    return CupertinoColors.transparent; // default variant background
-  }
-
-  Color _getForegroundColor(BuildContext context) {
-    if (widget.disabled) {
-      return AppColors.textDisabled;
-    }
-    if (widget.isOn) {
-      return AppColors.accentForeground;
-    }
-    if (_isHovered && widget.variant == AppToggleButtonVariant.defaultStyle) {
-      return AppColors
-          .foregroundDark; // muted-foreground (darker on hover for default)
-    }
-    if (_isHovered && widget.variant == AppToggleButtonVariant.outline) {
-      return AppColors.primaryBlue; // accent-foreground for outline hover
-    }
-    return AppColors.foregroundDark;
-  }
-
-  Border? _getBorder(BuildContext context) {
-    if (widget.variant == AppToggleButtonVariant.outline) {
-      if (_isFocused && !widget.disabled) {
-        // Ring effect for focus
-        return Border.all(color: AppColors.primaryBlue, width: 2.0);
-      }
-      return Border.all(color: AppColors.border); // input border
-    }
-    if (_isFocused && !widget.disabled) {
-      // Ring effect for focus on default variant
-      return Border.all(
-        color: AppColors.primaryBlue.withAlpha((255 * 0.5).round()),
-        width: 2.0,
-      );
-    }
-    return null;
-  }
-
-  EdgeInsets _getPadding() {
-    switch (widget.size) {
-      case AppToggleButtonSize.sm:
-        return const EdgeInsets.symmetric(
-          horizontal: AppDimensions.spacingS,
-          vertical: AppDimensions.spacingXs,
-        ); // h-9 px-2.5
-      case AppToggleButtonSize.lg:
-        return const EdgeInsets.symmetric(
-          horizontal: AppDimensions.spacingL,
-          vertical: AppDimensions.spacingM,
-        ); // h-11 px-5
-      case AppToggleButtonSize.defaultSize:
-        return const EdgeInsets.symmetric(
-          horizontal: AppDimensions.spacingM,
-          vertical: AppDimensions.spacingS,
-        ); // h-10 px-3
-    }
-  }
-
-  double _getHeight() {
-    switch (widget.size) {
-      case AppToggleButtonSize.sm:
-        return 36.0; // h-9
-      case AppToggleButtonSize.lg:
-        return 44.0; // h-11
-      case AppToggleButtonSize.defaultSize:
-        return 40.0; // h-10
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final backgroundColor = _getBackgroundColor(context);
-    final foregroundColor = _getForegroundColor(context);
-    final border = _getBorder(context);
-    final padding = _getPadding();
-    final height = _getHeight();
-
-    return FocusableActionDetector(
-      onShowFocusHighlight: (v) => setState(() => _isFocused = v),
-      onShowHoverHighlight: (v) => setState(() => _isHovered = v),
-      child: GestureDetector(
-        onTap: widget.disabled ? null : () => widget.onPressed(!widget.isOn),
-        child: Container(
-          height: height,
-          padding: padding,
-          decoration: BoxDecoration(
-            color: backgroundColor,
-            border: border,
-            borderRadius: BorderRadius.circular(
-              AppDimensions.radiusMedium,
-            ), // rounded-md
-          ),
-          child: DefaultTextStyle(
-            style: AppTextStyles.bodySmall.copyWith(
-              // text-sm font-medium
-              color: foregroundColor,
-              fontWeight: FontWeight.w500,
-            ),
-            child: IconTheme(
-              data: IconThemeData(
-                color: foregroundColor,
-                size: AppDimensions.iconSizeSmall,
-              ),
-              child: Center(child: widget.child),
-            ),
-          ),
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/buttons/app_toggle_group.dart b/lib/components/buttons/app_toggle_group.dart
deleted file mode 100644
index bb4a6af..0000000
--- a/lib/components/buttons/app_toggle_group.dart
+++ /dev/null
@@ -1,100 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import './app_toggle_button.dart'; // Assuming AppToggleButton is in the same directory
-import '../../theme/app_dimensions.dart';
-
-class AppToggleGroup extends StatefulWidget {
-  final List<Widget> children;
-  final AppToggleButtonVariant variant;
-  final AppToggleButtonSize size;
-  final bool allowMultipleSelection;
-  final List<bool> initialSelection; // For multiple selection
-  final int? initialSelectedIndex; // For single selection
-  final Function(List<bool> selectedStates)?
-  onMultiSelectionChanged; // Returns a list of bools
-  final Function(int? selectedIndex)?
-  onSingleSelectionChanged; // Returns the index of the selected item, or null if none
-
-  const AppToggleGroup({
-    super.key,
-    required this.children,
-    this.variant = AppToggleButtonVariant.defaultStyle,
-    this.size = AppToggleButtonSize.defaultSize,
-    this.allowMultipleSelection = false,
-    this.initialSelection = const [],
-    this.initialSelectedIndex,
-    this.onMultiSelectionChanged,
-    this.onSingleSelectionChanged,
-  }) : assert(
-         (allowMultipleSelection &&
-                 initialSelection.length == children.length) ||
-             (!allowMultipleSelection),
-         "InitialSelection length must match children length for multiple selection.",
-       );
-
-  @override
-  AppToggleGroupState createState() => AppToggleGroupState();
-}
-
-class AppToggleGroupState extends State<AppToggleGroup> {
-  late List<bool> _selectedStates;
-  int? _currentSelectedIndex;
-
-  @override
-  void initState() {
-    super.initState();
-    if (widget.allowMultipleSelection) {
-      _selectedStates = List<bool>.from(widget.initialSelection);
-      if (_selectedStates.isEmpty && widget.children.isNotEmpty) {
-        _selectedStates = List<bool>.filled(widget.children.length, false);
-      }
-    } else {
-      _currentSelectedIndex = widget.initialSelectedIndex;
-      _selectedStates = List<bool>.generate(
-        widget.children.length,
-        (i) => i == _currentSelectedIndex,
-      );
-    }
-  }
-
-  void _handleToggle(int index) {
-    setState(() {
-      if (widget.allowMultipleSelection) {
-        _selectedStates[index] = !_selectedStates[index];
-        widget.onMultiSelectionChanged?.call(List<bool>.from(_selectedStates));
-      } else {
-        if (_currentSelectedIndex == index) {
-          // Optional: allow deselecting the current item in a single-select group
-          // _currentSelectedIndex = null;
-        } else {
-          _currentSelectedIndex = index;
-        }
-        for (int i = 0; i < _selectedStates.length; i++) {
-          _selectedStates[i] = (i == _currentSelectedIndex);
-        }
-        widget.onSingleSelectionChanged?.call(_currentSelectedIndex);
-      }
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: "flex items-center justify-center gap-1"
-    return Wrap(
-      spacing: AppDimensions.spacingXxs, // gap-1 (approx 4px)
-      runSpacing: AppDimensions.spacingXxs,
-      alignment: WrapAlignment.center,
-      children: List<Widget>.generate(widget.children.length, (index) {
-        final childContent = widget.children[index];
-        // It's assumed children are appropriate for a ToggleButton (e.g., Icon, Text)
-        // We wrap them in our AppToggleButton styling logic.
-        return AppToggleButton(
-          isOn: _selectedStates[index],
-          onPressed: (bool isOn) => _handleToggle(index),
-          variant: widget.variant,
-          size: widget.size,
-          child: childContent,
-        );
-      }),
-    );
-  }
-}
diff --git a/lib/components/buttons/button.dart b/lib/components/buttons/button.dart
index 1d5a7c6..c59e7d4 100644
--- a/lib/components/buttons/button.dart
+++ b/lib/components/buttons/button.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_text_styles.dart';
 import '../../theme/app_dimensions.dart';
@@ -96,7 +96,7 @@ class Button extends StatelessWidget {
 
   /// Get button width based on size - uses minimum width constants from AppDimensions
   double? get _buttonWidth {
-    if (width != null) return width;
+    if (width != null && width!.isFinite) return width;
 
     switch (size) {
       case ButtonSize.small:
@@ -139,7 +139,7 @@ class Button extends StatelessWidget {
     }
   }
 
-  /// Get background color based on variant and state
+  /// Get background color based on variant and state (for Material style)
   Color get _backgroundColor {
     if (disabled) return AppColors.lightGray.withValues(alpha: 0.5);
 
@@ -153,7 +153,7 @@ class Button extends StatelessWidget {
       case ButtonVariant.outline:
       case ButtonVariant.ghost:
       case ButtonVariant.link:
-        return CupertinoColors.transparent;
+        return Colors.transparent;
     }
   }
 
@@ -189,10 +189,10 @@ class Button extends StatelessWidget {
     );
   }
 
-  /// Get border for outline variant
-  Border? get _border {
+  /// Get border side (for outline / ghost variants)
+  BorderSide? get _borderSide {
     if (variant == ButtonVariant.outline) {
-      return Border.all(
+      return BorderSide(
         color: disabled ? AppColors.lightGray : AppColors.borderGray,
         width: 1,
       );
@@ -204,38 +204,42 @@ class Button extends StatelessWidget {
   Widget build(BuildContext context) {
     final bool isEffectivelyDisabled = disabled || onPressed == null;
 
+    final minWidth =
+        (_buttonWidth != null && _buttonWidth!.isFinite) ? _buttonWidth! : 0.0;
+
     return ConstrainedBox(
-      constraints: BoxConstraints(
-        minWidth: _buttonWidth ?? 0,
-        minHeight: _buttonHeight,
-      ),
-      child: Container(
-        height: _buttonHeight,
-        decoration: BoxDecoration(
-          color: _backgroundColor,
-          borderRadius: _borderRadius,
-          border: _border,
-        ),
-        child: CupertinoButton(
+      constraints: BoxConstraints(minWidth: minWidth, minHeight: _buttonHeight),
+      child: TextButton(
+        style: TextButton.styleFrom(
+          backgroundColor: _backgroundColor,
+          foregroundColor: _textColor,
+          minimumSize: Size(minWidth, _buttonHeight),
           padding: EdgeInsets.symmetric(horizontal: _horizontalPadding),
-          borderRadius: _borderRadius,
-          minSize: 0,
-          onPressed: isEffectivelyDisabled || isLoading ? null : onPressed,
-          child:
-              isLoading
-                  ? CupertinoActivityIndicator(
-                    color: _textColor,
-                    radius: size == ButtonSize.small ? 8 : 10,
-                  )
-                  : IconTheme(
-                    data: IconThemeData(color: _textColor),
-                    child: DefaultTextStyle(
-                      style: _textStyle,
-                      textAlign: TextAlign.center,
-                      child: child,
-                    ),
-                  ),
+          shape: RoundedRectangleBorder(
+            borderRadius: _borderRadius,
+            side: _borderSide ?? BorderSide.none,
+          ),
+          textStyle: _textStyle,
         ),
+        onPressed: isEffectivelyDisabled || isLoading ? null : onPressed,
+        child:
+            isLoading
+                ? SizedBox(
+                  width: size == ButtonSize.small ? 16 : 20,
+                  height: size == ButtonSize.small ? 16 : 20,
+                  child: CircularProgressIndicator(
+                    strokeWidth: 2,
+                    valueColor: AlwaysStoppedAnimation<Color>(_textColor),
+                  ),
+                )
+                : IconTheme(
+                  data: IconThemeData(color: _textColor),
+                  child: DefaultTextStyle(
+                    style: _textStyle,
+                    textAlign: TextAlign.center,
+                    child: child,
+                  ),
+                ),
       ),
     );
   }
diff --git a/lib/components/buttons/index.dart b/lib/components/buttons/index.dart
index cb9a9b2..c448483 100644
--- a/lib/components/buttons/index.dart
+++ b/lib/components/buttons/index.dart
@@ -8,7 +8,3 @@ export 'button.dart';
 
 // Button variant convenience constructors
 export 'button_variants.dart';
-
-// Toggle components (keeping existing ones for now)
-export 'app_toggle_button.dart';
-export 'app_toggle_group.dart';
diff --git a/lib/components/cards/info_card.dart b/lib/components/cards/info_card.dart
index 7f22762..fe83226 100644
--- a/lib/components/cards/info_card.dart
+++ b/lib/components/cards/info_card.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_dimensions.dart';
 
@@ -95,18 +95,22 @@ class InfoCard extends StatelessWidget {
                         children: [
                           DefaultTextStyle(
                             style:
-                                CupertinoTheme.of(
-                                  context,
-                                ).textTheme.navTitleTextStyle,
+                                Theme.of(context).textTheme.titleLarge ??
+                                const TextStyle(
+                                  fontSize: 20,
+                                  fontWeight: FontWeight.w600,
+                                ),
                             child: title!,
                           ),
                           if (subtitle != null) ...[
                             const SizedBox(height: AppDimensions.spacingXs),
                             DefaultTextStyle(
                               style:
-                                  CupertinoTheme.of(
-                                    context,
-                                  ).textTheme.tabLabelTextStyle,
+                                  Theme.of(context).textTheme.bodyMedium ??
+                                  const TextStyle(
+                                    fontSize: 14,
+                                    color: Colors.black54,
+                                  ),
                               child: subtitle!,
                             ),
                           ],
diff --git a/lib/components/dialogs/add_patient_modal.dart b/lib/components/dialogs/add_patient_modal.dart
index 6b1089f..77aa077 100644
--- a/lib/components/dialogs/add_patient_modal.dart
+++ b/lib/components/dialogs/add_patient_modal.dart
@@ -1,4 +1,8 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide IconButton, showDatePicker;
+import 'package:flutter/material.dart'
+    as material
+    show IconButton, CircularProgressIndicator, showDatePicker;
+import 'package:flutter/material.dart' as material_icons;
 import 'package:provider/provider.dart';
 import '../../core/models/patient_models.dart';
 import '../../core/providers/patient_provider.dart';
@@ -8,7 +12,6 @@ import '../../theme/app_text_styles.dart';
 import '../buttons/index.dart';
 import '../forms/text_input.dart';
 import 'app_custom_dialog.dart';
-import '../forms/app_date_picker.dart';
 
 /// Modal for adding a new patient
 class AddPatientModal extends StatefulWidget {
@@ -42,6 +45,10 @@ class _AddPatientModalState extends State<AddPatientModal> {
     const Duration(days: 365),
   ); // Default to 1 year old
 
+  String _formatDate(DateTime date) {
+    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
+  }
+
   bool _isLoading = false;
 
   @override
@@ -147,87 +154,89 @@ class _AddPatientModalState extends State<AddPatientModal> {
         child: Center(
           child: GestureDetector(
             onTap: () {}, // Prevent closing when tapping on modal content
-            child: Container(
-              width: MediaQuery.of(context).size.width * 0.9,
-              constraints: const BoxConstraints(maxWidth: 500),
-              margin: const EdgeInsets.all(AppDimensions.spacingL),
-              padding: const EdgeInsets.all(AppDimensions.spacingXl),
-              decoration: BoxDecoration(
-                color: AppColors.backgroundWhite,
-                borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
-                boxShadow: [
-                  BoxShadow(
-                    color: AppColors.foregroundDark.withValues(alpha: 0.2),
-                    blurRadius: 20,
-                    offset: const Offset(0, 10),
-                  ),
-                ],
-              ),
-              child: SingleChildScrollView(
-                child: Column(
-                  mainAxisSize: MainAxisSize.min,
-                  crossAxisAlignment: CrossAxisAlignment.stretch,
-                  children: [
-                    // Header
-                    Row(
-                      children: [
-                        const Icon(
-                          CupertinoIcons.plus,
-                          color: AppColors.primaryBlue,
-                          size: 20,
-                        ),
-                        const SizedBox(width: AppDimensions.spacingS),
-                        Text(
-                          'Aggiungi Nuovo Paziente',
-                          style: AppTextStyles.title3.copyWith(
-                            fontWeight: FontWeight.w600,
-                          ),
-                        ),
-                        const Spacer(),
-                        CupertinoButton(
-                          padding: EdgeInsets.zero,
-                          minSize: 0,
-                          onPressed: widget.onClose,
-                          child: const Icon(
-                            CupertinoIcons.xmark,
-                            color: AppColors.mediumGray,
+            child: Material(
+              color: AppColors.backgroundWhite,
+              borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
+              elevation: 0,
+              child: Container(
+                width: MediaQuery.of(context).size.width * 0.9,
+                constraints: const BoxConstraints(maxWidth: 500),
+                margin: const EdgeInsets.all(AppDimensions.spacingL),
+                padding: const EdgeInsets.all(AppDimensions.spacingXl),
+                child: SingleChildScrollView(
+                  child: Column(
+                    mainAxisSize: MainAxisSize.min,
+                    crossAxisAlignment: CrossAxisAlignment.stretch,
+                    children: [
+                      // Header
+                      Row(
+                        children: [
+                          const Icon(
+                            material_icons.Icons.add,
+                            color: AppColors.primaryBlue,
                             size: 20,
                           ),
-                        ),
-                      ],
-                    ),
+                          const SizedBox(width: AppDimensions.spacingS),
+                          Text(
+                            'Aggiungi Nuovo Paziente',
+                            style: AppTextStyles.title3.copyWith(
+                              fontWeight: FontWeight.w600,
+                            ),
+                          ),
+                          const Spacer(),
+                          material.IconButton(
+                            padding: EdgeInsets.zero,
+                            visualDensity: VisualDensity.compact,
+                            constraints: const BoxConstraints(),
+                            icon: const Icon(
+                              material_icons.Icons.close,
+                              color: AppColors.mediumGray,
+                              size: 20,
+                            ),
+                            onPressed: widget.onClose,
+                          ),
+                        ],
+                      ),
 
-                    const SizedBox(height: AppDimensions.spacingXl),
+                      const SizedBox(height: AppDimensions.spacingXl),
 
-                    // Form
-                    _buildForm(),
+                      // Form
+                      _buildForm(),
 
-                    const SizedBox(height: AppDimensions.spacingXl),
+                      const SizedBox(height: AppDimensions.spacingXl),
 
-                    // Action Buttons
-                    Row(
-                      children: [
-                        Expanded(
-                          child: GhostButton(
-                            size: ButtonSize.large,
-                            onPressed: widget.onClose,
-                            child: const Text('Annulla'),
+                      // Action Buttons
+                      Row(
+                        children: [
+                          Expanded(
+                            child: GhostButton(
+                              size: ButtonSize.large,
+                              onPressed: widget.onClose,
+                              child: const Text('Annulla'),
+                            ),
                           ),
-                        ),
-                        const SizedBox(width: AppDimensions.spacingM),
-                        Expanded(
-                          child: PrimaryButton(
-                            size: ButtonSize.large,
-                            onPressed: _isLoading ? null : _handleSubmit,
-                            child:
-                                _isLoading
-                                    ? const CupertinoActivityIndicator()
-                                    : const Text('Aggiungi Paziente'),
+                          const SizedBox(width: AppDimensions.spacingM),
+                          Expanded(
+                            child: PrimaryButton(
+                              size: ButtonSize.large,
+                              onPressed: _isLoading ? null : _handleSubmit,
+                              child:
+                                  _isLoading
+                                      ? const SizedBox(
+                                        width: 20,
+                                        height: 20,
+                                        child:
+                                            material.CircularProgressIndicator(
+                                              strokeWidth: 2,
+                                            ),
+                                      )
+                                      : const Text('Aggiungi Paziente'),
+                            ),
                           ),
-                        ),
-                      ],
-                    ),
-                  ],
+                        ],
+                      ),
+                    ],
+                  ),
                 ),
               ),
             ),
@@ -316,10 +325,45 @@ class _AddPatientModalState extends State<AddPatientModal> {
         const SizedBox(height: AppDimensions.spacingL),
 
         // Date of Birth row (full width)
-        AppDatePickerField(
-          label: 'Data di Nascita',
-          selectedDate: _selectedBirthdate,
-          onDateChanged: (d) => setState(() => _selectedBirthdate = d),
+        GestureDetector(
+          onTap: _selectDate,
+          child: Container(
+            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
+            decoration: BoxDecoration(
+              color: AppColors.backgroundSecondary,
+              borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
+            ),
+            child: Row(
+              crossAxisAlignment: CrossAxisAlignment.center,
+              children: [
+                const Icon(
+                  material_icons.Icons.calendar_today,
+                  size: 16,
+                  color: AppColors.mediumGray,
+                ),
+                const SizedBox(width: AppDimensions.spacingS),
+                Expanded(
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    mainAxisSize: MainAxisSize.min,
+                    children: [
+                      Text(
+                        'Data di Nascita',
+                        style: AppTextStyles.caption.copyWith(
+                          color: AppColors.textSecondary,
+                        ),
+                      ),
+                      const SizedBox(height: 2),
+                      Text(
+                        _formatDate(_selectedBirthdate),
+                        style: AppTextStyles.body,
+                      ),
+                    ],
+                  ),
+                ),
+              ],
+            ),
+          ),
         ),
 
         const SizedBox(height: AppDimensions.spacingL),
@@ -346,4 +390,16 @@ class _AddPatientModalState extends State<AddPatientModal> {
       ],
     );
   }
+
+  Future<void> _selectDate() async {
+    final DateTime? picked = await material.showDatePicker(
+      context: context,
+      initialDate: _selectedBirthdate,
+      firstDate: DateTime(1900),
+      lastDate: DateTime.now(),
+    );
+    if (picked != null) {
+      setState(() => _selectedBirthdate = picked);
+    }
+  }
 }
diff --git a/lib/components/dialogs/alert_dialog.dart b/lib/components/dialogs/alert_dialog.dart
deleted file mode 100644
index 02d3d90..0000000
--- a/lib/components/dialogs/alert_dialog.dart
+++ /dev/null
@@ -1,118 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// Alert type for different visual styles.
-enum AlertType {
-  /// Standard informational alert.
-  info,
-
-  /// Success message alert.
-  success,
-
-  /// Warning alert.
-  warning,
-
-  /// Error or destructive alert.
-  error,
-}
-
-/// Shows a Cupertino-style alert dialog.
-///
-/// Returns a Future that resolves to the value passed to Navigator.pop
-/// when the dialog is closed.
-Future<T?> showAppDialog<T>({
-  required BuildContext context,
-  required String title,
-  required String message,
-  String? confirmText,
-  String? cancelText,
-  VoidCallback? onConfirm,
-  VoidCallback? onCancel,
-  AlertType alertType = AlertType.info,
-  bool barrierDismissible = true,
-}) {
-  final Color iconColor;
-  final IconData iconData;
-
-  switch (alertType) {
-    case AlertType.success:
-      iconColor = AppColors.successGreen;
-      iconData = CupertinoIcons.checkmark_circle_fill;
-      break;
-    case AlertType.warning:
-      iconColor = AppColors.warningOrange;
-      iconData = CupertinoIcons.exclamationmark_triangle_fill;
-      break;
-    case AlertType.error:
-      iconColor = AppColors.destructiveRed;
-      iconData = CupertinoIcons.xmark_circle_fill;
-      break;
-    case AlertType.info:
-      iconColor = AppColors.primaryBlue;
-      iconData = CupertinoIcons.info_circle_fill;
-      break;
-  }
-
-  return showCupertinoModalPopup<T>(
-    context: context,
-    barrierDismissible: barrierDismissible,
-    builder: (BuildContext context) {
-      return CupertinoAlertDialog(
-        title: Column(
-          children: [
-            Icon(iconData, color: iconColor, size: AppDimensions.iconSizeLarge),
-            const SizedBox(height: AppDimensions.spacingM),
-            Text(title),
-          ],
-        ),
-        content: Padding(
-          padding: const EdgeInsets.only(
-            top: AppDimensions.spacingM,
-            bottom: AppDimensions.spacingM,
-          ),
-          child: Text(
-            message,
-            style: AppTextStyles.body,
-            textAlign: TextAlign.center,
-          ),
-        ),
-        actions: <Widget>[
-          if (cancelText != null)
-            CupertinoDialogAction(
-              onPressed: () {
-                Navigator.of(context).pop(false);
-                if (onCancel != null) {
-                  onCancel();
-                }
-              },
-              child: Text(
-                cancelText,
-                style: TextStyle(
-                  color:
-                      alertType == AlertType.error
-                          ? AppColors.destructiveRed
-                          : AppColors.primaryBlue,
-                ),
-              ),
-            ),
-          if (confirmText != null)
-            CupertinoDialogAction(
-              onPressed: () {
-                Navigator.of(context).pop(true);
-                if (onConfirm != null) {
-                  onConfirm();
-                }
-              },
-              isDefaultAction: true,
-              child: Text(
-                confirmText,
-                style: const TextStyle(fontWeight: FontWeight.bold),
-              ),
-            ),
-        ],
-      );
-    },
-  );
-}
diff --git a/lib/components/dialogs/app_alert_dialog.dart b/lib/components/dialogs/app_alert_dialog.dart
deleted file mode 100644
index 709ee90..0000000
--- a/lib/components/dialogs/app_alert_dialog.dart
+++ /dev/null
@@ -1,67 +0,0 @@
-// ignore_for_file: use_super_parameters
-
-import 'package:flutter/cupertino.dart';
-
-class AppAlertDialog extends StatelessWidget {
-  final Widget? title;
-  final Widget? content;
-  final List<Widget> actions;
-
-  const AppAlertDialog({
-    Key? key,
-    this.title,
-    this.content,
-    required this.actions,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoAlertDialog(
-      title: title,
-      content: content,
-      actions: actions,
-    );
-  }
-}
-
-class AppAlertDialogAction extends StatelessWidget {
-  final Widget child;
-  final VoidCallback? onPressed;
-  final bool isDefaultAction;
-  final bool isDestructiveAction;
-
-  const AppAlertDialogAction({
-    Key? key,
-    required this.child,
-    this.onPressed,
-    this.isDefaultAction = false,
-    this.isDestructiveAction = false,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoDialogAction(
-      onPressed: onPressed,
-      isDefaultAction: isDefaultAction,
-      isDestructiveAction: isDestructiveAction,
-      child: child,
-    );
-  }
-}
-
-// Helper function to show the dialog
-Future<T?> showAppAlertDialog<T>({
-  required BuildContext context,
-  Widget? title,
-  Widget? content,
-  required List<Widget> actions,
-  bool barrierDismissible = false,
-}) {
-  return showCupertinoDialog<T>(
-    context: context,
-    barrierDismissible: barrierDismissible,
-    builder: (BuildContext context) {
-      return AppAlertDialog(title: title, content: content, actions: actions);
-    },
-  );
-}
diff --git a/lib/components/dialogs/app_command_palette.dart b/lib/components/dialogs/app_command_palette.dart
deleted file mode 100644
index 2b93031..0000000
--- a/lib/components/dialogs/app_command_palette.dart
+++ /dev/null
@@ -1,333 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-// Define a simple command item structure for now
-class CommandPaletteItem {
-  final String id;
-  final String title;
-  final IconData? icon;
-  final VoidCallback onSelected;
-  final String? group; // Optional group name
-
-  CommandPaletteItem({
-    required this.id,
-    required this.title,
-    this.icon,
-    required this.onSelected,
-    this.group,
-  });
-}
-
-class AppCommandPalette extends StatefulWidget {
-  final List<CommandPaletteItem> items;
-  final bool initiallyVisible;
-  final ValueChanged<String>?
-  onSearchChanged; // Callback for search text changes
-  final String? searchPlaceholder;
-
-  const AppCommandPalette({
-    super.key,
-    required this.items,
-    this.initiallyVisible = false,
-    this.onSearchChanged,
-    this.searchPlaceholder = 'Type a command or search...',
-  });
-
-  @override
-  State<AppCommandPalette> createState() => _AppCommandPaletteState();
-}
-
-class _AppCommandPaletteState extends State<AppCommandPalette> {
-  late bool _isVisible;
-  String _searchText = '';
-  final TextEditingController _searchController = TextEditingController();
-  final FocusNode _searchFocusNode = FocusNode();
-
-  @override
-  void initState() {
-    super.initState();
-    _isVisible = widget.initiallyVisible;
-    _searchController.addListener(() {
-      setState(() {
-        _searchText = _searchController.text;
-      });
-      if (widget.onSearchChanged != null) {
-        widget.onSearchChanged!(_searchText);
-      }
-    });
-  }
-
-  @override
-  void dispose() {
-    _searchController.dispose();
-    _searchFocusNode.dispose();
-    super.dispose();
-  }
-
-  void _toggleVisibility() {
-    setState(() {
-      _isVisible = !_isVisible;
-      if (_isVisible) {
-        // Request focus when palette becomes visible
-        // Needs a slight delay to ensure the widget is in the tree
-        Future.delayed(const Duration(milliseconds: 50), () {
-          _searchFocusNode.requestFocus();
-        });
-      }
-    });
-  }
-
-  List<CommandPaletteItem> get _filteredItems {
-    if (_searchText.isEmpty) {
-      return widget.items;
-    }
-    return widget.items
-        .where(
-          (item) =>
-              item.title.toLowerCase().contains(_searchText.toLowerCase()),
-        )
-        .toList();
-  }
-
-  Map<String?, List<CommandPaletteItem>> get _groupedItems {
-    final Map<String?, List<CommandPaletteItem>> grouped = {};
-    for (var item in _filteredItems) {
-      grouped.putIfAbsent(item.group, () => []).add(item);
-    }
-    return grouped;
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // This is a placeholder for how the palette might be triggered.
-    // In a real app, this could be a button in an AppBar or a global keyboard listener.
-    // For now, we'll include a button to toggle it for demonstration.
-    return Stack(
-      children: [
-        // Example trigger button (can be removed or replaced)
-        Positioned(
-          top: 10,
-          right: 10,
-          child: CupertinoButton(
-            onPressed: _toggleVisibility,
-            child: const Icon(CupertinoIcons.search_circle_fill, size: 30),
-          ),
-        ),
-        if (_isVisible)
-          Positioned.fill(
-            child: GestureDetector(
-              onTap: _toggleVisibility, // Dismiss on tap outside
-              child: Container(
-                color: AppColors.shadowColor.withValues(alpha: 0.5),
-                child: Center(
-                  child: GestureDetector(
-                    onTap:
-                        () {}, // Prevent dismissal when tapping inside the dialog
-                    child: Container(
-                      width: MediaQuery.of(context).size.width * 0.8,
-                      constraints: const BoxConstraints(maxWidth: 500),
-                      decoration: BoxDecoration(
-                        color: AppColors.backgroundWhite,
-                        borderRadius: BorderRadius.circular(
-                          AppDimensions.radiusLarge,
-                        ),
-                        boxShadow: [
-                          BoxShadow(
-                            color: AppColors.shadowColor.withValues(alpha: 0.2),
-                            blurRadius: 20,
-                            offset: const Offset(0, 5),
-                          ),
-                        ],
-                      ),
-                      child: Column(
-                        mainAxisSize: MainAxisSize.min,
-                        children: [_buildCommandInput(), _buildCommandList()],
-                      ),
-                    ),
-                  ),
-                ),
-              ),
-            ),
-          ),
-      ],
-    );
-  }
-
-  Widget _buildCommandInput() {
-    return Padding(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      child: CupertinoTextField(
-        controller: _searchController,
-        focusNode: _searchFocusNode,
-        placeholder: widget.searchPlaceholder,
-        prefix: const Padding(
-          padding: EdgeInsets.only(left: AppDimensions.spacingS),
-          child: Icon(
-            CupertinoIcons.search,
-            color: AppColors.mediumGray,
-            size: AppDimensions.iconSizeMedium,
-          ),
-        ),
-        padding: const EdgeInsets.symmetric(
-          horizontal: AppDimensions.spacingS,
-          vertical: AppDimensions.spacingM, // Increased vertical padding
-        ),
-        style: AppTextStyles.body,
-        decoration: BoxDecoration(
-          color: AppColors.lightGray,
-          borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-        ),
-        clearButtonMode: OverlayVisibilityMode.editing,
-      ),
-    );
-  }
-
-  Widget _buildCommandList() {
-    final grouped = _groupedItems;
-    final List<Widget> listChildren = [];
-
-    if (_filteredItems.isEmpty && _searchText.isNotEmpty) {
-      listChildren.add(
-        Padding(
-          padding: const EdgeInsets.all(AppDimensions.spacingL),
-          child: Center(
-            child: Text(
-              'No results found for "$_searchText"',
-              style: AppTextStyles.body.copyWith(color: AppColors.mediumGray),
-            ),
-          ),
-        ),
-      );
-    } else if (widget.items.isEmpty) {
-      listChildren.add(
-        Padding(
-          padding: const EdgeInsets.all(AppDimensions.spacingL),
-          child: Center(
-            child: Text(
-              'No commands available.',
-              style: AppTextStyles.body.copyWith(color: AppColors.mediumGray),
-            ),
-          ),
-        ),
-      );
-    } else {
-      // Iterate through groups (null group for items without a group comes first if desired)
-      // Or sort groups by name, or have a predefined order.
-      // For now, simple iteration.
-      grouped.forEach((groupName, itemsInGroup) {
-        if (groupName != null) {
-          listChildren.add(
-            Padding(
-              padding: const EdgeInsets.symmetric(
-                horizontal: AppDimensions.spacingM,
-                vertical: AppDimensions.spacingS,
-              ),
-              child: Text(
-                groupName,
-                style: AppTextStyles.footnote.copyWith(
-                  color: AppColors.mediumGray,
-                ),
-              ),
-            ),
-          );
-        }
-        for (var item in itemsInGroup) {
-          listChildren.add(
-            CupertinoButton(
-              onPressed: () {
-                item.onSelected();
-                _toggleVisibility(); // Close palette after selection
-              },
-              padding: const EdgeInsets.symmetric(
-                horizontal: AppDimensions.spacingM,
-                vertical: AppDimensions.spacingS,
-              ),
-              child: Row(
-                children: [
-                  if (item.icon != null) ...[
-                    Icon(
-                      item.icon,
-                      color: AppColors.primaryBlue,
-                      size: AppDimensions.iconSizeMedium,
-                    ),
-                    const SizedBox(width: AppDimensions.spacingM),
-                  ],
-                  Expanded(
-                    child: Text(
-                      item.title,
-                      style: AppTextStyles.body.copyWith(
-                        color: AppColors.foregroundDark,
-                      ),
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          );
-          // Add a separator if not the last item in the group or overall
-          if (item != itemsInGroup.last || groupName != grouped.keys.last) {
-            listChildren.add(
-              Container(
-                height: 1,
-                margin: const EdgeInsets.symmetric(
-                  horizontal: AppDimensions.spacingM,
-                ),
-                color: AppColors.borderGray.withValues(alpha: 0.5),
-              ),
-            );
-          }
-        }
-      });
-    }
-
-    return Flexible(
-      // Use Flexible for the list part if it's inside a Column
-      child: ConstrainedBox(
-        constraints: BoxConstraints(
-          maxHeight:
-              MediaQuery.of(context).size.height *
-              0.5, // Max 50% of screen height
-        ),
-        child: SingleChildScrollView(
-          padding: const EdgeInsets.only(bottom: AppDimensions.spacingM),
-          child: Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: listChildren,
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-// Example Usage (can be placed in a screen/page widget):
-/*
-class MyHomePage extends StatelessWidget {
-  final List<CommandPaletteItem> _commandItems = [
-    CommandPaletteItem(id: '1', title: 'Open Settings', icon: CupertinoIcons.settings, onSelected: () => print('Settings selected')),
-    CommandPaletteItem(id: '2', title: 'New File', icon: CupertinoIcons.doc_plaintext, onSelected: () => print('New File selected'), group: 'File'),
-    CommandPaletteItem(id: '3', title: 'Save File', icon: CupertinoIcons.floppy_disk, onSelected: () => print('Save File selected'), group: 'File'),
-    CommandPaletteItem(id: '4', title: 'Print Document', icon: CupertinoIcons.printer, onSelected: () => print('Print selected'), group: 'File'),
-    CommandPaletteItem(id: '5', title: 'User Profile', icon: CupertinoIcons.person, onSelected: () => print('Profile selected'), group: 'User'),
-    CommandPaletteItem(id: '6', title: 'Logout', icon: CupertinoIcons.square_arrow_right, onSelected: () => print('Logout selected'), group: 'User'),
-  ];
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: CupertinoNavigationBar(
-        middle: Text('Command Palette Demo'),
-      ),
-      child: Stack( // Stack is needed if AppCommandPalette is to overlay content
-        children: [
-          Center(child: Text('Main Content')),
-          // AppCommandPalette is a StatefulWidget, so it manages its own visibility trigger internally for this demo
-          AppCommandPalette(items: _commandItems),
-        ],
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/dialogs/app_custom_dialog.dart b/lib/components/dialogs/app_custom_dialog.dart
index 9a0ccce..7dd014b 100644
--- a/lib/components/dialogs/app_custom_dialog.dart
+++ b/lib/components/dialogs/app_custom_dialog.dart
@@ -1,4 +1,5 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/material.dart' as material_icons;
 import '../../theme/app_colors.dart';
 import '../../theme/app_dimensions.dart';
 import '../../theme/app_text_styles.dart';
@@ -78,8 +79,8 @@ class AppCustomDialog extends StatelessWidget {
                     ),
                     child: Icon(
                       isError
-                          ? CupertinoIcons.xmark_circle_fill
-                          : CupertinoIcons.checkmark_circle_fill,
+                          ? material_icons.Icons.error_rounded
+                          : material_icons.Icons.check_circle,
                       color:
                           isError
                               ? AppColors.destructiveRed
@@ -143,19 +144,18 @@ Future<T?> showAppCustomDialog<T>({
   double width = 400,
   bool barrierDismissible = true,
 }) {
-  return showCupertinoDialog<T>(
+  return showDialog<T>(
     context: context,
     barrierDismissible: barrierDismissible,
-    builder: (BuildContext context) {
-      return AppCustomDialog(
-        title: title,
-        message: message,
-        isError: isError,
-        onPressed: onPressed,
-        buttonText: buttonText,
-        width: width,
-      );
-    },
+    builder:
+        (BuildContext context) => AppCustomDialog(
+          title: title,
+          message: message,
+          isError: isError,
+          onPressed: onPressed,
+          buttonText: buttonText,
+          width: width,
+        ),
   );
 }
 
@@ -216,90 +216,89 @@ Future<bool?> showConfirmationDialog({
   double width = 400,
   bool barrierDismissible = true,
 }) {
-  return showCupertinoDialog<bool>(
+  return showDialog<bool>(
     context: context,
     barrierDismissible: barrierDismissible,
-    builder: (BuildContext context) {
-      return Center(
-        child: Container(
-          width: width,
-          margin: const EdgeInsets.all(AppDimensions.spacingL),
-          decoration: BoxDecoration(
-            color: AppColors.backgroundWhite,
-            borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-            boxShadow: [
-              BoxShadow(
-                color: AppColors.foregroundDark.withValues(alpha: 0.15),
-                blurRadius: 24,
-                offset: const Offset(0, 8),
-              ),
-            ],
-          ),
-          child: Column(
-            mainAxisSize: MainAxisSize.min,
-            children: [
-              // Header
-              Padding(
-                padding: const EdgeInsets.all(AppDimensions.spacingL),
-                child: Column(
-                  children: [
-                    Text(
-                      title,
-                      style: AppTextStyles.title2.copyWith(
-                        fontWeight: FontWeight.w600,
+    builder:
+        (BuildContext context) => Center(
+          child: Container(
+            width: width,
+            margin: const EdgeInsets.all(AppDimensions.spacingL),
+            decoration: BoxDecoration(
+              color: AppColors.backgroundWhite,
+              borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
+              boxShadow: [
+                BoxShadow(
+                  color: AppColors.foregroundDark.withValues(alpha: 0.15),
+                  blurRadius: 24,
+                  offset: const Offset(0, 8),
+                ),
+              ],
+            ),
+            child: Column(
+              mainAxisSize: MainAxisSize.min,
+              children: [
+                // Header
+                Padding(
+                  padding: const EdgeInsets.all(AppDimensions.spacingL),
+                  child: Column(
+                    children: [
+                      Text(
+                        title,
+                        style: AppTextStyles.title2.copyWith(
+                          fontWeight: FontWeight.w600,
+                        ),
                       ),
-                    ),
-                    const SizedBox(height: AppDimensions.spacingS),
-                    Text(
-                      message,
-                      style: AppTextStyles.body.copyWith(
-                        color: AppColors.textSecondary,
+                      const SizedBox(height: AppDimensions.spacingS),
+                      Text(
+                        message,
+                        style: AppTextStyles.body.copyWith(
+                          color: AppColors.textSecondary,
+                        ),
+                        textAlign: TextAlign.center,
                       ),
-                      textAlign: TextAlign.center,
-                    ),
-                  ],
+                    ],
+                  ),
                 ),
-              ),
 
-              // Divider
-              Container(
-                height: 1,
-                color: AppColors.borderGray.withValues(alpha: 0.3),
-              ),
+                // Divider
+                Container(
+                  height: 1,
+                  color: AppColors.borderGray.withValues(alpha: 0.3),
+                ),
 
-              // Actions
-              Padding(
-                padding: const EdgeInsets.all(AppDimensions.spacingL),
-                child: Row(
-                  children: [
-                    Expanded(
-                      child: SecondaryButton(
-                        onPressed: () => Navigator.of(context).pop(false),
-                        child: Text(cancelText),
+                // Actions
+                Padding(
+                  padding: const EdgeInsets.all(AppDimensions.spacingL),
+                  child: Row(
+                    children: [
+                      Expanded(
+                        child: SecondaryButton(
+                          onPressed: () => Navigator.of(context).pop(false),
+                          child: Text(cancelText),
+                        ),
                       ),
-                    ),
-                    const SizedBox(width: AppDimensions.spacingM),
-                    Expanded(
-                      child:
-                          isDestructive
-                              ? DestructiveButton(
-                                onPressed:
-                                    () => Navigator.of(context).pop(true),
-                                child: Text(confirmText),
-                              )
-                              : PrimaryButton(
-                                onPressed:
-                                    () => Navigator.of(context).pop(true),
-                                child: Text(confirmText),
-                              ),
-                    ),
-                  ],
+                      const SizedBox(width: AppDimensions.spacingM),
+                      Expanded(
+                        child:
+                            isDestructive
+                                ? DestructiveButton(
+                                  onPressed:
+                                      () => Navigator.of(context).pop(true),
+                                  child: Text(confirmText),
+                                )
+                                : PrimaryButton(
+                                  onPressed:
+                                      () => Navigator.of(context).pop(true),
+                                  child: Text(confirmText),
+                                ),
+                      ),
+                    ],
+                  ),
                 ),
-              ),
-            ],
+              ],
+            ),
           ),
         ),
-      );
-    },
   );
 }
diff --git a/lib/components/dialogs/app_generic_dialog.dart b/lib/components/dialogs/app_generic_dialog.dart
deleted file mode 100644
index a583a73..0000000
--- a/lib/components/dialogs/app_generic_dialog.dart
+++ /dev/null
@@ -1,188 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// A generic dialog component that can be customized with any content.
-///
-/// This is useful for creating modals with complex layouts or forms,
-/// going beyond the standard `showAppDialog` for simple alerts.
-class AppGenericDialog extends StatelessWidget {
-  /// Creates a generic dialog.
-  const AppGenericDialog({
-    super.key,
-    this.title,
-    required this.content,
-    this.actions,
-    this.contentPadding = const EdgeInsets.all(
-      AppDimensions.spacingL,
-    ), // p-6 (24px)
-    this.titlePadding = const EdgeInsets.fromLTRB(
-      AppDimensions.spacingL, // p-6 left
-      AppDimensions.spacingL, // p-6 top
-      AppDimensions.spacingL, // p-6 right
-      AppDimensions.spacingM, // space-y-1.5 (16px) after title
-    ),
-    this.actionsPadding = const EdgeInsets.all(
-      AppDimensions.spacingM,
-    ), // Default padding for actions area
-    this.borderRadius = AppDimensions.radiusLarge, // sm:rounded-lg
-    this.backgroundColor = AppColors.backgroundWhite, // bg-background
-    this.barrierDismissible = true,
-    this.showCloseButton = false, // New property for close button
-    this.dialogWidth,
-  });
-
-  /// Optional title for the dialog.
-  final Widget? title;
-
-  /// The main content of the dialog.
-  final Widget content;
-
-  /// A list of actions (typically buttons) to display at the bottom.
-  final List<Widget>? actions;
-
-  /// Padding around the content area.
-  final EdgeInsetsGeometry contentPadding;
-
-  /// Padding for the title section.
-  final EdgeInsetsGeometry titlePadding;
-
-  /// Padding for the actions section.
-  final EdgeInsetsGeometry actionsPadding;
-
-  /// Border radius of the dialog.
-  final double borderRadius;
-
-  /// Background color of the dialog.
-  final Color backgroundColor;
-
-  /// Whether the dialog can be dismissed by tapping outside of it.
-  final bool barrierDismissible;
-
-  /// Whether to show an 'X' close button in the top-right corner.
-  final bool showCloseButton;
-
-  /// Optional width for the dialog.
-  final double? dialogWidth;
-
-  @override
-  Widget build(BuildContext context) {
-    Widget dialogContent = Column(
-      mainAxisSize: MainAxisSize.min,
-      crossAxisAlignment: CrossAxisAlignment.stretch,
-      children: [
-        if (title != null)
-          Padding(
-            padding: titlePadding,
-            child: DefaultTextStyle(
-              style: AppTextStyles.title2.copyWith(
-                color: AppColors.foregroundDark,
-                // fontWeight: FontWeight.w600, // text-lg font-semibold (title2 is already bold)
-              ),
-              textAlign:
-                  TextAlign
-                      .center, // Mock: text-center sm:text-left. Defaulting to center for title.
-              child: title!,
-            ),
-          ),
-        Flexible(
-          child: SingleChildScrollView(padding: contentPadding, child: content),
-        ),
-        if (actions != null && actions!.isNotEmpty)
-          Padding(
-            padding: actionsPadding,
-            // Mock: flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2
-            // Defaulting to Row with MainAxisAlignment.end. Reverse column not implemented here.
-            child: Row(
-              mainAxisAlignment: MainAxisAlignment.end,
-              children:
-                  actions!
-                      .map(
-                        (e) => Padding(
-                          // Add spacing for sm:space-x-2
-                          padding: const EdgeInsets.only(
-                            left: AppDimensions.spacingXs,
-                          ),
-                          child: e,
-                        ),
-                      )
-                      .toList(),
-            ),
-          ),
-      ],
-    );
-
-    if (showCloseButton) {
-      dialogContent = Stack(
-        children: [
-          dialogContent,
-          Positioned(
-            right: AppDimensions.spacingS, // Equivalent to right-4 (16px)
-            top: AppDimensions.spacingS, // Equivalent to top-4 (16px)
-            child: CupertinoButton(
-              padding: EdgeInsets.zero,
-              minSize: 0,
-              onPressed: () => Navigator.of(context).pop(),
-              child: const Icon(
-                CupertinoIcons.xmark,
-                size:
-                    AppDimensions
-                        .iconSizeMedium, // h-4 w-4 (16px), iconSizeSmall is 16px, Medium is 24px. Using Medium for better tap.
-                color: AppColors.mediumGray, // text-muted-foreground or similar
-              ),
-            ),
-          ),
-        ],
-      );
-    }
-
-    return CupertinoPopupSurface(
-      isSurfacePainted: true,
-      child: Container(
-        width: dialogWidth, // Apply dialog width
-        decoration: BoxDecoration(
-          color: backgroundColor,
-          borderRadius: BorderRadius.circular(borderRadius),
-          // Mock: border. Adding a subtle border.
-          border: Border.all(color: AppColors.borderGray, width: 0.5),
-          // Mock: shadow-lg. CupertinoPopupSurface provides some elevation.
-          // Additional boxShadow could be added here if needed.
-        ),
-        child: dialogContent,
-      ),
-    );
-  }
-}
-
-/// Shows a generic dialog with custom content.
-Future<T?> showAppGenericDialog<T>({
-  required BuildContext context,
-  Widget? title,
-  required Widget content,
-  List<Widget>? actions,
-  bool barrierDismissible = true,
-  bool showCloseButton = false, // Pass this through
-  double? dialogWidth, // Pass this through
-}) {
-  return showCupertinoModalPopup<T>(
-    context: context,
-    barrierDismissible: barrierDismissible,
-    builder: (BuildContext context) {
-      return Padding(
-        padding: const EdgeInsets.symmetric(
-          horizontal: AppDimensions.spacingXl,
-          vertical: AppDimensions.spacingXxl,
-        ),
-        child: AppGenericDialog(
-          title: title,
-          content: content,
-          actions: actions,
-          barrierDismissible: barrierDismissible,
-          showCloseButton: showCloseButton, // Pass to AppGenericDialog
-          dialogWidth: dialogWidth,
-        ),
-      );
-    },
-  );
-}
diff --git a/lib/components/dialogs/update_patient_modal.dart b/lib/components/dialogs/update_patient_modal.dart
index d33b595..b5db982 100644
--- a/lib/components/dialogs/update_patient_modal.dart
+++ b/lib/components/dialogs/update_patient_modal.dart
@@ -1,4 +1,8 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide IconButton, showDatePicker;
+import 'package:flutter/material.dart'
+    as material
+    show IconButton, showDatePicker;
+import 'package:flutter/material.dart' as icons show Icons;
 import 'package:provider/provider.dart';
 import '../../core/models/patient_models.dart';
 import '../../core/providers/patient_provider.dart';
@@ -7,7 +11,6 @@ import '../../theme/app_dimensions.dart';
 import '../../theme/app_text_styles.dart';
 import '../buttons/index.dart';
 import '../forms/text_input.dart';
-import '../forms/app_date_picker.dart';
 import 'app_custom_dialog.dart';
 
 /// Modal for updating an existing patient
@@ -131,6 +134,10 @@ class _UpdatePatientModalState extends State<UpdatePatientModal> {
     showErrorDialog(context: context, message: message);
   }
 
+  String _formatDate(DateTime date) {
+    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
+  }
+
   @override
   Widget build(BuildContext context) {
     if (!widget.isOpen) return const SizedBox.shrink();
@@ -142,111 +149,172 @@ class _UpdatePatientModalState extends State<UpdatePatientModal> {
         child: Center(
           child: GestureDetector(
             onTap: () {},
-            child: Container(
-              width: MediaQuery.of(context).size.width * 0.9,
-              constraints: const BoxConstraints(maxWidth: 500),
-              padding: const EdgeInsets.all(AppDimensions.spacingL),
-              decoration: BoxDecoration(
-                color: AppColors.backgroundWhite,
-                borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
-              ),
-              child: SingleChildScrollView(
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Row(
-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                      children: [
-                        Text('Aggiorna Paziente', style: AppTextStyles.title2),
-                        CupertinoButton(
-                          padding: EdgeInsets.zero,
-                          minSize: 0,
-                          child: const Icon(CupertinoIcons.clear_circled),
-                          onPressed: widget.onClose,
-                        ),
-                      ],
-                    ),
-                    const SizedBox(height: AppDimensions.spacingL),
-                    AppTextInput(
-                      controller: _nameController,
-                      label: 'Nome Paziente',
-                      placeholder: 'Buddy',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppTextInput(
-                      controller: _ownerController,
-                      label: 'Nome Proprietario',
-                      placeholder: 'Mario Rossi',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppTextInput(
-                      controller: _speciesController,
-                      label: 'Specie',
-                      placeholder: 'Cane',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppTextInput(
-                      controller: _breedController,
-                      label: 'Razza',
-                      placeholder: 'Golden Retriever',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    Row(
-                      children: [
-                        Expanded(
-                          child: AppTextInput(
-                            controller: _sexController,
-                            label: 'Sesso',
-                            placeholder: 'Maschio',
+            child: Material(
+              color: AppColors.backgroundWhite,
+              borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
+              elevation: 0,
+              child: Container(
+                width: MediaQuery.of(context).size.width * 0.9,
+                constraints: const BoxConstraints(maxWidth: 500),
+                padding: const EdgeInsets.all(AppDimensions.spacingL),
+                decoration: BoxDecoration(
+                  color: AppColors.backgroundWhite,
+                  borderRadius: BorderRadius.circular(
+                    AppDimensions.radiusLarge,
+                  ),
+                ),
+                child: SingleChildScrollView(
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                        children: [
+                          Text(
+                            'Aggiorna Paziente',
+                            style: AppTextStyles.title2,
                           ),
-                        ),
-                        const SizedBox(width: AppDimensions.spacingM),
-                        Expanded(
-                          child: AppTextInput(
-                            controller: _weightController,
-                            label: 'Peso',
-                            placeholder: '25 kg',
-                            keyboardType: TextInputType.number,
+                          material.IconButton(
+                            padding: EdgeInsets.zero,
+                            visualDensity: VisualDensity.compact,
+                            constraints: const BoxConstraints(),
+                            icon: const Icon(icons.Icons.close),
+                            onPressed: widget.onClose,
+                          ),
+                        ],
+                      ),
+                      const SizedBox(height: AppDimensions.spacingL),
+                      AppTextInput(
+                        controller: _nameController,
+                        label: 'Nome Paziente',
+                        placeholder: 'Buddy',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      AppTextInput(
+                        controller: _ownerController,
+                        label: 'Nome Proprietario',
+                        placeholder: 'Mario Rossi',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      AppTextInput(
+                        controller: _speciesController,
+                        label: 'Specie',
+                        placeholder: 'Cane',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      AppTextInput(
+                        controller: _breedController,
+                        label: 'Razza',
+                        placeholder: 'Golden Retriever',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      Row(
+                        children: [
+                          Expanded(
+                            child: AppTextInput(
+                              controller: _sexController,
+                              label: 'Sesso',
+                              placeholder: 'Maschio',
+                            ),
+                          ),
+                          const SizedBox(width: AppDimensions.spacingM),
+                          Expanded(
+                            child: AppTextInput(
+                              controller: _weightController,
+                              label: 'Peso',
+                              placeholder: '25 kg',
+                              keyboardType: TextInputType.number,
+                            ),
+                          ),
+                        ],
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      GestureDetector(
+                        onTap: () async {
+                          final DateTime? picked = await material
+                              .showDatePicker(
+                                context: context,
+                                initialDate: _selectedBirthdate,
+                                firstDate: DateTime(1900),
+                                lastDate: DateTime.now(),
+                              );
+                          if (picked != null) {
+                            setState(() => _selectedBirthdate = picked);
+                          }
+                        },
+                        child: Container(
+                          padding: const EdgeInsets.symmetric(
+                            vertical: 12,
+                            horizontal: 16,
+                          ),
+                          decoration: BoxDecoration(
+                            color: AppColors.backgroundSecondary,
+                            borderRadius: BorderRadius.circular(
+                              AppDimensions.radiusMedium,
+                            ),
+                          ),
+                          child: Row(
+                            crossAxisAlignment: CrossAxisAlignment.center,
+                            children: [
+                              const Icon(
+                                icons.Icons.calendar_today,
+                                size: 16,
+                                color: AppColors.mediumGray,
+                              ),
+                              const SizedBox(width: AppDimensions.spacingS),
+                              Expanded(
+                                child: Column(
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  mainAxisSize: MainAxisSize.min,
+                                  children: [
+                                    Text(
+                                      'Data di Nascita',
+                                      style: AppTextStyles.caption.copyWith(
+                                        color: AppColors.textSecondary,
+                                      ),
+                                    ),
+                                    const SizedBox(height: 2),
+                                    Text(
+                                      _formatDate(_selectedBirthdate),
+                                      style: AppTextStyles.body,
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
                           ),
                         ),
-                      ],
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppDatePickerField(
-                      label: 'Data di Nascita',
-                      selectedDate: _selectedBirthdate,
-                      onDateChanged:
-                          (d) => setState(() => _selectedBirthdate = d),
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppTextInput(
-                      controller: _emailController,
-                      label: 'Email di Contatto',
-                      placeholder: 'email@example.com',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    AppTextInput(
-                      controller: _phoneController,
-                      label: 'Telefono di Contatto',
-                      placeholder: '+39 123 456 7890',
-                    ),
-                    const SizedBox(height: AppDimensions.spacingM),
-                    Row(
-                      mainAxisAlignment: MainAxisAlignment.end,
-                      children: [
-                        SecondaryButton(
-                          onPressed: widget.onClose,
-                          child: const Text('Annulla'),
-                        ),
-                        const SizedBox(width: AppDimensions.spacingM),
-                        PrimaryButton(
-                          isLoading: _isLoading,
-                          onPressed: _handleSubmit,
-                          child: const Text('Aggiorna'),
-                        ),
-                      ],
-                    ),
-                  ],
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      AppTextInput(
+                        controller: _emailController,
+                        label: 'Email di Contatto',
+                        placeholder: 'email@example.com',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      AppTextInput(
+                        controller: _phoneController,
+                        label: 'Telefono di Contatto',
+                        placeholder: '+39 123 456 7890',
+                      ),
+                      const SizedBox(height: AppDimensions.spacingM),
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.end,
+                        children: [
+                          SecondaryButton(
+                            onPressed: widget.onClose,
+                            child: const Text('Annulla'),
+                          ),
+                          const SizedBox(width: AppDimensions.spacingM),
+                          PrimaryButton(
+                            isLoading: _isLoading,
+                            onPressed: _handleSubmit,
+                            child: const Text('Aggiorna'),
+                          ),
+                        ],
+                      ),
+                    ],
+                  ),
                 ),
               ),
             ),
diff --git a/lib/components/display/accordion.dart b/lib/components/display/accordion.dart
deleted file mode 100644
index 1684c1a..0000000
--- a/lib/components/display/accordion.dart
+++ /dev/null
@@ -1,190 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// An expandable panel component that shows/hides content.
-///
-/// This component allows users to toggle the visibility of content,
-/// which is useful for displaying additional details without cluttering the UI.
-class AppAccordionPanel extends StatefulWidget {
-  /// Creates an accordion panel with the specified properties.
-  const AppAccordionPanel({
-    super.key,
-    required this.title,
-    required this.child,
-    this.initiallyExpanded = false,
-    this.titleStyle,
-    this.leadingIcon,
-    this.trailingIcon,
-    this.onToggle,
-    this.backgroundColor = AppColors.backgroundWhite,
-    this.borderRadius,
-    this.padding,
-    this.animationDuration = const Duration(milliseconds: 200),
-  });
-
-  /// The title displayed in the header.
-  final Widget title;
-
-  /// The content to show/hide.
-  final Widget child;
-
-  /// Whether the accordion is initially expanded.
-  final bool initiallyExpanded;
-
-  /// Optional custom style for the title.
-  final TextStyle? titleStyle;
-
-  /// Optional icon to display before the title.
-  final IconData? leadingIcon;
-
-  /// Optional custom icon to display for the toggle.
-  final IconData? trailingIcon;
-
-  /// Called when the accordion is expanded or collapsed.
-  final ValueChanged<bool>? onToggle;
-
-  /// Background color of the accordion.
-  final Color backgroundColor;
-
-  /// Optional custom border radius.
-  final BorderRadius? borderRadius;
-
-  /// Optional custom padding for the header and content.
-  final EdgeInsetsGeometry? padding;
-
-  /// Duration of the expand/collapse animation.
-  final Duration animationDuration;
-
-  @override
-  State<AppAccordionPanel> createState() => _AppAccordionPanelState();
-}
-
-class _AppAccordionPanelState extends State<AppAccordionPanel>
-    with SingleTickerProviderStateMixin {
-  late bool _isExpanded;
-  late AnimationController _controller;
-  late Animation<double> _iconRotation;
-
-  @override
-  void initState() {
-    super.initState();
-    _isExpanded = widget.initiallyExpanded;
-
-    _controller = AnimationController(
-      duration: widget.animationDuration,
-      vsync: this,
-    );
-
-    _iconRotation = Tween<double>(
-      begin: 0.0,
-      end: 0.5,
-    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOut));
-
-    if (_isExpanded) {
-      _controller.value = 1.0;
-    }
-  }
-
-  @override
-  void dispose() {
-    _controller.dispose();
-    super.dispose();
-  }
-
-  void _toggleExpanded() {
-    setState(() {
-      _isExpanded = !_isExpanded;
-      if (_isExpanded) {
-        _controller.forward();
-      } else {
-        _controller.reverse();
-      }
-
-      // Null check for widget.onToggle before calling it
-      widget.onToggle?.call(_isExpanded);
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      decoration: BoxDecoration(
-        color: widget.backgroundColor,
-        borderRadius:
-            widget.borderRadius ??
-            BorderRadius.circular(AppDimensions.radiusMedium),
-        border: Border.all(
-          color: AppColors.borderGray,
-          width: AppDimensions.borderWidth,
-        ),
-      ),
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        children: [
-          // Header section with toggle
-          CupertinoButton(
-            padding: EdgeInsets.zero,
-            onPressed: _toggleExpanded,
-            child: Padding(
-              padding:
-                  widget.padding ??
-                  const EdgeInsets.all(AppDimensions.contentPadding),
-              child: Row(
-                children: [
-                  if (widget.leadingIcon != null) ...[
-                    Icon(
-                      widget.leadingIcon,
-                      color: AppColors.primaryBlue,
-                      size: AppDimensions.iconSizeMedium,
-                    ),
-                    const SizedBox(width: AppDimensions.spacingM),
-                  ],
-
-                  Expanded(
-                    child: DefaultTextStyle(
-                      style: widget.titleStyle ?? AppTextStyles.title3,
-                      child: widget.title,
-                    ),
-                  ),
-
-                  RotationTransition(
-                    turns: _iconRotation,
-                    child: Icon(
-                      widget.trailingIcon ?? CupertinoIcons.chevron_down,
-                      color: AppColors.mediumGray,
-                    ),
-                  ),
-                ],
-              ),
-            ),
-          ),
-
-          // Expandable content
-          AnimatedSize(
-            duration: widget.animationDuration,
-            curve: Curves.easeInOut,
-            child:
-                _isExpanded
-                    ? Padding(
-                      padding: EdgeInsets.only(
-                        left:
-                            widget.padding?.horizontal ??
-                            AppDimensions.contentPadding,
-                        right:
-                            widget.padding?.horizontal ??
-                            AppDimensions.contentPadding,
-                        bottom:
-                            widget.padding?.vertical ??
-                            AppDimensions.contentPadding,
-                      ),
-                      child: widget.child,
-                    )
-                    : const SizedBox.shrink(),
-          ),
-        ],
-      ),
-    );
-  }
-}
diff --git a/lib/components/display/app_avatar.dart b/lib/components/display/app_avatar.dart
deleted file mode 100644
index 72083f7..0000000
--- a/lib/components/display/app_avatar.dart
+++ /dev/null
@@ -1,162 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A circular avatar component for displaying user images or fallback initials/icons.
-///
-/// The `AppAvatar` widget can display an image from a URL. If the image fails to load
-/// or no URL is provided, it can display fallback text (e.g., user initials) or a
-/// fallback icon.
-///
-/// It is styled to be consistent with the application\'s theme, using predefined
-/// dimensions and colors.
-///
-/// Example usage:
-/// ```dart
-/// AppAvatar(
-///   imageUrl: \'https://example.com/user.jpg\',
-///   fallbackText: \'JD\',
-/// )
-///
-/// AppAvatar(
-///   fallbackIcon: CupertinoIcons.person_fill,
-/// )
-/// ```
-class AppAvatar extends StatelessWidget {
-  /// Creates an app avatar.
-  ///
-  /// - [imageUrl]: Optional URL of the image to display.
-  /// - [fallbackText]: Optional text to display if the image is unavailable (e.g., initials).
-  /// - [fallbackIcon]: Optional icon to display if image and fallbackText are unavailable.
-  /// - [radius]: The radius of the avatar. Defaults to `AppDimensions.avatarRadiusStandard`.
-  /// - [backgroundColor]: Background color of the avatar. Defaults to `AppColors.lightGray`.
-  /// - [foregroundColor]: Color for fallback text or icon. Defaults to `AppColors.primaryBlue`.
-  /// - [textStyle]: Custom text style for the fallback text.
-  const AppAvatar({
-    super.key,
-    this.imageUrl,
-    this.fallbackText,
-    this.fallbackIcon,
-    this.radius = AppDimensions.avatarRadiusStandard,
-    this.backgroundColor =
-        AppColors.lightGray, // Corresponds to "bg-muted" in the mock
-    this.foregroundColor =
-        AppColors.foregroundDark, // Default for text/icon on lightGray
-    this.textStyle,
-  });
-
-  /// URL of the image to display. If null or empty, fallbackText or fallbackIcon will be used.
-  final String? imageUrl;
-
-  /// Text to display as a fallback if imageUrl is null or empty (e.g., user initials).
-  /// Only the first two characters will be shown, uppercased.
-  final String? fallbackText;
-
-  /// Icon to display as a fallback if imageUrl and fallbackText are null or empty.
-  /// Defaults to `CupertinoIcons.person_fill` if no other fallback is provided.
-  final IconData? fallbackIcon;
-
-  /// Radius of the circular avatar.
-  final double radius;
-
-  /// Background color if no image is loaded or for the fallback.
-  /// This corresponds to the `bg-muted` class in the mock, which is `AppColors.lightGray`.
-  final Color backgroundColor;
-
-  /// Foreground color for fallback text or icon.
-  final Color foregroundColor;
-
-  /// TextStyle for the fallbackText. If not provided, a default style is used,
-  /// scaled according to the avatar\'s radius.
-  final TextStyle? textStyle;
-
-  @override
-  Widget build(BuildContext context) {
-    Widget content;
-
-    // Determine if an image should be attempted
-    final bool hasValidImageUrl = imageUrl != null && imageUrl!.isNotEmpty;
-
-    if (hasValidImageUrl) {
-      content = Image.network(
-        imageUrl!,
-        width: radius * 2,
-        height: radius * 2,
-        fit: BoxFit.cover,
-        loadingBuilder: (context, child, loadingProgress) {
-          if (loadingProgress == null) return child;
-          // Show a small activity indicator while loading
-          return Center(
-            child: CupertinoActivityIndicator(
-              radius: radius * 0.4,
-            ), // Smaller indicator
-          );
-        },
-        errorBuilder: (context, error, stackTrace) {
-          // If image fails to load, show fallback
-          return _buildFallbackContent();
-        },
-      );
-    } else {
-      // If no image URL, directly show fallback
-      content = _buildFallbackContent();
-    }
-
-    return Container(
-      width: radius * 2,
-      height: radius * 2,
-      decoration: BoxDecoration(color: backgroundColor, shape: BoxShape.circle),
-      clipBehavior:
-          Clip.antiAlias, // Ensures the child (image or fallback) is clipped to the circle
-      child: content,
-    );
-  }
-
-  /// Builds the fallback content (text or icon) to be displayed inside the avatar.
-  Widget _buildFallbackContent() {
-    // Prioritize fallbackText
-    if (fallbackText != null && fallbackText!.isNotEmpty) {
-      String displayText = fallbackText!.trim();
-      if (displayText.length > 2) {
-        displayText = displayText.substring(0, 2);
-      }
-      displayText = displayText.toUpperCase();
-
-      return Center(
-        child: Text(
-          displayText,
-          style:
-              textStyle ??
-              AppTextStyles.footnote.copyWith(
-                // Using footnote as a base style
-                color: foregroundColor,
-                fontSize: radius * 0.7, // Scaled font size
-                fontWeight: FontWeight.w500, // Slightly bolder for initials
-              ),
-          textAlign: TextAlign.center,
-        ),
-      );
-    }
-    // Then fallbackIcon
-    else if (fallbackIcon != null) {
-      return Center(
-        child: Icon(
-          fallbackIcon,
-          color: foregroundColor,
-          size: radius, // Icon size scaled to radius
-        ),
-      );
-    }
-    // Default fallback if nothing else is provided
-    else {
-      return Center(
-        child: Icon(
-          CupertinoIcons.person_fill, // Default icon
-          color: foregroundColor,
-          size: radius, // Icon size scaled to radius
-        ),
-      );
-    }
-  }
-}
diff --git a/lib/components/display/app_calendar.dart b/lib/components/display/app_calendar.dart
deleted file mode 100644
index b8794ae..0000000
--- a/lib/components/display/app_calendar.dart
+++ /dev/null
@@ -1,435 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-// Helper functions (file-level)
-String _getMonthName(int month) {
-  const monthNames = [
-    'January',
-    'February',
-    'March',
-    'April',
-    'May',
-    'June',
-    'July',
-    'August',
-    'September',
-    'October',
-    'November',
-    'December',
-  ];
-  if (month < 1 || month > 12) {
-    return ''; // Should not happen with DateTime.month
-  }
-
-  return monthNames[month - 1];
-}
-
-int _customGetDaysInMonth(int year, int month) {
-  if (month == DateTime.february) {
-    final bool isLeapYear =
-        (year % 4 == 0) && (year % 100 != 0) || (year % 400 == 0);
-    return isLeapYear ? 29 : 28;
-  }
-  // Note: Dart's DateTime.month is 1-indexed (January is 1).
-  // This list is 0-indexed for months.
-  const List<int> daysInMonthList = <int>[
-    31,
-    -1,
-    31,
-    30,
-    31,
-    30,
-    31,
-    31,
-    30,
-    31,
-    30,
-    31,
-  ];
-  return daysInMonthList[month - 1];
-}
-
-bool _customIsSameDay(DateTime? a, DateTime? b) {
-  if (a == null || b == null) {
-    return false;
-  }
-  return a.year == b.year && a.month == b.month && a.day == b.day;
-}
-
-class AppCalendar extends StatefulWidget {
-  final DateTime? initialDate;
-  final DateTime? selectedDate;
-  final ValueChanged<DateTime> onDateSelected;
-  final DateTime? firstDate;
-  final DateTime? lastDate;
-
-  const AppCalendar({
-    super.key,
-    this.initialDate,
-    this.selectedDate,
-    required this.onDateSelected,
-    this.firstDate,
-    this.lastDate,
-  });
-
-  @override
-  State<AppCalendar> createState() => _AppCalendarState();
-}
-
-class _AppCalendarState extends State<AppCalendar> {
-  late DateTime _currentDisplayedMonth;
-  DateTime? _selectedDate;
-
-  @override
-  void initState() {
-    super.initState();
-    _selectedDate = widget.selectedDate;
-    _currentDisplayedMonth =
-        widget.initialDate ?? _selectedDate ?? DateTime.now();
-    // Ensure _currentDisplayedMonth is not before firstDate or after lastDate if they are provided
-    if (widget.firstDate != null &&
-        _currentDisplayedMonth.isBefore(
-          DateTime(widget.firstDate!.year, widget.firstDate!.month, 1),
-        )) {
-      _currentDisplayedMonth = DateTime(
-        widget.firstDate!.year,
-        widget.firstDate!.month,
-        1,
-      );
-    }
-    if (widget.lastDate != null &&
-        _currentDisplayedMonth.isAfter(
-          DateTime(widget.lastDate!.year, widget.lastDate!.month, 1),
-        )) {
-      _currentDisplayedMonth = DateTime(
-        widget.lastDate!.year,
-        widget.lastDate!.month,
-        1,
-      );
-    }
-  }
-
-  @override
-  void didUpdateWidget(covariant AppCalendar oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.selectedDate != oldWidget.selectedDate) {
-      setState(() {
-        _selectedDate = widget.selectedDate;
-        // Optionally, update currentDisplayedMonth if selectedDate changes significantly
-        // For now, we keep the current month view unless explicitly navigated
-      });
-    }
-    if (widget.initialDate != oldWidget.initialDate &&
-        widget.initialDate != null) {
-      _currentDisplayedMonth = widget.initialDate!;
-      // Ensure _currentDisplayedMonth is not before firstDate or after lastDate
-      if (widget.firstDate != null &&
-          _currentDisplayedMonth.isBefore(
-            DateTime(widget.firstDate!.year, widget.firstDate!.month, 1),
-          )) {
-        _currentDisplayedMonth = DateTime(
-          widget.firstDate!.year,
-          widget.firstDate!.month,
-          1,
-        );
-      }
-      if (widget.lastDate != null &&
-          _currentDisplayedMonth.isAfter(
-            DateTime(widget.lastDate!.year, widget.lastDate!.month, 1),
-          )) {
-        _currentDisplayedMonth = DateTime(
-          widget.lastDate!.year,
-          widget.lastDate!.month,
-          1,
-        );
-      }
-    }
-  }
-
-  void _changeMonth(int monthIncrement) {
-    setState(() {
-      DateTime newMonth = DateTime(
-        _currentDisplayedMonth.year,
-        _currentDisplayedMonth.month + monthIncrement,
-        1,
-      );
-
-      // Check against firstDate
-      if (widget.firstDate != null) {
-        final firstMonth = DateTime(
-          widget.firstDate!.year,
-          widget.firstDate!.month,
-          1,
-        );
-        if (newMonth.isBefore(firstMonth)) {
-          newMonth = firstMonth;
-        }
-      }
-
-      // Check against lastDate
-      if (widget.lastDate != null) {
-        final lastMonth = DateTime(
-          widget.lastDate!.year,
-          widget.lastDate!.month,
-          1,
-        );
-        // If newMonth is after the month of lastDate
-        if (newMonth.year > lastMonth.year ||
-            (newMonth.year == lastMonth.year &&
-                newMonth.month > lastMonth.month)) {
-          newMonth = lastMonth;
-        }
-      }
-      _currentDisplayedMonth = newMonth;
-    });
-  }
-
-  void _handleDateTap(DateTime date) {
-    // Prevent selecting dates outside the allowed range
-    if (widget.firstDate != null && date.isBefore(widget.firstDate!)) return;
-    if (widget.lastDate != null && date.isAfter(widget.lastDate!)) return;
-
-    setState(() {
-      _selectedDate = date;
-    });
-    widget.onDateSelected(date);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      padding: const EdgeInsets.all(
-        AppDimensions
-            .radiusLarge, // Changed from spacingM to radiusLarge (12px for p-3)
-      ),
-      decoration: BoxDecoration(
-        color: CupertinoTheme.of(context).scaffoldBackgroundColor,
-        borderRadius: BorderRadius.circular(
-          AppDimensions.radiusMedium,
-        ), // Corrected: borderRadiusMedium -> radiusMedium
-        border: Border.all(
-          color: AppColors.borderGray,
-          width: 1,
-        ), // Corrected: grey300 -> borderGray
-      ),
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        children: [
-          _buildHeader(context),
-          const SizedBox(height: AppDimensions.spacingS),
-          _buildWeekdaysHeader(context),
-          const SizedBox(height: AppDimensions.spacingS),
-          _buildDaysGrid(context),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildHeader(BuildContext context) {
-    // Determine if previous/next buttons should be enabled
-    bool canGoBack = true;
-    if (widget.firstDate != null) {
-      final firstCalendarMonth = DateTime(
-        widget.firstDate!.year,
-        widget.firstDate!.month,
-        1,
-      );
-      if (!_currentDisplayedMonth.isAfter(firstCalendarMonth)) {
-        canGoBack = false;
-      }
-    }
-
-    bool canGoForward = true;
-    if (widget.lastDate != null) {
-      final lastCalendarMonth = DateTime(
-        widget.lastDate!.year,
-        widget.lastDate!.month,
-        1,
-      );
-      if (!DateTime(
-        _currentDisplayedMonth.year,
-        _currentDisplayedMonth.month + 1,
-        1,
-      ).isBefore(
-        DateTime(lastCalendarMonth.year, lastCalendarMonth.month + 1, 1),
-      )) {
-        canGoForward = false;
-      }
-    }
-
-    return Row(
-      mainAxisAlignment: MainAxisAlignment.spaceBetween,
-      children: [
-        CupertinoButton(
-          padding: EdgeInsets.zero,
-          onPressed: canGoBack ? () => _changeMonth(-1) : null,
-          child: Icon(
-            CupertinoIcons.chevron_left,
-            color: canGoBack ? AppColors.primaryBlue : AppColors.mediumGray,
-            size: AppDimensions.iconSizeSmall, // Added icon size
-          ),
-        ),
-        Text(
-          "${_getMonthName(_currentDisplayedMonth.month)} ${_currentDisplayedMonth.year}",
-          style: AppTextStyles.formLabel.copyWith(
-            color: AppColors.foregroundDark,
-          ), // Changed from title3 to formLabel
-        ),
-        CupertinoButton(
-          padding: EdgeInsets.zero,
-          onPressed: canGoForward ? () => _changeMonth(1) : null,
-          child: Icon(
-            CupertinoIcons.chevron_right,
-            color: canGoForward ? AppColors.primaryBlue : AppColors.mediumGray,
-            size: AppDimensions.iconSizeSmall, // Added icon size
-          ),
-        ),
-      ],
-    );
-  }
-
-  Widget _buildWeekdaysHeader(BuildContext context) {
-    // Using a fixed list of weekday abbreviations
-    const dayHeaders = ['M', 'T', 'W', 'T', 'F', 'S', 'S']; // Standard Mon-Sun
-
-    return GridView.builder(
-      shrinkWrap: true,
-      physics: const NeverScrollableScrollPhysics(),
-      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
-        crossAxisCount: 7,
-      ),
-      itemCount: 7,
-      itemBuilder: (context, index) {
-        return Center(
-          child: Text(
-            dayHeaders[index],
-            style: AppTextStyles.footnote.copyWith(
-              color: AppColors.mediumGray,
-            ), // Corrected: caption(context) -> footnote, textSecondary -> mediumGray
-          ),
-        );
-      },
-    );
-  }
-
-  Widget _buildDaysGrid(BuildContext context) {
-    final daysInMonth = _customGetDaysInMonth(
-      _currentDisplayedMonth.year,
-      _currentDisplayedMonth.month,
-    );
-    final firstDayOfMonth = DateTime(
-      _currentDisplayedMonth.year,
-      _currentDisplayedMonth.month,
-      1,
-    );
-    // Weekday is 1 (Monday) to 7 (Sunday). We want 0 (Monday) to 6 (Sunday) for offset.
-    int startingDayOffset = firstDayOfMonth.weekday - 1;
-
-    List<DateTime?> dayTiles = List.generate(
-      startingDayOffset,
-      (index) => null,
-    ); // Add nulls for empty leading days
-
-    for (int i = 0; i < daysInMonth; i++) {
-      dayTiles.add(
-        DateTime(
-          _currentDisplayedMonth.year,
-          _currentDisplayedMonth.month,
-          i + 1,
-        ),
-      );
-    }
-
-    // Add trailing empty cells to make the grid complete (total cells multiple of 7)
-    int remainingCells = (7 - (dayTiles.length % 7)) % 7;
-    for (int i = 0; i < remainingCells; i++) {
-      dayTiles.add(null);
-    }
-
-    // Calculate approximate cell size for h-9 w-9 (36px) effect
-    // This is more of a guideline as GridView handles actual sizing.
-    // We ensure the container inside tries to be square.
-    // final double approximateCellSize = AppDimensions.spacingXl; // 32px, spacingXxl is 48px. Let's aim for something around 36px.
-    // AppDimensions.buttonHeightSmall (32px) or make a new const if 36px is strict.
-    // For now, let GridView distribute space and use padding/alignment.
-
-    return GridView.builder(
-      shrinkWrap: true,
-      physics: const NeverScrollableScrollPhysics(),
-      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
-        crossAxisCount: 7,
-        mainAxisSpacing: AppDimensions.spacingXs,
-        crossAxisSpacing: AppDimensions.spacingXs,
-        // childAspectRatio: 1, // To make cells square if desired, might affect overall layout
-      ),
-      itemCount: dayTiles.length,
-      itemBuilder: (context, index) {
-        final DateTime? tileDate = dayTiles[index];
-        if (tileDate == null) {
-          return Container(); // Empty cell
-        }
-
-        final bool isSelected =
-            _selectedDate != null && _customIsSameDay(tileDate, _selectedDate);
-        final bool isToday = _customIsSameDay(tileDate, DateTime.now());
-
-        bool isDisabled = false;
-        if (widget.firstDate != null && tileDate.isBefore(widget.firstDate!)) {
-          isDisabled = true;
-        }
-        if (widget.lastDate != null && tileDate.isAfter(widget.lastDate!)) {
-          isDisabled = true;
-        }
-
-        BoxDecoration decoration;
-        TextStyle textStyle = AppTextStyles.body.copyWith(
-          color: AppColors.foregroundDark,
-        ); // Default text color
-
-        if (isSelected && !isDisabled) {
-          decoration = BoxDecoration(
-            color: AppColors.primaryBlue,
-            shape: BoxShape.circle,
-          );
-          textStyle = AppTextStyles.body.copyWith(color: CupertinoColors.white);
-        } else if (isToday && !isDisabled) {
-          // Changed from border to background for "today" state
-          decoration = BoxDecoration(
-            color: AppColors.primaryBlue.withValues(
-              alpha: 0.15,
-            ), // Subtle background for today
-            shape: BoxShape.circle,
-          );
-          textStyle = AppTextStyles.body.copyWith(
-            color: AppColors.primaryBlue,
-          ); // Text color for today
-        } else if (isDisabled) {
-          decoration = const BoxDecoration();
-          textStyle = AppTextStyles.body.copyWith(
-            color: AppColors.mediumGray.withValues(alpha: 0.5),
-          );
-        } else {
-          decoration = const BoxDecoration();
-          // textStyle is already set to default
-        }
-
-        return GestureDetector(
-          onTap: isDisabled ? null : () => _handleDateTap(tileDate),
-          child: Container(
-            alignment: Alignment.center,
-            decoration: decoration,
-            // To encourage a square-like shape for h-9 w-9, ensure the container can expand
-            // and the text is centered. GridView's crossAxisCount handles distribution.
-            // If a fixed size is strictly needed, width/height properties could be used here,
-            // but might conflict with GridView's flexible sizing.
-            // For example: height: approximateCellSize, width: approximateCellSize,
-            child: Text('${tileDate.day}', style: textStyle),
-          ),
-        );
-      },
-    );
-  }
-}
diff --git a/lib/components/display/app_table.dart b/lib/components/display/app_table.dart
deleted file mode 100644
index 50c22e6..0000000
--- a/lib/components/display/app_table.dart
+++ /dev/null
@@ -1,212 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// Represents a single column definition for the AppTable.
-class AppTableColumn {
-  final String title;
-  final String dataKey; // Key to access data in the row map
-  final double? width; // Optional fixed width for the column
-  final Alignment alignment;
-  final TextAlign textAlign;
-
-  AppTableColumn({
-    required this.title,
-    required this.dataKey,
-    this.width,
-    this.alignment = Alignment.centerLeft,
-    this.textAlign = TextAlign.left,
-  });
-}
-
-/// A customizable data table with a Cupertino-inspired design.
-class AppTable<T> extends StatelessWidget {
-  final List<AppTableColumn> columns;
-  final List<Map<String, dynamic>> data; // Each map represents a row
-  final Widget? caption;
-  final BoxDecoration? headerDecoration;
-  final BoxDecoration? rowDecoration;
-  final BoxDecoration? cellDecoration;
-  final TextStyle? headerTextStyle;
-  final TextStyle? cellTextStyle;
-  final double headerHeight;
-  final double rowHeight;
-  final EdgeInsets cellPadding;
-
-  const AppTable({
-    super.key,
-    required this.columns,
-    required this.data,
-    this.caption,
-    this.headerDecoration,
-    this.rowDecoration,
-    this.cellDecoration,
-    this.headerTextStyle,
-    this.cellTextStyle,
-    this.headerHeight = 48.0,
-    this.rowHeight = 48.0,
-    this.cellPadding = const EdgeInsets.symmetric(
-      horizontal: AppDimensions.spacingM,
-      vertical: AppDimensions.spacingS,
-    ),
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final effectiveHeaderTextStyle =
-        headerTextStyle ??
-        AppTextStyles.bodyBold.copyWith(color: AppColors.mediumGray);
-    final effectiveCellTextStyle =
-        cellTextStyle ??
-        AppTextStyles.body.copyWith(color: AppColors.foregroundDark);
-    final effectiveHeaderDecoration =
-        headerDecoration ??
-        BoxDecoration(
-          border: Border(
-            bottom: BorderSide(color: AppColors.borderGray, width: 0.5),
-          ),
-        );
-    final effectiveRowDecoration =
-        rowDecoration ??
-        BoxDecoration(
-          border: Border(
-            bottom: BorderSide(color: AppColors.borderGray, width: 0.5),
-          ),
-        );
-
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.stretch,
-      children: [
-        // Header Row
-        Container(
-          height: headerHeight,
-          decoration: effectiveHeaderDecoration,
-          child: Row(
-            children:
-                columns.map((col) {
-                  Widget child = Padding(
-                    padding: cellPadding,
-                    child: Text(
-                      col.title,
-                      style: effectiveHeaderTextStyle,
-                      textAlign: col.textAlign,
-                      overflow: TextOverflow.ellipsis,
-                    ),
-                  );
-                  if (col.width != null) {
-                    return SizedBox(
-                      width: col.width,
-                      child: Align(alignment: col.alignment, child: child),
-                    );
-                  }
-                  return Expanded(
-                    child: Align(alignment: col.alignment, child: child),
-                  );
-                }).toList(),
-          ),
-        ),
-        // Data Rows
-        if (data.isEmpty)
-          Container(
-            height: rowHeight * 3, // Show some space if no data
-            alignment: Alignment.center,
-            child: Text(
-              'No data available',
-              style: AppTextStyles.body.copyWith(color: AppColors.mediumGray),
-            ),
-          )
-        else
-          ListView.builder(
-            shrinkWrap: true,
-            physics:
-                const NeverScrollableScrollPhysics(), // If the table is inside another scrollable
-            itemCount: data.length,
-            itemBuilder: (context, rowIndex) {
-              final rowData = data[rowIndex];
-              return Container(
-                height: rowHeight,
-                decoration: effectiveRowDecoration,
-                child: Row(
-                  children:
-                      columns.map((col) {
-                        Widget cellContent = Text(
-                          rowData[col.dataKey]?.toString() ?? '',
-                          style: effectiveCellTextStyle,
-                          textAlign: col.textAlign,
-                          overflow: TextOverflow.ellipsis,
-                        );
-
-                        Widget child = Padding(
-                          padding: cellPadding,
-                          child: cellContent,
-                        );
-
-                        if (col.width != null) {
-                          return SizedBox(
-                            width: col.width,
-                            child: Align(
-                              alignment: col.alignment,
-                              child: child,
-                            ),
-                          );
-                        }
-                        return Expanded(
-                          child: Align(alignment: col.alignment, child: child),
-                        );
-                      }).toList(),
-                ),
-              );
-            },
-          ),
-        // Caption
-        if (caption != null)
-          Padding(
-            padding: const EdgeInsets.only(top: AppDimensions.spacingM),
-            child: DefaultTextStyle(
-              style: AppTextStyles.caption.copyWith(
-                color: AppColors.mediumGray,
-              ),
-              child: caption!,
-            ),
-          ),
-      ],
-    );
-  }
-}
-
-// Example Usage (can be placed in a different file or a storybook):
-/*
-class MyTablePage extends StatelessWidget {
-  const MyTablePage({super.key});
-
-  @override
-  Widget build(BuildContext context) {
-    final List<AppTableColumn> columns = [
-      AppTableColumn(title: 'ID', dataKey: 'id', width: 80),
-      AppTableColumn(title: 'Name', dataKey: 'name'),
-      AppTableColumn(title: 'Role', dataKey: 'role', alignment: Alignment.centerRight, textAlign: TextAlign.right),
-    ];
-
-    final List<Map<String, dynamic>> data = [
-      {'id': 1, 'name': 'John Doe', 'role': 'Developer'},
-      {'id': 2, 'name': 'Jane Smith', 'role': 'Designer'},
-      {'id': 3, 'name': 'Peter Jones', 'role': 'Manager'},
-    ];
-
-    return CupertinoPageScaffold(
-      navigationBar: CupertinoNavigationBar(middle: Text('Table Example')),
-      child: SafeArea(
-        child: SingleChildScrollView(
-          padding: const EdgeInsets.all(AppDimensions.spacingL),
-          child: AppTable(
-            columns: columns,
-            data: data,
-            caption: Text('List of team members.'),
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/display/badge.dart b/lib/components/display/badge.dart
index 929f842..0ed0aef 100644
--- a/lib/components/display/badge.dart
+++ b/lib/components/display/badge.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_text_styles.dart';
 import '../../theme/app_dimensions.dart';
diff --git a/lib/components/feedback/app_alert.dart b/lib/components/feedback/app_alert.dart
deleted file mode 100644
index 071c7e0..0000000
--- a/lib/components/feedback/app_alert.dart
+++ /dev/null
@@ -1,203 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-enum AppAlertType { info, success, warning, error }
-
-class AppAlert extends StatelessWidget {
-  final String? title;
-  final String message;
-  final AppAlertType type;
-  final VoidCallback? onDismiss;
-  final Widget? action;
-
-  const AppAlert({
-    super.key,
-    this.title,
-    required this.message,
-    this.type = AppAlertType.info,
-    this.onDismiss,
-    this.action,
-  });
-
-  Color _getBackgroundColor(BuildContext context) {
-    final bool isDarkMode =
-        CupertinoTheme.of(context).brightness == Brightness.dark;
-    switch (type) {
-      case AppAlertType.success:
-        return isDarkMode
-            ? AppColors.successGreen.withValues(alpha: 0.3)
-            : AppColors.successGreen.withValues(alpha: 0.15);
-      case AppAlertType.warning:
-        return isDarkMode
-            ? AppColors.warningOrange.withValues(alpha: 0.3)
-            : AppColors.warningOrange.withValues(alpha: 0.15);
-      case AppAlertType.error:
-        return isDarkMode
-            ? AppColors.destructiveRed.withValues(alpha: 0.3)
-            : AppColors.destructiveRed.withValues(alpha: 0.15);
-      case AppAlertType.info:
-        return CupertinoColors
-            .secondarySystemFill; // Standard fill color for info
-    }
-  }
-
-  Color _getForegroundColor(BuildContext context) {
-    final bool isDarkMode =
-        CupertinoTheme.of(context).brightness == Brightness.dark;
-    switch (type) {
-      case AppAlertType.success:
-        return isDarkMode ? AppColors.successGreen : AppColors.successGreen;
-      case AppAlertType.warning:
-        return isDarkMode ? AppColors.warningOrange : AppColors.warningOrange;
-      case AppAlertType.error:
-        return isDarkMode ? AppColors.destructiveRed : AppColors.destructiveRed;
-      case AppAlertType.info:
-        return AppColors.foregroundDark;
-    }
-  }
-
-  IconData _getIcon() {
-    switch (type) {
-      case AppAlertType.success:
-        return CupertinoIcons.checkmark_circle_fill;
-      case AppAlertType.warning:
-        return CupertinoIcons.exclamationmark_triangle_fill;
-      case AppAlertType.error:
-        return CupertinoIcons.xmark_circle_fill;
-      case AppAlertType.info:
-        return CupertinoIcons.info_circle_fill;
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final Color backgroundColor = _getBackgroundColor(context);
-    final Color foregroundColor = _getForegroundColor(context);
-    final IconData iconData = _getIcon();
-
-    return Container(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      decoration: BoxDecoration(
-        color: backgroundColor,
-        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-        border: Border.all(
-          color:
-              type == AppAlertType.info
-                  ? CupertinoColors
-                      .systemGrey3 // Subtle border for info
-                  : foregroundColor.withValues(alpha: 0.5),
-          width: 0.5,
-        ),
-      ),
-      child: Row(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          Padding(
-            padding: const EdgeInsets.only(
-              right: AppDimensions.spacingS,
-              top: AppDimensions.spacingXs / 2,
-            ), // Changed spacingXxs
-            child: Icon(
-              iconData,
-              color: foregroundColor,
-              size: AppDimensions.iconSizeMedium,
-            ),
-          ),
-          Expanded(
-            child: Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
-              mainAxisSize: MainAxisSize.min,
-              children: [
-                if (title != null && title!.isNotEmpty)
-                  Text(
-                    title!,
-                    style: AppTextStyles.bodyBold.copyWith(
-                      color: AppColors.foregroundDark,
-                    ),
-                  ),
-                if (title != null && title!.isNotEmpty && message.isNotEmpty)
-                  const SizedBox(
-                    height: AppDimensions.spacingXs / 2,
-                  ), // Changed spacingXxs
-                Text(
-                  message,
-                  style: AppTextStyles.bodySmall.copyWith(
-                    color: AppColors.foregroundDark.withValues(alpha: 0.8),
-                  ),
-                ),
-                if (action != null)
-                  Padding(
-                    padding: const EdgeInsets.only(top: AppDimensions.spacingS),
-                    child: action,
-                  ),
-              ],
-            ),
-          ),
-          if (onDismiss != null)
-            CupertinoButton(
-              padding: const EdgeInsets.all(
-                AppDimensions.spacingXs / 2,
-              ), // Smaller padding for dismiss
-              minSize: 0,
-              onPressed: onDismiss,
-              child: Icon(
-                CupertinoIcons.xmark,
-                color: AppColors.mediumGray,
-                size: AppDimensions.iconSizeSmall,
-              ),
-            ),
-        ],
-      ),
-    );
-  }
-}
-
-// Example Usage:
-/*
-Column(
-  children: [
-    AppAlert(
-      title: 'Update Available',
-      message: 'A new version of the application is available. Please update for the latest features and bug fixes.',
-      type: AppAlertType.info,
-      onDismiss: () { print('Info dismissed'); },
-      action: CupertinoButton.filled(
-        child: Text('Update Now'),
-        onPressed: () { print('Update Now pressed'); },
-        padding: EdgeInsets.symmetric(horizontal: AppDimensions.spacingM, vertical: AppDimensions.spacingXs),
-      ),
-    ),
-    SizedBox(height: AppDimensions.spacingM),
-    AppAlert(
-      title: 'Success!',
-      message: 'Your profile has been updated successfully.',
-      type: AppAlertType.success,
-      onDismiss: () { print('Success dismissed'); },
-    ),
-    SizedBox(height: AppDimensions.spacingM),
-    AppAlert(
-      title: 'Warning: Low Storage',
-      message: 'Your device is running low on storage. Consider freeing up some space.',
-      type: AppAlertType.warning,
-      onDismiss: () { print('Warning dismissed'); },
-    ),
-    SizedBox(height: AppDimensions.spacingM),
-    AppAlert(
-      message: 'Failed to connect to the server. Please check your internet connection and try again.',
-      type: AppAlertType.error,
-      onDismiss: () { print('Error dismissed'); },
-       action: CupertinoButton(
-        child: Text('Retry'),
-        onPressed: () { print('Retry pressed'); },
-      ),
-    ),
-     SizedBox(height: AppDimensions.spacingM),
-    AppAlert(
-      message: 'This is a simple informational message without a title or dismiss button.',
-      type: AppAlertType.info,
-    ),
-  ],
-)
-*/
diff --git a/lib/components/feedback/app_context_menu.dart b/lib/components/feedback/app_context_menu.dart
deleted file mode 100644
index ede0641..0000000
--- a/lib/components/feedback/app_context_menu.dart
+++ /dev/null
@@ -1,168 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// Defines an item in the AppContextMenu.
-class AppContextMenuItem {
-  final String label;
-  final IconData? icon;
-  final VoidCallback? onSelected;
-  final bool isSeparator;
-  final String? shortcutText; // For future use, like in desktop apps
-  final bool enabled;
-
-  AppContextMenuItem({
-    required this.label,
-    this.icon,
-    this.onSelected,
-    this.shortcutText,
-    this.enabled = true,
-  }) : isSeparator = false;
-
-  AppContextMenuItem.separator()
-    : label = '',
-      icon = null,
-      onSelected = null,
-      shortcutText = null,
-      enabled = false,
-      isSeparator = true;
-}
-
-/// A widget that provides a context menu for its child.
-/// The menu is typically triggered by a long press.
-class AppContextMenuArea extends StatelessWidget {
-  final Widget child;
-  final List<AppContextMenuItem> menuItems;
-  final Offset offset; // Offset for the menu position relative to the tap.
-
-  const AppContextMenuArea({
-    super.key,
-    required this.child,
-    required this.menuItems,
-    this.offset = Offset.zero,
-  });
-
-  void _showContextMenu(BuildContext context, TapDownDetails details) {
-    showCupertinoModalPopup<void>(
-      context: context,
-      builder:
-          (BuildContext context) => CupertinoActionSheet(
-            actions:
-                menuItems
-                    .where(
-                      (item) =>
-                          !item.isSeparator &&
-                          item.enabled &&
-                          item.onSelected != null,
-                    )
-                    .map((item) {
-                      return CupertinoActionSheetAction(
-                        onPressed: () {
-                          Navigator.pop(context);
-                          item.onSelected!();
-                        },
-                        child: Row(
-                          children: [
-                            if (item.icon != null) ...[
-                              Icon(
-                                item.icon,
-                                size: AppDimensions.iconSizeSmall,
-                                color:
-                                    item.enabled
-                                        ? AppColors.foregroundDark
-                                        : AppColors.mediumGray,
-                              ),
-                              const SizedBox(width: AppDimensions.spacingS),
-                            ],
-                            Expanded(
-                              child: Text(
-                                item.label,
-                                style:
-                                    item.enabled
-                                        ? AppTextStyles.body.copyWith(
-                                          color: AppColors.foregroundDark,
-                                        )
-                                        : AppTextStyles.body.copyWith(
-                                          color: AppColors.mediumGray,
-                                        ),
-                              ),
-                            ),
-                            if (item.shortcutText != null) ...[
-                              const SizedBox(width: AppDimensions.spacingL),
-                              Text(
-                                item.shortcutText!,
-                                style: AppTextStyles.caption.copyWith(
-                                  color: AppColors.mediumGray,
-                                ),
-                              ),
-                            ],
-                          ],
-                        ),
-                      );
-                    })
-                    .toList(),
-            cancelButton: CupertinoActionSheetAction(
-              onPressed: () => Navigator.pop(context),
-              child: Text(
-                'Cancel',
-                style: AppTextStyles.body.copyWith(
-                  color: AppColors.primaryBlue,
-                ),
-              ),
-            ),
-          ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(
-      onTapDown: (details) {
-        // Potentially use this for right-click on web/desktop in the future
-      },
-      onLongPressStart: (details) {
-        _showContextMenu(
-          context,
-          TapDownDetails(globalPosition: details.globalPosition),
-        );
-      },
-      child: child,
-    );
-  }
-}
-
-// Example Usage:
-/*
-class MyHomePage extends StatelessWidget {
-  const MyHomePage({super.key});
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Context Menu Demo'),
-      ),
-      child: Center(
-        child: AppContextMenuArea(
-          menuItems: [
-            AppContextMenuItem(label: 'Copy', icon: CupertinoIcons.doc_on_clipboard, onSelected: () => print('Copied')),
-            AppContextMenuItem(label: 'Cut', icon: CupertinoIcons.scissors, onSelected: () => print('Cut')),
-            AppContextMenuItem.separator(),
-            AppContextMenuItem(label: 'Paste', icon: CupertinoIcons.doc_on_doc, onSelected: () => print('Pasted'), enabled: false),
-            AppContextMenuItem(label: 'Select All', onSelected: () => print('Selected All'), shortcutText: '⌘A'),
-          ],
-          child: Container(
-            padding: const EdgeInsets.all(AppDimensions.spacingL),
-            decoration: BoxDecoration(
-              color: AppColors.lightGray,
-              borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-            ),
-            child: const Text('Long press me!'),
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/feedback/app_hover_card.dart b/lib/components/feedback/app_hover_card.dart
deleted file mode 100644
index 3532286..0000000
--- a/lib/components/feedback/app_hover_card.dart
+++ /dev/null
@@ -1,309 +0,0 @@
-import 'dart:async';
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A card that appears when hovering over a trigger widget.
-///
-/// providing hover-triggered popup content.
-class AppHoverCard extends StatefulWidget {
-  /// Creates a hover card.
-  const AppHoverCard({
-    super.key,
-    required this.trigger,
-    required this.content,
-    this.hoverDelay = const Duration(milliseconds: 300),
-    this.hideDelay = const Duration(milliseconds: 150),
-    this.offset = const Offset(0, 8),
-    this.preferredPosition = AppHoverCardPosition.bottom,
-    this.maxWidth = 300.0,
-    this.backgroundColor,
-    this.borderRadius,
-  });
-
-  /// The widget that triggers the hover card when hovered.
-  final Widget trigger;
-
-  /// The content to display in the hover card.
-  final Widget content;
-
-  /// Delay before showing the hover card.
-  final Duration hoverDelay;
-
-  /// Delay before hiding the hover card.
-  final Duration hideDelay;
-
-  /// Offset from the trigger widget.
-  final Offset offset;
-
-  /// Preferred position relative to the trigger.
-  final AppHoverCardPosition preferredPosition;
-
-  /// Maximum width of the hover card.
-  final double maxWidth;
-
-  /// Background color of the hover card.
-  final Color? backgroundColor;
-
-  /// Border radius of the hover card.
-  final BorderRadius? borderRadius;
-
-  @override
-  State<AppHoverCard> createState() => _AppHoverCardState();
-}
-
-/// Position options for the hover card.
-enum AppHoverCardPosition { top, bottom, left, right }
-
-class _AppHoverCardState extends State<AppHoverCard>
-    with TickerProviderStateMixin {
-  OverlayEntry? _overlayEntry;
-  late AnimationController _animationController;
-  late Animation<double> _fadeAnimation;
-  late Animation<double> _scaleAnimation;
-  bool _isHovered = false;
-  Timer? _showTimer;
-  Timer? _hideTimer;
-  final GlobalKey _triggerKey = GlobalKey();
-
-  @override
-  void initState() {
-    super.initState();
-    _animationController = AnimationController(
-      duration: const Duration(milliseconds: 200),
-      vsync: this,
-    );
-
-    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
-      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
-    );
-
-    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
-      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
-    );
-  }
-
-  @override
-  void dispose() {
-    _showTimer?.cancel();
-    _hideTimer?.cancel();
-    _animationController.dispose();
-    _removeOverlay();
-    super.dispose();
-  }
-
-  void _onHoverEnter() {
-    _hideTimer?.cancel();
-
-    if (!_isHovered) {
-      _isHovered = true;
-      _showTimer = Timer(widget.hoverDelay, _showHoverCard);
-    }
-  }
-
-  void _onHoverExit() {
-    _showTimer?.cancel();
-
-    if (_isHovered) {
-      _isHovered = false;
-      _hideTimer = Timer(widget.hideDelay, _hideHoverCard);
-    }
-  }
-
-  void _showHoverCard() {
-    if (!_isHovered || _overlayEntry != null) return;
-
-    _overlayEntry = _createOverlayEntry();
-    Overlay.of(context).insert(_overlayEntry!);
-    _animationController.forward();
-  }
-
-  void _hideHoverCard() {
-    if (_isHovered || _overlayEntry == null) return;
-
-    _animationController.reverse().then((_) {
-      _removeOverlay();
-    });
-  }
-
-  void _removeOverlay() {
-    _overlayEntry?.remove();
-    _overlayEntry = null;
-  }
-
-  OverlayEntry _createOverlayEntry() {
-    final RenderBox? renderBox =
-        _triggerKey.currentContext?.findRenderObject() as RenderBox?;
-    if (renderBox == null) {
-      return OverlayEntry(builder: (_) => const SizedBox.shrink());
-    }
-
-    final triggerSize = renderBox.size;
-    final triggerPosition = renderBox.localToGlobal(Offset.zero);
-    final cardPosition = _calculateCardPosition(triggerPosition, triggerSize);
-
-    return OverlayEntry(
-      builder:
-          (context) => Positioned(
-            left: cardPosition.dx,
-            top: cardPosition.dy,
-            child: MouseRegion(
-              onEnter: (_) => _onHoverEnter(),
-              onExit: (_) => _onHoverExit(),
-              child: AnimatedBuilder(
-                animation: _animationController,
-                builder:
-                    (context, child) => Transform.scale(
-                      scale: _scaleAnimation.value,
-                      child: Opacity(
-                        opacity: _fadeAnimation.value,
-                        child: Container(
-                          constraints: BoxConstraints(
-                            maxWidth: widget.maxWidth,
-                          ),
-                          decoration: BoxDecoration(
-                            color:
-                                widget.backgroundColor ??
-                                AppColors.backgroundWhite,
-                            borderRadius:
-                                widget.borderRadius ??
-                                BorderRadius.circular(
-                                  AppDimensions.radiusMedium,
-                                ),
-                            border: Border.all(color: AppColors.borderGray),
-                            boxShadow: [
-                              BoxShadow(
-                                color: CupertinoColors.black.withValues(
-                                  alpha: 0.1,
-                                ),
-                                blurRadius: 10,
-                                offset: const Offset(0, 4),
-                              ),
-                            ],
-                          ),
-                          child: widget.content,
-                        ),
-                      ),
-                    ),
-              ),
-            ),
-          ),
-    );
-  }
-
-  Offset _calculateCardPosition(Offset triggerPosition, Size triggerSize) {
-    final screenSize = MediaQuery.of(context).size;
-    double x = triggerPosition.dx;
-    double y = triggerPosition.dy;
-
-    switch (widget.preferredPosition) {
-      case AppHoverCardPosition.top:
-        x += triggerSize.width / 2 - (widget.maxWidth / 2);
-        y -= widget.offset.dy;
-        break;
-      case AppHoverCardPosition.bottom:
-        x += triggerSize.width / 2 - (widget.maxWidth / 2);
-        y += triggerSize.height + widget.offset.dy;
-        break;
-      case AppHoverCardPosition.left:
-        x -= widget.maxWidth + widget.offset.dx;
-        y += triggerSize.height / 2;
-        break;
-      case AppHoverCardPosition.right:
-        x += triggerSize.width + widget.offset.dx;
-        y += triggerSize.height / 2;
-        break;
-    }
-
-    // Ensure the card stays within screen bounds
-    x = x.clamp(
-      AppDimensions.paddingMedium,
-      screenSize.width - widget.maxWidth - AppDimensions.paddingMedium,
-    );
-    y = y.clamp(
-      AppDimensions.paddingMedium,
-      screenSize.height - 200 - AppDimensions.paddingMedium,
-    );
-
-    return Offset(x, y);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return MouseRegion(
-      key: _triggerKey,
-      onEnter: (_) => _onHoverEnter(),
-      onExit: (_) => _onHoverExit(),
-      child: widget.trigger,
-    );
-  }
-}
-
-/// A simple hover card with text content.
-class AppSimpleHoverCard extends StatelessWidget {
-  /// Creates a simple hover card with text.
-  const AppSimpleHoverCard({
-    super.key,
-    required this.trigger,
-    required this.title,
-    this.description,
-    this.hoverDelay = const Duration(milliseconds: 300),
-    this.hideDelay = const Duration(milliseconds: 150),
-    this.preferredPosition = AppHoverCardPosition.bottom,
-  });
-
-  /// The widget that triggers the hover card.
-  final Widget trigger;
-
-  /// The title text to display.
-  final String title;
-
-  /// Optional description text.
-  final String? description;
-
-  /// Delay before showing the hover card.
-  final Duration hoverDelay;
-
-  /// Delay before hiding the hover card.
-  final Duration hideDelay;
-
-  /// Preferred position relative to the trigger.
-  final AppHoverCardPosition preferredPosition;
-
-  @override
-  Widget build(BuildContext context) {
-    return AppHoverCard(
-      trigger: trigger,
-      hoverDelay: hoverDelay,
-      hideDelay: hideDelay,
-      preferredPosition: preferredPosition,
-      content: Padding(
-        padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-        child: Column(
-          mainAxisSize: MainAxisSize.min,
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Text(
-              title,
-              style: const TextStyle(
-                fontSize: 16,
-                fontWeight: FontWeight.w600,
-                color: AppColors.foregroundDark,
-              ),
-            ),
-            if (description != null) ...[
-              const SizedBox(height: AppDimensions.paddingSmall),
-              Text(
-                description!,
-                style: const TextStyle(
-                  fontSize: 14,
-                  color: AppColors.mediumGray,
-                ),
-              ),
-            ],
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/feedback/app_popover.dart b/lib/components/feedback/app_popover.dart
deleted file mode 100644
index a4ab4c0..0000000
--- a/lib/components/feedback/app_popover.dart
+++ /dev/null
@@ -1,382 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// Position options for the popover.
-enum AppPopoverPosition {
-  top,
-  bottom,
-  left,
-  right,
-  topLeft,
-  topRight,
-  bottomLeft,
-  bottomRight,
-}
-
-/// A popover widget that displays content in a floating overlay.
-///
-/// providing positioned popup content that can be triggered by user interaction.
-class AppPopover extends StatefulWidget {
-  /// Creates a popover.
-  const AppPopover({
-    super.key,
-    required this.trigger,
-    required this.content,
-    this.position = AppPopoverPosition.bottom,
-    this.offset = const Offset(0, 8),
-    this.anchorRect,
-    this.backgroundColor,
-    this.borderRadius,
-    this.showArrow = true,
-    this.barrierDismissible = true,
-    this.onDismissed,
-    this.width,
-    this.height,
-    this.constraints,
-  });
-
-  /// The widget that triggers the popover.
-  final Widget trigger;
-
-  /// The content to display in the popover.
-  final Widget content;
-
-  /// Position of the popover relative to the trigger.
-  final AppPopoverPosition position;
-
-  /// Offset from the calculated position.
-  final Offset offset;
-
-  /// Optional bounding rectangle of the trigger (in global coords). If null, popover is centered.
-  final Rect? anchorRect;
-
-  /// Background color of the popover.
-  final Color? backgroundColor;
-
-  /// Border radius of the popover.
-  final BorderRadius? borderRadius;
-
-  /// Whether to show an arrow pointing to the trigger.
-  final bool showArrow;
-
-  /// Whether tapping outside dismisses the popover.
-  final bool barrierDismissible;
-
-  /// Called when the popover is dismissed.
-  final VoidCallback? onDismissed;
-
-  /// Fixed width for the popover.
-  final double? width;
-
-  /// Fixed height for the popover.
-  final double? height;
-
-  /// Constraints for the popover size.
-  final BoxConstraints? constraints;
-
-  /// Shows the popover.
-  static Future<T?> show<T>({
-    required BuildContext context,
-    required Widget trigger,
-    required Widget content,
-    Rect? anchorRect,
-    AppPopoverPosition position = AppPopoverPosition.bottom,
-    Offset offset = const Offset(0, 8),
-    Color? backgroundColor,
-    BorderRadius? borderRadius,
-    bool showArrow = true,
-    bool barrierDismissible = true,
-    VoidCallback? onDismissed,
-    double? width,
-    double? height,
-    BoxConstraints? constraints,
-  }) {
-    return showCupertinoModalPopup<T>(
-      context: context,
-      barrierDismissible: barrierDismissible,
-      barrierColor: CupertinoColors.black.withValues(alpha: 0.1),
-      builder:
-          (BuildContext context) => AppPopover(
-            trigger: trigger,
-            content: content,
-            position: position,
-            offset: offset,
-            anchorRect: anchorRect,
-            backgroundColor: backgroundColor,
-            borderRadius: borderRadius,
-            showArrow: showArrow,
-            barrierDismissible: barrierDismissible,
-            onDismissed: onDismissed,
-            width: width,
-            height: height,
-            constraints: constraints,
-          ),
-    );
-  }
-
-  @override
-  State<AppPopover> createState() => _AppPopoverState();
-}
-
-class _AppPopoverState extends State<AppPopover>
-    with SingleTickerProviderStateMixin {
-  late AnimationController _animationController;
-  late Animation<double> _fadeAnimation;
-  late Animation<double> _scaleAnimation;
-
-  @override
-  void initState() {
-    super.initState();
-    _animationController = AnimationController(
-      duration: const Duration(milliseconds: 200),
-      vsync: this,
-    );
-
-    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
-      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
-    );
-
-    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
-      CurvedAnimation(parent: _animationController, curve: Curves.easeOut),
-    );
-
-    _animationController.forward();
-  }
-
-  @override
-  void dispose() {
-    _animationController.dispose();
-    super.dispose();
-  }
-
-  void _dismiss() {
-    _animationController.reverse().then((_) {
-      widget.onDismissed?.call();
-      Navigator.of(context).pop();
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Stack(
-      children: [
-        // Barrier
-        if (widget.barrierDismissible)
-          Positioned.fill(
-            child: GestureDetector(
-              onTap: _dismiss,
-              child: Container(color: const Color(0x00000000)),
-            ),
-          ),
-
-        // Popover content
-        _AppPopoverPositioned(
-          trigger: widget.trigger,
-          anchorRect: widget.anchorRect,
-          position: widget.position,
-          offset: widget.offset,
-          child: AnimatedBuilder(
-            animation: _animationController,
-            builder:
-                (context, child) => Transform.scale(
-                  scale: _scaleAnimation.value,
-                  child: Opacity(
-                    opacity: _fadeAnimation.value,
-                    child: _AppPopoverContent(
-                      backgroundColor: widget.backgroundColor,
-                      borderRadius: widget.borderRadius,
-                      showArrow: widget.showArrow,
-                      position: widget.position,
-                      width: widget.width,
-                      height: widget.height,
-                      constraints: widget.constraints,
-                      child: widget.content,
-                    ),
-                  ),
-                ),
-          ),
-        ),
-      ],
-    );
-  }
-}
-
-class _AppPopoverPositioned extends StatelessWidget {
-  const _AppPopoverPositioned({
-    required this.trigger,
-    this.anchorRect,
-    required this.position,
-    required this.offset,
-    required this.child,
-  });
-
-  final Widget trigger;
-  final Rect? anchorRect;
-  final AppPopoverPosition position;
-  final Offset offset;
-  final Widget child;
-
-  @override
-  Widget build(BuildContext context) {
-    if (anchorRect == null) {
-      // Fallback center
-      return Center(child: child);
-    }
-
-    final Size screen = MediaQuery.of(context).size;
-    const double margin = 8;
-    double left = anchorRect!.left;
-    double top = anchorRect!.bottom + offset.dy;
-
-    // simplistic only bottom
-    if (left + (child is SizedBox ? (child as SizedBox).width ?? 0 : 240) >
-        screen.width - margin) {
-      left = screen.width - margin - 240;
-    }
-    if (top + 300 > screen.height - margin) {
-      top = anchorRect!.top - 300 - offset.dy;
-    }
-
-    return Positioned(left: left, top: top, child: child);
-  }
-}
-
-class _AppPopoverContent extends StatelessWidget {
-  const _AppPopoverContent({
-    required this.child,
-    this.backgroundColor,
-    this.borderRadius,
-    this.showArrow = true,
-    this.position = AppPopoverPosition.bottom,
-    this.width,
-    this.height,
-    this.constraints,
-  });
-
-  final Widget child;
-  final Color? backgroundColor;
-  final BorderRadius? borderRadius;
-  final bool showArrow;
-  final AppPopoverPosition position;
-  final double? width;
-  final double? height;
-  final BoxConstraints? constraints;
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      width: width,
-      height: height,
-      constraints:
-          constraints ??
-          const BoxConstraints(
-            minWidth: 100,
-            maxWidth: 400,
-            minHeight: 50,
-            maxHeight: 600,
-          ),
-      decoration: BoxDecoration(
-        color: backgroundColor ?? AppColors.backgroundWhite,
-        borderRadius:
-            borderRadius ?? BorderRadius.circular(AppDimensions.radiusMedium),
-        border: Border.all(color: AppColors.borderGray),
-        boxShadow: [
-          BoxShadow(
-            color: CupertinoColors.black.withValues(alpha: 0.1),
-            blurRadius: 15,
-            offset: const Offset(0, 6),
-          ),
-        ],
-      ),
-      child: ClipRRect(
-        borderRadius:
-            borderRadius ?? BorderRadius.circular(AppDimensions.radiusMedium),
-        child: child,
-      ),
-    );
-  }
-}
-
-/// A simple popover with commonly used content structure.
-class AppSimplePopover extends StatelessWidget {
-  /// Creates a simple popover.
-  const AppSimplePopover({
-    super.key,
-    required this.trigger,
-    this.title,
-    this.content,
-    this.actions = const [],
-    this.position = AppPopoverPosition.bottom,
-    this.width = 300,
-  });
-
-  /// The widget that triggers the popover.
-  final Widget trigger;
-
-  /// Optional title for the popover.
-  final String? title;
-
-  /// The main content of the popover.
-  final Widget? content;
-
-  /// Action buttons to display at the bottom.
-  final List<Widget> actions;
-
-  /// Position of the popover.
-  final AppPopoverPosition position;
-
-  /// Width of the popover.
-  final double width;
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(onTap: () => _showPopover(context), child: trigger);
-  }
-
-  void _showPopover(BuildContext context) {
-    AppPopover.show(
-      context: context,
-      trigger: trigger,
-      position: position,
-      width: width,
-      content: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          if (title != null) ...[
-            Padding(
-              padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-              child: Text(
-                title!,
-                style: const TextStyle(
-                  fontSize: 18,
-                  fontWeight: FontWeight.w600,
-                  color: AppColors.foregroundDark,
-                ),
-              ),
-            ),
-            Container(height: 1, color: AppColors.borderGray),
-          ],
-
-          if (content != null)
-            Padding(
-              padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-              child: content!,
-            ),
-
-          if (actions.isNotEmpty) ...[
-            Container(height: 1, color: AppColors.borderGray),
-            Padding(
-              padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-              child: Row(
-                mainAxisAlignment: MainAxisAlignment.end,
-                children: actions,
-              ),
-            ),
-          ],
-        ],
-      ),
-    );
-  }
-}
diff --git a/lib/components/feedback/app_progress_indicator.dart b/lib/components/feedback/app_progress_indicator.dart
deleted file mode 100644
index 299ff00..0000000
--- a/lib/components/feedback/app_progress_indicator.dart
+++ /dev/null
@@ -1,52 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart'; // Added for AppColors
-import '../../theme/app_dimensions.dart';
-
-/// A determinate progress bar, styled to match the application's theme.
-class AppProgressIndicator extends StatelessWidget {
-  /// The current progress value (between 0.0 and 1.0).
-  final double value;
-
-  /// The color of the progress bar.
-  final Color? color;
-
-  /// The background color of the progress bar.
-  final Color? backgroundColor;
-
-  /// The height of the progress bar.
-  final double height;
-
-  /// The border radius of the progress bar.
-  final BorderRadius? borderRadius;
-
-  const AppProgressIndicator({
-    super.key,
-    required this.value,
-    this.color, // Default will be AppColors.primaryBlue
-    this.backgroundColor, // Default will be AppColors.backgroundSecondary
-    this.height = AppDimensions.spacingM, // Mock: h-4 (16px)
-    this.borderRadius,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final effectiveBorderRadius =
-        borderRadius ?? BorderRadius.circular(AppDimensions.radiusFull);
-    // Use AppColors by default, fallback to CupertinoTheme if not provided and AppColors are also null (though unlikely here)
-    final progressColor = color ?? AppColors.primaryBlue;
-    final bgColor = backgroundColor ?? AppColors.backgroundSecondary;
-
-    return ClipRRect(
-      borderRadius: effectiveBorderRadius,
-      child: Container(
-        height: height,
-        color: bgColor,
-        child: FractionallySizedBox(
-          alignment: Alignment.centerLeft,
-          widthFactor: value.clamp(0.0, 1.0),
-          child: Container(color: progressColor),
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/feedback/app_skeleton.dart b/lib/components/feedback/app_skeleton.dart
deleted file mode 100644
index 21b7d00..0000000
--- a/lib/components/feedback/app_skeleton.dart
+++ /dev/null
@@ -1,77 +0,0 @@
-import 'package:flutter/cupertino.dart'; // Ensured Cupertino is used
-import 'package:shimmer/shimmer.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A skeleton loading widget to indicate content is loading.
-class AppSkeleton extends StatelessWidget {
-  final double? width;
-  final double? height;
-  final BoxShape shape;
-  final BorderRadiusGeometry? borderRadius;
-  final Color? baseColor;
-  final Color? highlightColor;
-  final Duration period;
-
-  const AppSkeleton({
-    super.key,
-    this.width,
-    this.height,
-    this.shape = BoxShape.rectangle,
-    this.borderRadius,
-    this.baseColor,
-    this.highlightColor,
-    this.period = const Duration(milliseconds: 1500),
-  });
-
-  /// Creates a rectangular skeleton.
-  const AppSkeleton.rect({
-    super.key,
-    this.width = double.infinity,
-    this.height =
-        AppDimensions.spacingM, // Default height, e.g., for a line of text
-    this.borderRadius,
-    this.baseColor,
-    this.highlightColor,
-    this.period = const Duration(milliseconds: 1500),
-  }) : shape = BoxShape.rectangle;
-
-  /// Creates a circular skeleton.
-  const AppSkeleton.circle({
-    super.key,
-    required double radius,
-    this.baseColor,
-    this.highlightColor,
-    this.period = const Duration(milliseconds: 1500),
-  }) : width = radius * 2,
-       height = radius * 2,
-       shape = BoxShape.circle,
-       borderRadius = null; // borderRadius is ignored for circle
-
-  @override
-  Widget build(BuildContext context) {
-    final effectiveBaseColor =
-        baseColor ?? AppColors.lightGray.withValues(alpha: 0.5);
-    final effectiveHighlightColor =
-        highlightColor ?? AppColors.mediumGray.withValues(alpha: 0.3);
-    final effectiveBorderRadius =
-        (shape == BoxShape.rectangle)
-            ? (borderRadius ?? BorderRadius.circular(AppDimensions.radiusSmall))
-            : null;
-
-    return Shimmer.fromColors(
-      baseColor: effectiveBaseColor,
-      highlightColor: effectiveHighlightColor,
-      period: period,
-      child: Container(
-        width: width,
-        height: height,
-        decoration: BoxDecoration(
-          color: CupertinoColors.white, // Changed from Colors.white
-          shape: shape,
-          borderRadius: effectiveBorderRadius,
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/feedback/app_sonner.dart b/lib/components/feedback/app_sonner.dart
deleted file mode 100644
index 3d39f92..0000000
--- a/lib/components/feedback/app_sonner.dart
+++ /dev/null
@@ -1,414 +0,0 @@
-import 'dart:async';
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// Toast notification types.
-enum AppSonnerType { info, success, warning, error }
-
-/// Position where toasts should appear.
-enum AppSonnerPosition {
-  topLeft,
-  topCenter,
-  topRight,
-  bottomLeft,
-  bottomCenter,
-  bottomRight,
-}
-
-/// A toast notification item.
-class AppSonnerToast {
-  /// Creates a toast notification.
-  AppSonnerToast({
-    required this.id,
-    required this.message,
-    this.title,
-    this.type = AppSonnerType.info,
-    this.duration = const Duration(seconds: 4),
-    this.action,
-    this.onDismiss,
-    this.icon,
-    this.showCloseButton = true,
-  });
-
-  /// Unique identifier for the toast.
-  final String id;
-
-  /// The main message to display.
-  final String message;
-
-  /// Optional title for the toast.
-  final String? title;
-
-  /// Type of the toast.
-  final AppSonnerType type;
-
-  /// How long the toast should be visible.
-  final Duration duration;
-
-  /// Optional action widget (like a button).
-  final Widget? action;
-
-  /// Callback when the toast is dismissed.
-  final VoidCallback? onDismiss;
-
-  /// Custom icon to display.
-  final IconData? icon;
-
-  /// Whether to show the close button.
-  final bool showCloseButton;
-}
-
-/// A modern toast notification system.
-///
-/// providing a clean and modern toast notification system.
-class AppSonner extends StatefulWidget {
-  /// Creates a Sonner toast system.
-  const AppSonner({
-    super.key,
-    this.position = AppSonnerPosition.bottomRight,
-    this.maxToasts = 5,
-    this.offset = const Offset(16, 16),
-    this.spacing = 8.0,
-  });
-
-  /// Position where toasts should appear.
-  final AppSonnerPosition position;
-
-  /// Maximum number of toasts to show at once.
-  final int maxToasts;
-
-  /// Offset from the screen edge.
-  final Offset offset;
-
-  /// Spacing between toasts.
-  final double spacing;
-
-  @override
-  State<AppSonner> createState() => _AppSonnerState();
-
-  /// Global instance for easy access.
-  static _AppSonnerState? _instance;
-
-  /// Show a toast notification.
-  static void show(AppSonnerToast toast) {
-    _instance?._showToast(toast);
-  }
-
-  /// Show a simple info toast.
-  static void info(String message, {String? title}) {
-    show(
-      AppSonnerToast(
-        id: DateTime.now().millisecondsSinceEpoch.toString(),
-        message: message,
-        title: title,
-        type: AppSonnerType.info,
-      ),
-    );
-  }
-
-  /// Show a success toast.
-  static void success(String message, {String? title}) {
-    show(
-      AppSonnerToast(
-        id: DateTime.now().millisecondsSinceEpoch.toString(),
-        message: message,
-        title: title,
-        type: AppSonnerType.success,
-      ),
-    );
-  }
-
-  /// Show a warning toast.
-  static void warning(String message, {String? title}) {
-    show(
-      AppSonnerToast(
-        id: DateTime.now().millisecondsSinceEpoch.toString(),
-        message: message,
-        title: title,
-        type: AppSonnerType.warning,
-      ),
-    );
-  }
-
-  /// Show an error toast.
-  static void error(String message, {String? title}) {
-    show(
-      AppSonnerToast(
-        id: DateTime.now().millisecondsSinceEpoch.toString(),
-        message: message,
-        title: title,
-        type: AppSonnerType.error,
-      ),
-    );
-  }
-
-  /// Dismiss a specific toast.
-  static void dismiss(String id) {
-    _instance?._dismissToast(id);
-  }
-
-  /// Dismiss all toasts.
-  static void dismissAll() {
-    _instance?._dismissAllToasts();
-  }
-}
-
-class _AppSonnerState extends State<AppSonner> with TickerProviderStateMixin {
-  final List<AppSonnerToast> _toasts = [];
-  final Map<String, AnimationController> _animationControllers = {};
-  final Map<String, Timer> _timers = {};
-
-  @override
-  void initState() {
-    super.initState();
-    AppSonner._instance = this;
-  }
-
-  @override
-  void dispose() {
-    for (final controller in _animationControllers.values) {
-      controller.dispose();
-    }
-    for (final timer in _timers.values) {
-      timer.cancel();
-    }
-    AppSonner._instance = null;
-    super.dispose();
-  }
-
-  void _showToast(AppSonnerToast toast) {
-    setState(() {
-      _toasts.insert(0, toast);
-
-      // Remove excess toasts
-      while (_toasts.length > widget.maxToasts) {
-        final removedToast = _toasts.removeLast();
-        _cleanupToast(removedToast.id);
-      }
-    });
-
-    // Create animation controller
-    final controller = AnimationController(
-      duration: const Duration(milliseconds: 300),
-      vsync: this,
-    );
-    _animationControllers[toast.id] = controller;
-    controller.forward();
-
-    // Set dismiss timer
-    _timers[toast.id] = Timer(toast.duration, () {
-      _dismissToast(toast.id);
-    });
-  }
-
-  void _dismissToast(String id) {
-    final controller = _animationControllers[id];
-    if (controller != null) {
-      controller.reverse().then((_) {
-        setState(() {
-          _toasts.removeWhere((toast) => toast.id == id);
-        });
-        _cleanupToast(id);
-      });
-    }
-  }
-
-  void _dismissAllToasts() {
-    for (final toast in List.from(_toasts)) {
-      _dismissToast(toast.id);
-    }
-  }
-
-  void _cleanupToast(String id) {
-    _animationControllers[id]?.dispose();
-    _animationControllers.remove(id);
-    _timers[id]?.cancel();
-    _timers.remove(id);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    if (_toasts.isEmpty) return const SizedBox.shrink();
-
-    return Positioned(
-      top: _isTop() ? widget.offset.dy : null,
-      bottom: _isBottom() ? widget.offset.dy : null,
-      left: _isLeft() ? widget.offset.dx : null,
-      right: _isRight() ? widget.offset.dx : null,
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        crossAxisAlignment: _getCrossAxisAlignment(),
-        children: _toasts.map((toast) => _buildToast(toast)).toList(),
-      ),
-    );
-  }
-
-  Widget _buildToast(AppSonnerToast toast) {
-    final controller = _animationControllers[toast.id];
-    if (controller == null) return const SizedBox.shrink();
-
-    return AnimatedBuilder(
-      animation: controller,
-      builder:
-          (context, child) => Transform.translate(
-            offset: Offset(
-              _getSlideOffset().dx * (1 - controller.value),
-              _getSlideOffset().dy * (1 - controller.value),
-            ),
-            child: Opacity(
-              opacity: controller.value,
-              child: Container(
-                margin: EdgeInsets.only(bottom: widget.spacing),
-                child: _AppSonnerToastWidget(
-                  toast: toast,
-                  onDismiss: () => _dismissToast(toast.id),
-                ),
-              ),
-            ),
-          ),
-    );
-  }
-
-  bool _isTop() => widget.position.name.startsWith('top');
-  bool _isBottom() => widget.position.name.startsWith('bottom');
-  bool _isLeft() => widget.position.name.endsWith('Left');
-  bool _isRight() => widget.position.name.endsWith('Right');
-
-  CrossAxisAlignment _getCrossAxisAlignment() {
-    if (_isLeft()) return CrossAxisAlignment.start;
-    if (_isRight()) return CrossAxisAlignment.end;
-    return CrossAxisAlignment.center;
-  }
-
-  Offset _getSlideOffset() {
-    if (_isLeft()) return const Offset(-100, 0);
-    if (_isRight()) return const Offset(100, 0);
-    if (_isTop()) return const Offset(0, -100);
-    return const Offset(0, 100);
-  }
-}
-
-class _AppSonnerToastWidget extends StatelessWidget {
-  const _AppSonnerToastWidget({required this.toast, required this.onDismiss});
-
-  final AppSonnerToast toast;
-  final VoidCallback onDismiss;
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      constraints: const BoxConstraints(minWidth: 300, maxWidth: 400),
-      decoration: BoxDecoration(
-        color: AppColors.backgroundWhite,
-        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-        border: Border.all(color: _getBorderColor()),
-        boxShadow: [
-          BoxShadow(
-            color: CupertinoColors.black.withValues(alpha: 0.1),
-            blurRadius: 15,
-            offset: const Offset(0, 6),
-          ),
-        ],
-      ),
-      child: Padding(
-        padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-        child: Row(
-          children: [
-            // Icon
-            Icon(_getIcon(), color: _getIconColor(), size: 20),
-            const SizedBox(width: AppDimensions.paddingMedium),
-
-            // Content
-            Expanded(
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  if (toast.title != null) ...[
-                    Text(
-                      toast.title!,
-                      style: const TextStyle(
-                        fontSize: 14,
-                        fontWeight: FontWeight.w600,
-                        color: AppColors.foregroundDark,
-                      ),
-                    ),
-                    const SizedBox(height: 2),
-                  ],
-                  Text(
-                    toast.message,
-                    style: const TextStyle(
-                      fontSize: 13,
-                      color: AppColors.mediumGray,
-                    ),
-                  ),
-                ],
-              ),
-            ),
-
-            // Action
-            if (toast.action != null) ...[
-              const SizedBox(width: AppDimensions.paddingMedium),
-              toast.action!,
-            ],
-
-            // Close button
-            if (toast.showCloseButton) ...[
-              const SizedBox(width: AppDimensions.paddingSmall),
-              GestureDetector(
-                onTap: onDismiss,
-                child: const Icon(
-                  CupertinoIcons.xmark,
-                  size: 16,
-                  color: AppColors.mediumGray,
-                ),
-              ),
-            ],
-          ],
-        ),
-      ),
-    );
-  }
-
-  IconData _getIcon() {
-    if (toast.icon != null) return toast.icon!;
-
-    switch (toast.type) {
-      case AppSonnerType.info:
-        return CupertinoIcons.info_circle;
-      case AppSonnerType.success:
-        return CupertinoIcons.checkmark_circle;
-      case AppSonnerType.warning:
-        return CupertinoIcons.exclamationmark_triangle;
-      case AppSonnerType.error:
-        return CupertinoIcons.xmark_circle;
-    }
-  }
-
-  Color _getIconColor() {
-    switch (toast.type) {
-      case AppSonnerType.info:
-        return AppColors.primaryBlue;
-      case AppSonnerType.success:
-        return AppColors.successGreen;
-      case AppSonnerType.warning:
-        return AppColors.warningOrange;
-      case AppSonnerType.error:
-        return AppColors.destructiveRed;
-    }
-  }
-
-  Color _getBorderColor() {
-    switch (toast.type) {
-      case AppSonnerType.info:
-        return AppColors.primaryBlue.withValues(alpha: 0.2);
-      case AppSonnerType.success:
-        return AppColors.successGreen.withValues(alpha: 0.2);
-      case AppSonnerType.warning:
-        return AppColors.warningOrange.withValues(alpha: 0.2);
-      case AppSonnerType.error:
-        return AppColors.destructiveRed.withValues(alpha: 0.2);
-    }
-  }
-}
diff --git a/lib/components/feedback/app_toast.dart b/lib/components/feedback/app_toast.dart
deleted file mode 100644
index b2815e9..0000000
--- a/lib/components/feedback/app_toast.dart
+++ /dev/null
@@ -1,284 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'dart:async';
-
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-enum AppToastType { info, success, warning, error }
-
-class AppToast {
-  static OverlayEntry? _overlayEntry;
-  static Timer? _timer;
-
-  static void show({
-    required BuildContext context,
-    required String message,
-    String? title,
-    AppToastType type = AppToastType.info,
-    Duration duration = const Duration(seconds: 3),
-    EdgeInsets margin = const EdgeInsets.all(AppDimensions.spacingL),
-  }) {
-    // Dismiss any existing toast
-    dismiss(now: true);
-
-    // Overlay.of(context) should not be null if called from a valid context
-    // within a MaterialApp/CupertinoApp.
-    OverlayState overlayState = Overlay.of(context);
-
-    _overlayEntry = OverlayEntry(
-      builder: (context) {
-        return Positioned(
-          bottom: margin.bottom,
-          left: margin.left,
-          right: margin.right,
-          child: CupertinoToastWidget(
-            title: title,
-            message: message,
-            type: type,
-            onDismiss: () => dismiss(now: true),
-          ),
-        );
-      },
-    );
-
-    overlayState.insert(_overlayEntry!);
-
-    _timer = Timer(duration, () {
-      dismiss();
-    });
-  }
-
-  static void dismiss({bool now = false}) {
-    if (now) {
-      _timer?.cancel();
-      _timer = null;
-      if (_overlayEntry != null) {
-        _overlayEntry!.remove();
-        _overlayEntry = null;
-      }
-    } else {
-      // If not 'now', the timer will handle dismissal.
-      // This is mainly for programmatic dismissal before timer ends.
-      if (_timer?.isActive ?? false) {
-        _timer!.cancel();
-      }
-      if (_overlayEntry != null) {
-        _overlayEntry!.remove();
-        _overlayEntry = null;
-      }
-    }
-  }
-}
-
-class CupertinoToastWidget extends StatefulWidget {
-  final String? title;
-  final String message;
-  final AppToastType type;
-  final VoidCallback onDismiss;
-
-  const CupertinoToastWidget({
-    super.key,
-    this.title,
-    required this.message,
-    required this.type,
-    required this.onDismiss,
-  });
-
-  @override
-  State<CupertinoToastWidget> createState() => _CupertinoToastWidgetState();
-}
-
-class _CupertinoToastWidgetState extends State<CupertinoToastWidget>
-    with SingleTickerProviderStateMixin {
-  late AnimationController _controller;
-  late Animation<double> _opacityAnimation;
-  late Animation<Offset> _positionAnimation;
-
-  @override
-  void initState() {
-    super.initState();
-    _controller = AnimationController(
-      duration: const Duration(milliseconds: 300),
-      vsync: this,
-    );
-
-    _opacityAnimation = Tween<double>(
-      begin: 0.0,
-      end: 1.0,
-    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutQuad));
-    _positionAnimation = Tween<Offset>(
-      begin: const Offset(0, 0.1),
-      end: Offset.zero,
-    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeOutQuad));
-
-    _controller.forward();
-  }
-
-  @override
-  void dispose() {
-    _controller.dispose();
-    super.dispose();
-  }
-
-  Color _getBackgroundColor() {
-    switch (widget.type) {
-      case AppToastType.success:
-        return AppColors.successGreen.withValues(alpha: 0.9);
-      case AppToastType.warning:
-        return AppColors.warningOrange.withValues(alpha: 0.9);
-      case AppToastType.error:
-        return AppColors.destructiveRed.withValues(alpha: 0.9);
-      case AppToastType.info:
-        return CupertinoColors.secondarySystemFill.withValues(
-          alpha: 0.95,
-        ); // Darker for visibility
-    }
-  }
-
-  Color _getForegroundColor() {
-    switch (widget.type) {
-      case AppToastType.success:
-      case AppToastType.warning:
-      case AppToastType.error:
-        return AppColors.white;
-      case AppToastType.info:
-        return AppColors.foregroundDark;
-    }
-  }
-
-  IconData _getIcon() {
-    switch (widget.type) {
-      case AppToastType.success:
-        return CupertinoIcons.checkmark_circle_fill;
-      case AppToastType.warning:
-        return CupertinoIcons.exclamationmark_triangle_fill;
-      case AppToastType.error:
-        return CupertinoIcons.xmark_circle_fill;
-      case AppToastType.info:
-        return CupertinoIcons.info_circle_fill;
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    final Color backgroundColor = _getBackgroundColor();
-    final Color foregroundColor = _getForegroundColor();
-    final IconData iconData = _getIcon();
-
-    return FadeTransition(
-      opacity: _opacityAnimation,
-      child: SlideTransition(
-        position: _positionAnimation,
-        child: Container(
-          margin: const EdgeInsets.symmetric(
-            horizontal: AppDimensions.spacingM,
-          ), // Ensure it doesn't touch screen edges
-          padding: const EdgeInsets.symmetric(
-            horizontal: AppDimensions.spacingM,
-            vertical: AppDimensions.spacingS,
-          ),
-          decoration: BoxDecoration(
-            color: backgroundColor,
-            borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-            boxShadow: [
-              BoxShadow(
-                color: AppColors.shadowColor.withValues(alpha: 0.1),
-                blurRadius: 10,
-                offset: const Offset(0, 4),
-              ),
-            ],
-          ),
-          child: Row(
-            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-            children: [
-              Expanded(
-                child: Row(
-                  children: [
-                    Icon(
-                      iconData,
-                      color: foregroundColor,
-                      size: AppDimensions.iconSizeMedium,
-                    ),
-                    const SizedBox(width: AppDimensions.spacingS),
-                    Expanded(
-                      child: Column(
-                        crossAxisAlignment: CrossAxisAlignment.start,
-                        mainAxisSize: MainAxisSize.min,
-                        children: [
-                          if (widget.title != null && widget.title!.isNotEmpty)
-                            Text(
-                              widget.title!,
-                              style: AppTextStyles.bodyBold.copyWith(
-                                color: foregroundColor,
-                              ),
-                            ),
-                          Text(
-                            widget.message,
-                            style: AppTextStyles.bodySmall.copyWith(
-                              color: foregroundColor,
-                            ),
-                            maxLines: 3,
-                            overflow: TextOverflow.ellipsis,
-                          ),
-                        ],
-                      ),
-                    ),
-                  ],
-                ),
-              ),
-              CupertinoButton(
-                padding: EdgeInsets.zero,
-                minSize: 0,
-                onPressed: widget.onDismiss,
-                child: Icon(
-                  CupertinoIcons.xmark,
-                  color: foregroundColor.withValues(alpha: 0.7),
-                  size: AppDimensions.iconSizeSmall,
-                ),
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-// Example Usage:
-/*
-CupertinoButton(
-  child: Text('Show Info Toast'),
-  onPressed: () {
-    AppToast.show(
-      context: context,
-      title: 'Information',
-      message: 'This is an informational message.',
-      type: AppToastType.info,
-    );
-  },
-),
-CupertinoButton(
-  child: Text('Show Success Toast'),
-  onPressed: () {
-    AppToast.show(
-      context: context,
-      title: 'Success!',
-      message: 'The operation was completed successfully.',
-      type: AppToastType.success,
-      duration: Duration(seconds: 5),
-    );
-  },
-),
-CupertinoButton(
-  child: Text('Show Error Toast'),
-  onPressed: () {
-    AppToast.show(
-      context: context,
-      title: 'Error Occurred',
-      message: 'Something went wrong. Please try again later. This is a longer message to test wrapping and overflow.',
-      type: AppToastType.error,
-    );
-  },
-),
-*/
diff --git a/lib/components/feedback/app_tooltip.dart b/lib/components/feedback/app_tooltip.dart
deleted file mode 100644
index 2391b8a..0000000
--- a/lib/components/feedback/app_tooltip.dart
+++ /dev/null
@@ -1,276 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'dart:async';
-
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// A Cupertino-styled tooltip that appears on long press.
-class AppTooltip extends StatefulWidget {
-  final Widget child;
-  final String message;
-  final EdgeInsetsGeometry? padding;
-  final EdgeInsetsGeometry? margin;
-  final BoxDecoration? decoration;
-  final TextStyle? textStyle;
-  final Duration showDuration;
-  final TooltipPosition position;
-  final Offset? offset;
-
-  const AppTooltip({
-    super.key,
-    required this.child,
-    required this.message,
-    this.padding,
-    this.margin,
-    this.decoration,
-    this.textStyle,
-    this.showDuration = const Duration(milliseconds: 1500),
-    this.position = TooltipPosition.top,
-    this.offset,
-  });
-
-  @override
-  State<AppTooltip> createState() => _AppTooltipState();
-}
-
-enum TooltipPosition { top, bottom, left, right }
-
-class _AppTooltipState extends State<AppTooltip> {
-  OverlayEntry? _overlayEntry;
-  Timer? _timer;
-
-  void _showTooltip() {
-    _removeTooltip(); // Remove any existing tooltip
-
-    _overlayEntry = _createOverlayEntry();
-    Overlay.of(context).insert(_overlayEntry!);
-
-    _timer = Timer(widget.showDuration, () {
-      _removeTooltip();
-    });
-  }
-
-  void _removeTooltip() {
-    _timer?.cancel();
-    _timer = null;
-    if (_overlayEntry != null) {
-      _overlayEntry!.remove();
-      _overlayEntry = null;
-    }
-  }
-
-  @override
-  void dispose() {
-    _removeTooltip();
-    super.dispose();
-  }
-
-  OverlayEntry _createOverlayEntry() {
-    final RenderBox renderBox = context.findRenderObject() as RenderBox;
-    final size = renderBox.size;
-    final offset = renderBox.localToGlobal(Offset.zero);
-
-    return OverlayEntry(
-      builder: (context) {
-        final tooltipPadding =
-            widget.padding ??
-            const EdgeInsets.symmetric(
-              horizontal: AppDimensions.spacingS,
-              vertical: AppDimensions.spacingXs,
-            );
-        final tooltipMargin =
-            widget.margin ?? const EdgeInsets.all(AppDimensions.spacingXs);
-        final tooltipDecoration =
-            widget.decoration ??
-            BoxDecoration(
-              color: AppColors.foregroundDark.withValues(alpha: 0.9),
-              borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
-            );
-        final tooltipTextStyle =
-            widget.textStyle ??
-            AppTextStyles.footnote.copyWith(color: AppColors.white);
-
-        // Calculate tooltip position
-        // This is a simplified calculation and might need adjustments for complex scenarios or screen edges.
-        double top =
-            offset.dy - size.height - AppDimensions.spacingS; // Default to top
-        double left =
-            offset.dx + size.width / 2; // Centered horizontally by default
-
-        // Placeholder for actual tooltip size calculation
-        // For accurate positioning, we'd need to measure the tooltip's size first.
-        // This can be done by laying out the tooltip off-screen or using a GlobalKey.
-        // For simplicity, we'll use estimated adjustments here.
-
-        // This is a very basic positioning logic.
-        // A more robust solution would calculate the tooltip's actual size first.
-        final tooltipContent = Container(
-          padding: tooltipPadding,
-          margin: tooltipMargin,
-          decoration: tooltipDecoration,
-          child: Text(
-            widget.message,
-            style: tooltipTextStyle,
-            textAlign: TextAlign.center,
-          ),
-        );
-
-        // A more sophisticated positioning logic would be needed here,
-        // considering the actual size of the tooltip widget.
-        // For now, this is a starting point.
-        // Let's refine positioning based on widget.position
-        // This part needs the actual size of the tooltip to be accurate.
-        // For now, we'll make rough adjustments.
-
-        // The following positioning logic is highly simplified and assumes the tooltip is not too large.
-        // It does not account for screen edges.
-        double tooltipEstimatedHeight = 40; // Rough estimate
-        double tooltipEstimatedWidth = 100; // Rough estimate
-
-        switch (widget.position) {
-          case TooltipPosition.top:
-            top =
-                offset.dy -
-                tooltipEstimatedHeight -
-                (widget.offset?.dy ?? AppDimensions.spacingXs);
-            left =
-                offset.dx +
-                (size.width / 2) -
-                (tooltipEstimatedWidth / 2) +
-                (widget.offset?.dx ?? 0);
-            break;
-          case TooltipPosition.bottom:
-            top =
-                offset.dy +
-                size.height +
-                (widget.offset?.dy ?? AppDimensions.spacingXs);
-            left =
-                offset.dx +
-                (size.width / 2) -
-                (tooltipEstimatedWidth / 2) +
-                (widget.offset?.dx ?? 0);
-            break;
-          case TooltipPosition.left:
-            top =
-                offset.dy +
-                (size.height / 2) -
-                (tooltipEstimatedHeight / 2) +
-                (widget.offset?.dy ?? 0);
-            left =
-                offset.dx -
-                tooltipEstimatedWidth -
-                (widget.offset?.dx ?? AppDimensions.spacingXs);
-            break;
-          case TooltipPosition.right:
-            top =
-                offset.dy +
-                (size.height / 2) -
-                (tooltipEstimatedHeight / 2) +
-                (widget.offset?.dy ?? 0);
-            left =
-                offset.dx +
-                size.width +
-                (widget.offset?.dx ?? AppDimensions.spacingS);
-            break;
-        }
-
-        // Ensure it doesn't go off screen (very basic)
-        final screenWidth = MediaQuery.of(context).size.width;
-        final screenHeight = MediaQuery.of(context).size.height;
-
-        if (left < AppDimensions.spacingS) left = AppDimensions.spacingS;
-        if (left + tooltipEstimatedWidth >
-            screenWidth - AppDimensions.spacingS) {
-          left = screenWidth - tooltipEstimatedWidth - AppDimensions.spacingS;
-        }
-        if (top < AppDimensions.spacingS) top = AppDimensions.spacingS;
-        if (top + tooltipEstimatedHeight >
-            screenHeight - AppDimensions.spacingS) {
-          top = screenHeight - tooltipEstimatedHeight - AppDimensions.spacingS;
-        }
-
-        return Positioned(
-          top: top,
-          left: left,
-          child: IgnorePointer(
-            // Tooltip should not be interactive itself
-            child: Opacity(
-              // Optional: fade in animation
-              opacity: 1.0, // Can be animated
-              child: tooltipContent,
-            ),
-          ),
-        );
-      },
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(
-      onLongPress: _showTooltip,
-      onTapUp:
-          (_) => _removeTooltip(), // Also remove on tap up after long press
-      onTapCancel: () => _removeTooltip(), // And on cancel
-      child: widget.child,
-    );
-  }
-}
-
-// Example Usage (for testing):
-/*
-class TooltipTestPage extends StatelessWidget {
-  const TooltipTestPage({super.key});
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Tooltip Example'),
-      ),
-      child: Center(
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: <Widget>[
-            AppTooltip(
-              message: 'This is a tooltip for the button!',
-              child: CupertinoButton.filled(
-                child: const Text('Long Press Me (Top)'),
-                onPressed: () {},
-              ),
-            ),
-            const SizedBox(height: 20),
-            AppTooltip(
-              message: 'Another tooltip, this one is longer to test wrapping and stuff.',
-              position: TooltipPosition.bottom,
-              child: CupertinoButton(
-                child: const Text('Long Press Me (Bottom)'),
-                onPressed: () {},
-              ),
-            ),
-            const SizedBox(height: 20),
-             AppTooltip(
-              message: 'Left!',
-              position: TooltipPosition.left,
-              child: CupertinoButton(
-                child: const Text('Long Press (Left)'),
-                onPressed: () {},
-              ),
-            ),
-            const SizedBox(height: 20),
-            AppTooltip(
-              message: 'Right side tooltip example.',
-              position: TooltipPosition.right,
-              child: CupertinoButton(
-                child: const Text('Long Press (Right)'),
-                onPressed: () {},
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/feedback/loading_indicator.dart b/lib/components/feedback/loading_indicator.dart
deleted file mode 100644
index 5cf8f30..0000000
--- a/lib/components/feedback/loading_indicator.dart
+++ /dev/null
@@ -1,21 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-/// A standardized loading indicator for the application.
-///
-/// This component wraps the `CupertinoActivityIndicator` to provide a consistent
-/// loading spinner. It can be customized with size and color if needed in the future.
-class LoadingIndicator extends StatelessWidget {
-  /// Creates a loading indicator.
-  const LoadingIndicator({
-    super.key,
-    this.radius = 14.0, // Default CupertinoActivityIndicator radius
-  });
-
-  /// The radius of the spinner.
-  final double radius;
-
-  @override
-  Widget build(BuildContext context) {
-    return Center(child: CupertinoActivityIndicator(radius: radius));
-  }
-}
diff --git a/lib/components/feedback/status_badge.dart b/lib/components/feedback/status_badge.dart
deleted file mode 100644
index c95bf23..0000000
--- a/lib/components/feedback/status_badge.dart
+++ /dev/null
@@ -1,55 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../display/badge.dart';
-
-/// Enum for different status types, influencing icon and color.
-enum StatusType { success, warning, error, info, pending, neutral }
-
-/// A badge specifically designed to convey status with an icon and label.
-///
-/// This component uses the `AppBadge` internally and provides predefined
-/// icons and color schemes for different status types.
-class StatusBadge extends StatelessWidget {
-  /// Creates a status badge with the specified properties.
-  const StatusBadge({super.key, required this.label, required this.statusType});
-
-  /// The text label to display.
-  final String label;
-
-  /// The type of status to represent.
-  final StatusType statusType;
-
-  @override
-  Widget build(BuildContext context) {
-    IconData iconData;
-    AppBadgeVariant badgeVariant;
-
-    switch (statusType) {
-      case StatusType.success:
-        iconData = CupertinoIcons.checkmark_circle_fill;
-        badgeVariant = AppBadgeVariant.success;
-        break;
-      case StatusType.warning:
-        iconData = CupertinoIcons.exclamationmark_triangle_fill;
-        badgeVariant = AppBadgeVariant.warning;
-        break;
-      case StatusType.error:
-        iconData = CupertinoIcons.xmark_circle_fill;
-        badgeVariant = AppBadgeVariant.destructive;
-        break;
-      case StatusType.info:
-        iconData = CupertinoIcons.info_circle_fill;
-        badgeVariant = AppBadgeVariant.info;
-        break;
-      case StatusType.pending:
-        iconData = CupertinoIcons.time_solid;
-        badgeVariant = AppBadgeVariant.secondary;
-        break;
-      case StatusType.neutral:
-        iconData = CupertinoIcons.circle_fill;
-        badgeVariant = AppBadgeVariant.secondary;
-        break;
-    }
-
-    return AppBadge(label: label, variant: badgeVariant, icon: iconData);
-  }
-}
diff --git a/lib/components/forms/app_checkbox.dart b/lib/components/forms/app_checkbox.dart
deleted file mode 100644
index 005fc91..0000000
--- a/lib/components/forms/app_checkbox.dart
+++ /dev/null
@@ -1,73 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A styled checkbox component.
-class AppCheckbox extends StatelessWidget {
-  /// Creates an app checkbox.
-  const AppCheckbox({
-    super.key,
-    required this.value,
-    required this.onChanged,
-    this.label,
-    this.activeColor = AppColors.primaryBlue,
-    this.checkColor = AppColors.white,
-    this.tristate = false,
-  });
-
-  /// Whether this checkbox is currently checked. Can be null if tristate is true.
-  final bool? value;
-
-  /// Called when the value of the checkbox should change.
-  final ValueChanged<bool?>? onChanged;
-
-  /// Optional label to display next to the checkbox.
-  final String? label;
-
-  /// The color to use when this checkbox is checked.
-  final Color activeColor;
-
-  /// The color to use for the check icon when this checkbox is checked.
-  final Color checkColor;
-
-  /// If true, the checkbox's value can be true, false, or null.
-  final bool tristate;
-
-  @override
-  Widget build(BuildContext context) {
-    Widget checkbox = CupertinoCheckbox(
-      value: value,
-      onChanged: onChanged,
-      activeColor: activeColor,
-      checkColor: checkColor,
-      tristate: tristate,
-    );
-
-    if (label != null) {
-      checkbox = Row(
-        mainAxisSize: MainAxisSize.min,
-        children: [
-          checkbox,
-          const SizedBox(width: AppDimensions.spacingS),
-          GestureDetector(
-            onTap: () {
-              if (onChanged != null) {
-                if (tristate) {
-                  onChanged!(
-                    value == null ? false : (value == false ? true : null),
-                  );
-                } else {
-                  onChanged!(!(value ?? false));
-                }
-              }
-            },
-            child: Text(label!, style: AppTextStyles.body),
-          ),
-        ],
-      );
-    }
-
-    return checkbox;
-  }
-}
diff --git a/lib/components/forms/app_cupertino_dropdown_form_field.dart b/lib/components/forms/app_cupertino_dropdown_form_field.dart
deleted file mode 100644
index b6883c9..0000000
--- a/lib/components/forms/app_cupertino_dropdown_form_field.dart
+++ /dev/null
@@ -1,290 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A typedef for building the individual items displayed in the CupertinoPicker.
-/// It takes the context and the specific item data.
-typedef AppDropdownPickerItemBuilder<T> =
-    Widget Function(BuildContext context, T item);
-
-/// A typedef for building the widget that displays the currently selected item (or hint) in the collapsed dropdown field.
-/// It takes the context, the currently selected item (nullable), and the hint text (nullable).
-typedef AppDropdownDisplayBuilder<T> =
-    Widget Function(BuildContext context, T? value, String? hintText);
-
-/// An interface for items that have a label to be displayed in the dropdown.
-/// If your item T implements this, its 'label' will be used for default display if no custom displayBuilder is provided.
-abstract class LabeledValue {
-  String get label;
-}
-
-/// A FormField that provides a Cupertino-style dropdown selection.
-///
-/// When tapped, it presents a modal bottom sheet with a `CupertinoPicker`
-/// allowing the user to select a value from a list of items.
-class AppCupertinoDropdownFormField<T> extends FormField<T> {
-  final List<T> items;
-  final AppDropdownPickerItemBuilder<T> pickerItemBuilder;
-  final AppDropdownDisplayBuilder<T>? displayBuilder;
-  final String? hintText;
-  final String? labelText;
-  final ValueChanged<T?>? onChanged;
-  final double pickerSheetHeight;
-  final Widget? prefix;
-  final EdgeInsetsGeometry padding;
-  final BoxDecoration?
-  fieldDecoration; // Renamed from 'decoration' to avoid conflict with FormField.decoration
-  final TextStyle? textStyle;
-  final bool readOnly;
-
-  AppCupertinoDropdownFormField({
-    super.key,
-    required this.items,
-    required this.pickerItemBuilder,
-    this.displayBuilder,
-    this.hintText,
-    this.labelText,
-    this.onChanged,
-    super.initialValue, // Use super-initializer parameter
-    super.onSaved,
-    super.validator,
-    super.enabled = true,
-    AutovalidateMode super.autovalidateMode = AutovalidateMode.disabled,
-    this.pickerSheetHeight = 280.0,
-    this.prefix,
-    this.padding = const EdgeInsets.symmetric(
-      horizontal: AppDimensions.spacingS,
-      vertical: AppDimensions.spacingS,
-    ),
-    this.fieldDecoration,
-    this.textStyle,
-    this.readOnly = false,
-  }) : assert(items.isNotEmpty, 'items cannot be empty'),
-       super(
-         builder: (FormFieldState<T> field) {
-           final _AppCupertinoDropdownFormFieldState<T> state =
-               field as _AppCupertinoDropdownFormFieldState<T>;
-
-           final effectiveTextStyle =
-               textStyle ??
-               AppTextStyles.body.copyWith(color: AppColors.foregroundDark);
-           final defaultFieldDecoration = BoxDecoration(
-             color:
-                 enabled && !readOnly
-                     ? CupertinoColors.tertiarySystemFill
-                     : CupertinoColors.systemGrey5,
-             borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
-             border: Border.all(
-               color:
-                   field.hasError
-                       ? CupertinoColors.destructiveRed
-                       : CupertinoColors.systemGrey4,
-               width: 0.5,
-             ),
-           );
-           final effectiveFieldDecoration =
-               fieldDecoration ?? defaultFieldDecoration;
-
-           Widget displayContent;
-           if (displayBuilder != null) {
-             displayContent = displayBuilder(
-               field.context, // Changed from displayBuilder! to displayBuilder
-               field.value,
-               hintText,
-             );
-           } else {
-             final String? currentItemText =
-                 field.value != null
-                     ? (field.value is LabeledValue
-                         ? (field.value as LabeledValue).label
-                         : field.value.toString())
-                     : hintText;
-             displayContent = Text(
-               currentItemText ?? '',
-               style:
-                   field.value == null && hintText != null
-                       ? effectiveTextStyle.copyWith(
-                         color: AppColors.mediumGray,
-                       )
-                       : effectiveTextStyle,
-               maxLines: 1,
-               overflow: TextOverflow.ellipsis,
-             );
-           }
-
-           return Column(
-             crossAxisAlignment: CrossAxisAlignment.start,
-             mainAxisSize: MainAxisSize.min,
-             children: [
-               if (labelText != null && labelText.isNotEmpty)
-                 Padding(
-                   padding: const EdgeInsets.only(
-                     bottom: AppDimensions.spacingXs,
-                   ),
-                   child: Text(
-                     labelText,
-                     style: AppTextStyles.footnote.copyWith(
-                       color: AppColors.mediumGray,
-                     ),
-                   ),
-                 ),
-               GestureDetector(
-                 onTap:
-                     !enabled || readOnly
-                         ? null
-                         : () {
-                           // Use state.context instead of field.context or a local context
-                           state.showPicker();
-                         },
-                 child: Container(
-                   decoration: effectiveFieldDecoration,
-                   padding: padding,
-                   child: Row(
-                     children: <Widget>[
-                       if (prefix != null) ...[
-                         prefix,
-                         const SizedBox(width: AppDimensions.spacingS),
-                       ],
-                       Expanded(child: displayContent),
-                       if (!readOnly) ...[
-                         const SizedBox(width: AppDimensions.spacingXs),
-                         Icon(
-                           CupertinoIcons.chevron_down,
-                           size: AppDimensions.iconSizeSmall,
-                           color: AppColors.mediumGray,
-                         ),
-                       ],
-                     ],
-                   ),
-                 ),
-               ),
-               if (field.hasError)
-                 Padding(
-                   padding: const EdgeInsets.only(
-                     top: AppDimensions.spacingXs,
-                     left: AppDimensions.spacingXs,
-                   ),
-                   child: Text(
-                     field.errorText ??
-                         '', // Use null-aware operator ?? instead of !
-                     style: AppTextStyles.caption.copyWith(
-                       // Assuming caption exists or will be added
-                       color: CupertinoColors.destructiveRed,
-                     ),
-                   ),
-                 ),
-             ],
-           );
-         },
-       );
-
-  @override
-  FormFieldState<T> createState() => _AppCupertinoDropdownFormFieldState<T>();
-}
-
-class _AppCupertinoDropdownFormFieldState<T> extends FormFieldState<T> {
-  @override
-  AppCupertinoDropdownFormField<T> get widget =>
-      super.widget as AppCupertinoDropdownFormField<T>;
-
-  void showPicker() {
-    final initialIndex = value == null ? 0 : widget.items.indexOf(value as T);
-    FixedExtentScrollController scrollController = FixedExtentScrollController(
-      initialItem: initialIndex < 0 ? 0 : initialIndex,
-    );
-
-    T? tempSelectedItem =
-        value ?? (widget.items.isNotEmpty ? widget.items.first : null);
-
-    showCupertinoModalPopup<void>(
-      context: context,
-      builder: (BuildContext context) {
-        return Container(
-          height: widget.pickerSheetHeight,
-          padding: const EdgeInsets.only(top: 6.0),
-          color: CupertinoColors.systemBackground.resolveFrom(context),
-          child: Column(
-            children: [
-              Container(
-                height: 44, // Standard iOS header height
-                decoration: const BoxDecoration(
-                  border: Border(
-                    bottom: BorderSide(
-                      color: CupertinoColors.systemGrey5,
-                      width: 0.5,
-                    ),
-                  ),
-                ),
-                child: Row(
-                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                  children: [
-                    CupertinoButton(
-                      padding: const EdgeInsets.symmetric(
-                        horizontal: AppDimensions.spacingM,
-                      ),
-                      child: Text(
-                        'Cancel',
-                        style: AppTextStyles.body.copyWith(
-                          color: CupertinoTheme.of(context).primaryColor,
-                        ),
-                      ),
-                      onPressed: () {
-                        Navigator.of(context).pop();
-                      },
-                    ),
-                    CupertinoButton(
-                      padding: const EdgeInsets.symmetric(
-                        horizontal: AppDimensions.spacingM,
-                      ),
-                      child: Text(
-                        'Done',
-                        style: AppTextStyles.bodyBold.copyWith(
-                          color: CupertinoTheme.of(context).primaryColor,
-                        ),
-                      ),
-                      onPressed: () {
-                        if (tempSelectedItem != null) {
-                          didChange(tempSelectedItem);
-                          if (widget.onChanged != null) {
-                            widget.onChanged!(tempSelectedItem);
-                          }
-                        }
-                        Navigator.of(context).pop();
-                      },
-                    ),
-                  ],
-                ),
-              ),
-              Expanded(
-                child: CupertinoPicker(
-                  scrollController: scrollController,
-                  magnification: 1.1,
-                  squeeze: 1.3,
-                  useMagnifier: true,
-                  itemExtent: 36.0, // Height of each item, adjust as needed
-                  onSelectedItemChanged: (int selectedIndex) {
-                    if (selectedIndex >= 0 &&
-                        selectedIndex < widget.items.length) {
-                      tempSelectedItem = widget.items[selectedIndex];
-                    }
-                  },
-                  children: List<Widget>.generate(widget.items.length, (
-                    int index,
-                  ) {
-                    return Center(
-                      child: widget.pickerItemBuilder(
-                        context,
-                        widget.items[index],
-                      ),
-                    );
-                  }),
-                ),
-              ),
-            ],
-          ),
-        );
-      },
-    );
-  }
-}
diff --git a/lib/components/forms/app_date_picker.dart b/lib/components/forms/app_date_picker.dart
deleted file mode 100644
index c1a7b6b..0000000
--- a/lib/components/forms/app_date_picker.dart
+++ /dev/null
@@ -1,276 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-import '../feedback/app_popover.dart';
-
-/// Generic date picker form field following the app design language.
-/// Opens a Material calendar on web/desktop while keeping Cupertino styling in-field.
-class AppDatePickerField extends StatefulWidget {
-  final String label;
-  final DateTime selectedDate;
-  final ValueChanged<DateTime> onDateChanged;
-  final DateTime? firstDate;
-  final DateTime? lastDate;
-
-  const AppDatePickerField({
-    super.key,
-    required this.label,
-    required this.selectedDate,
-    required this.onDateChanged,
-    this.firstDate,
-    this.lastDate,
-  });
-
-  @override
-  State<AppDatePickerField> createState() => _AppDatePickerFieldState();
-}
-
-class _AppDatePickerFieldState extends State<AppDatePickerField> {
-  late DateTime _currentDate;
-
-  @override
-  void initState() {
-    super.initState();
-    _currentDate = widget.selectedDate;
-  }
-
-  Future<void> _pickDate() async {
-    // determine rect
-    final renderBox = context.findRenderObject() as RenderBox?;
-    if (renderBox == null) return;
-    final offset = renderBox.localToGlobal(Offset.zero);
-    final rect = offset & renderBox.size;
-
-    AppPopover.show(
-      context: context,
-      trigger: const SizedBox.shrink(),
-      anchorRect: rect,
-      position: AppPopoverPosition.bottomLeft,
-      content: _CalendarPopup(
-        initialDate: _currentDate,
-        minDate: widget.firstDate ?? DateTime(1900),
-        maxDate: widget.lastDate ?? DateTime.now(),
-        onSelected: (picked) {
-          setState(() => _currentDate = picked);
-          widget.onDateChanged(picked);
-        },
-      ),
-      width: 320,
-    );
-  }
-
-  String _formatDate(DateTime date) {
-    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(
-      onTap: _pickDate,
-      child: Container(
-        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
-        decoration: BoxDecoration(
-          color: AppColors.backgroundSecondary,
-          borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-        ),
-        child: Row(
-          crossAxisAlignment: CrossAxisAlignment.center,
-          children: [
-            const Icon(
-              CupertinoIcons.calendar,
-              size: 16,
-              color: AppColors.mediumGray,
-            ),
-            const SizedBox(width: AppDimensions.spacingS),
-            Expanded(
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  Text(
-                    widget.label,
-                    style: AppTextStyles.caption.copyWith(
-                      color: AppColors.textSecondary,
-                    ),
-                  ),
-                  const SizedBox(height: 2),
-                  Text(_formatDate(_currentDate), style: AppTextStyles.body),
-                ],
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-/// Internal calendar picker
-class _CalendarPopup extends StatefulWidget {
-  final DateTime initialDate;
-  final DateTime minDate;
-  final DateTime maxDate;
-  final ValueChanged<DateTime> onSelected;
-
-  const _CalendarPopup({
-    required this.initialDate,
-    required this.minDate,
-    required this.maxDate,
-    required this.onSelected,
-  });
-
-  @override
-  State<_CalendarPopup> createState() => _CalendarPopupState();
-}
-
-class _CalendarPopupState extends State<_CalendarPopup> {
-  late DateTime _visibleMonth;
-
-  @override
-  void initState() {
-    super.initState();
-    _visibleMonth = DateTime(widget.initialDate.year, widget.initialDate.month);
-  }
-
-  void _prevMonth() {
-    setState(() {
-      _visibleMonth = DateTime(_visibleMonth.year, _visibleMonth.month - 1);
-    });
-  }
-
-  void _nextMonth() {
-    setState(() {
-      _visibleMonth = DateTime(_visibleMonth.year, _visibleMonth.month + 1);
-    });
-  }
-
-  List<Widget> _buildDayHeaders() {
-    const labels = ['L', 'M', 'M', 'G', 'V', 'S', 'D'];
-    return labels
-        .map(
-          (l) => Expanded(
-            child: Center(child: Text(l, style: AppTextStyles.caption)),
-          ),
-        )
-        .toList();
-  }
-
-  List<Widget> _buildCalendarGrid() {
-    final firstDayOfMonth = DateTime(
-      _visibleMonth.year,
-      _visibleMonth.month,
-      1,
-    );
-    final weekdayOfFirst =
-        firstDayOfMonth.weekday % 7; // monday=1 convert 0 index
-    final daysInMonth =
-        DateTime(_visibleMonth.year, _visibleMonth.month + 1, 0).day;
-
-    final totalSlots = weekdayOfFirst + daysInMonth;
-    final rows = (totalSlots / 7).ceil();
-    final List<Widget> rowsWidgets = [];
-    int dayCounter = 1;
-
-    for (int r = 0; r < rows; r++) {
-      rowsWidgets.add(
-        Row(
-          children: [
-            for (int c = 0; c < 7; c++)
-              Expanded(
-                child: Padding(
-                  padding: const EdgeInsets.all(2),
-                  child: _buildDayCell(
-                    r,
-                    c,
-                    weekdayOfFirst,
-                    daysInMonth,
-                    dayCounter,
-                  ),
-                ),
-              ),
-          ],
-        ),
-      );
-    }
-    return rowsWidgets;
-  }
-
-  Widget _buildDayCell(int r, int c, int offset, int maxDay, int dayCounter) {
-    final index = r * 7 + c;
-    if (index < offset || index - offset + 1 > maxDay) {
-      return const SizedBox.shrink();
-    }
-    final day = index - offset + 1;
-    final date = DateTime(_visibleMonth.year, _visibleMonth.month, day);
-    final bool disabled =
-        date.isBefore(widget.minDate) || date.isAfter(widget.maxDate);
-    final bool isSelected =
-        date.year == widget.initialDate.year &&
-        date.month == widget.initialDate.month &&
-        date.day == widget.initialDate.day;
-
-    return CupertinoButton(
-      padding: EdgeInsets.zero,
-      color: isSelected ? AppColors.primaryBlue : null,
-      disabledColor: AppColors.backgroundWhite.withAlpha(0),
-      minSize: 28,
-      onPressed:
-          disabled
-              ? null
-              : () {
-                widget.onSelected(date);
-                Navigator.of(context).pop();
-              },
-      child: Text(
-        '$day',
-        style: TextStyle(
-          color:
-              disabled
-                  ? AppColors.textDisabled
-                  : (isSelected ? AppColors.white : AppColors.foregroundDark),
-          fontSize: 12,
-        ),
-      ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      height: 320,
-      color: AppColors.backgroundWhite,
-      child: Column(
-        children: [
-          // Header with month navigation
-          Padding(
-            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
-            child: Row(
-              mainAxisAlignment: MainAxisAlignment.spaceBetween,
-              children: [
-                CupertinoButton(
-                  padding: EdgeInsets.zero,
-                  child: const Icon(CupertinoIcons.chevron_left),
-                  onPressed: _prevMonth,
-                ),
-                Text(
-                  '${_visibleMonth.month.toString().padLeft(2, '0')}/${_visibleMonth.year}',
-                  style: AppTextStyles.body,
-                ),
-                CupertinoButton(
-                  padding: EdgeInsets.zero,
-                  child: const Icon(CupertinoIcons.chevron_right),
-                  onPressed: _nextMonth,
-                ),
-              ],
-            ),
-          ),
-          Row(children: _buildDayHeaders()),
-          const SizedBox(height: 4),
-          ..._buildCalendarGrid(),
-          const SizedBox(height: 8),
-        ],
-      ),
-    );
-  }
-}
diff --git a/lib/components/forms/app_dropdown_form_field.dart b/lib/components/forms/app_dropdown_form_field.dart
deleted file mode 100644
index 84cca97..0000000
--- a/lib/components/forms/app_dropdown_form_field.dart
+++ /dev/null
@@ -1,278 +0,0 @@
-// ignore_for_file: overridden_fields
-
-import 'package:flutter/cupertino.dart';
-import '../inputs/app_dropdown_menu.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-class AppDropdownFormField<T> extends FormField<T> {
-  final String? labelText;
-  final String? hintText;
-  final List<AppDropdownMenuItem<T>> items;
-  @override
-  final T? initialValue;
-  final ValueChanged<T?>? onChanged;
-  @override
-  final FormFieldValidator<T>? validator;
-  @override
-  final AutovalidateMode autovalidateMode;
-  final String? actionSheetTitle;
-  final String? actionSheetMessage;
-  final String? cancelActionText;
-  final Widget? prefixIcon;
-  final Widget? suffixIcon; // Defaults to a dropdown arrow
-  @override // Added @override
-  final bool enabled;
-
-  AppDropdownFormField({
-    super.key,
-    required this.items,
-    this.labelText,
-    this.hintText,
-    this.initialValue,
-    this.onChanged,
-    this.validator,
-    this.autovalidateMode = AutovalidateMode.onUserInteraction,
-    this.actionSheetTitle,
-    this.actionSheetMessage,
-    this.cancelActionText,
-    this.prefixIcon,
-    this.suffixIcon,
-    super.onSaved,
-    this.enabled =
-        true, // Ensure super.enabled is called if this is intended to override
-    super.restorationId,
-  }) : super(
-         initialValue: initialValue,
-         validator: validator,
-         autovalidateMode: autovalidateMode,
-         enabled: enabled, // Pass enabled to super constructor
-         builder: (FormFieldState<T> field) {
-           // final _AppDropdownFormFieldState<T> state = field as _AppDropdownFormFieldState<T>; // state variable not used
-
-           final effectiveSuffixIcon =
-               suffixIcon ??
-               const Icon(
-                 CupertinoIcons.chevron_down,
-                 size: AppDimensions.iconSizeSmall,
-                 color: AppColors.textSecondary, // Corrected
-               );
-
-           // Find the display child for the currently selected value
-           Widget displayChild;
-           if (field.value == null) {
-             displayChild = Text(
-               hintText ?? 'Select an option',
-               style: AppTextStyles.body.copyWith(
-                 color: AppColors.textDisabled,
-               ), // Corrected
-             );
-           } else {
-             final selectedItem = items.firstWhere(
-               (item) => item.value == field.value,
-               orElse:
-                   () => AppDropdownMenuItem(
-                     value:
-                         field.value
-                             as T, // Should not happen if items are correct
-                     child: Text(
-                       field.value.toString(),
-                       style: AppTextStyles.body,
-                     ),
-                   ),
-             );
-             displayChild = selectedItem.child;
-           }
-
-           return Column(
-             crossAxisAlignment: CrossAxisAlignment.start,
-             children: [
-               if (labelText != null)
-                 Padding(
-                   padding: const EdgeInsets.only(
-                     bottom: AppDimensions.spacingXs,
-                   ),
-                   child: Text(
-                     labelText,
-                     style: AppTextStyles.formLabel, // Corrected
-                   ),
-                 ),
-               AppDropdownMenu<T>(
-                 trigger: CupertinoButton(
-                   padding: const EdgeInsets.symmetric(
-                     horizontal: AppDimensions.paddingMedium, // Corrected
-                     vertical: AppDimensions.paddingSmall, // Corrected
-                   ),
-                   color: AppColors.backgroundSecondary, // Corrected
-                   disabledColor: AppColors.backgroundDisabled, // Corrected
-                   onPressed:
-                       enabled ? () {} : null, // Tap handled by AppDropdownMenu
-                   borderRadius: BorderRadius.circular(
-                     AppDimensions.borderRadiusMedium,
-                   ), // Corrected
-                   child: Row(
-                     children: [
-                       if (prefixIcon != null)
-                         Padding(
-                           padding: const EdgeInsets.only(
-                             right: AppDimensions.spacingS,
-                           ),
-                           child: prefixIcon,
-                         ),
-                       Expanded(child: displayChild),
-                       // No need to check effectiveSuffixIcon for null, it's guaranteed to be non-null
-                       Padding(
-                         padding: const EdgeInsets.only(
-                           left: AppDimensions.spacingS,
-                         ),
-                         child: effectiveSuffixIcon,
-                       ),
-                     ],
-                   ),
-                 ),
-                 items: items,
-                 onSelected:
-                     enabled
-                         ? (T value) {
-                           field.didChange(value);
-                           if (onChanged != null) {
-                             onChanged(value);
-                           }
-                         }
-                         : null,
-                 actionSheetTitle: actionSheetTitle,
-                 actionSheetMessage: actionSheetMessage,
-                 cancelActionText: cancelActionText,
-               ),
-               if (field.hasError)
-                 Padding(
-                   padding: const EdgeInsets.only(
-                     top: AppDimensions.spacingXxs,
-                     left: AppDimensions.paddingSmall,
-                   ), // Corrected
-                   child: Text(
-                     field.errorText!,
-                     style: AppTextStyles.caption.copyWith(
-                       color: AppColors.error,
-                     ), // Corrected
-                   ),
-                 ),
-             ],
-           );
-         },
-       );
-
-  @override
-  FormFieldState<T> createState() => _AppDropdownFormFieldState<T>();
-}
-
-class _AppDropdownFormFieldState<T> extends FormFieldState<T> {
-  @override
-  AppDropdownFormField<T> get widget => super.widget as AppDropdownFormField<T>;
-
-  @override
-  void didChange(T? value) {
-    super.didChange(value);
-    if (widget.onChanged != null) {
-      widget.onChanged!(value);
-    }
-  }
-}
-
-// --- Example Usage (Illustrative) ---
-/*
-class MyFormPage extends StatefulWidget {
-  const MyFormPage({super.key});
-
-  @override
-  State<MyFormPage> createState() => _MyFormPageState();
-}
-
-class _MyFormPageState extends State<MyFormPage> {
-  final _formKey = GlobalKey<FormState>();
-  String? _selectedOption;
-  String? _selectedOptionWithIcon;
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Dropdown Form Field'),
-      ),
-      child: SafeArea(
-        child: Padding(
-          padding: const EdgeInsets.all(AppDimensions.paddingLarge), // Corrected
-          child: Form(
-            key: _formKey,
-            child: ListView(
-              children: <Widget>[
-                AppDropdownFormField<String>(
-                  labelText: 'Select an Option',
-                  hintText: 'Choose from the list',
-                  items: [
-                    AppDropdownMenuItem(value: 'opt1', child: const Text('Option 1')),
-                    AppDropdownMenuItem(value: 'opt2', child: const Text('Option 2: More Details')),
-                    AppDropdownMenuItem(value: 'opt3', child: const Text('Option 3: Special')),
-                  ],
-                  onChanged: (value) {
-                    setState(() {
-                      _selectedOption = value;
-                    });
-                    print('Selected option: $value');
-                  },
-                  validator: (value) {
-                    if (value == null || value.isEmpty) {
-                      return 'Please select an option.';
-                    }
-                    return null;
-                  },
-                  actionSheetTitle: 'Available Options',
-                ),
-                const SizedBox(height: AppDimensions.spacingL),
-                AppDropdownFormField<String>(
-                  labelText: 'Category',
-                  hintText: 'Select category',
-                  prefixIcon: const Icon(CupertinoIcons.tag, size: AppDimensions.iconSizeMedium, color: AppColors.primaryBlue), // Changed icon color for better visibility
-                  items: [
-                    AppDropdownMenuItem(value: 'tech', child: const Text('Technology')),
-                    AppDropdownMenuItem(value: 'health', child: const Text('Health & Wellness')),
-                    AppDropdownMenuItem(value: 'finance', child: const Text('Finance')),
-                  ],
-                  initialValue: 'health',
-                  onChanged: (value) {
-                    setState(() {
-                      _selectedOptionWithIcon = value;
-                    });
-                  },
-                  validator: (value) => value == null ? 'Category is required' : null,
-                ),
-                const SizedBox(height: AppDimensions.spacingXl),
-                CupertinoButton.filled(
-                  child: const Text('Submit'),
-                  onPressed: () {
-                    if (_formKey.currentState!.validate()) {
-                      _formKey.currentState!.save();
-                      // Process data
-                      print('Form submitted successfully!');
-                      print('Selected Option: $_selectedOption');
-                      print('Selected Category: $_selectedOptionWithIcon');
-                      // Show a success toast or navigate
-                    } else {
-                      print('Form validation failed.');
-                    }
-                  },
-                ),
-                const SizedBox(height: AppDimensions.spacingM),
-                if (_selectedOption != null) Text('Current selection: $_selectedOption'),
-                if (_selectedOptionWithIcon != null) Text('Current category: $_selectedOptionWithIcon'),
-
-              ],
-            ),
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/forms/app_form.dart b/lib/components/forms/app_form.dart
deleted file mode 100644
index 4b233b7..0000000
--- a/lib/components/forms/app_form.dart
+++ /dev/null
@@ -1,365 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-/// A form field validation result
-class FormFieldValidationResult {
-  final String? error;
-  final bool isValid;
-
-  const FormFieldValidationResult({this.error, required this.isValid});
-
-  static const FormFieldValidationResult valid = FormFieldValidationResult(
-    isValid: true,
-  );
-
-  static FormFieldValidationResult invalid(String error) {
-    return FormFieldValidationResult(error: error, isValid: false);
-  }
-}
-
-/// A form field validator function
-typedef FormFieldValidator<T> = FormFieldValidationResult Function(T? value);
-
-/// A form field data holder
-class FormFieldData<T> {
-  T? value;
-  String? error;
-  bool isDirty;
-  bool isValid;
-
-  FormFieldData({
-    this.value,
-    this.error,
-    this.isDirty = false,
-    this.isValid = true,
-  });
-
-  void setValue(T? newValue) {
-    value = newValue;
-    isDirty = true;
-  }
-
-  void setError(String? newError) {
-    error = newError;
-    isValid = newError == null;
-  }
-
-  void validate(FormFieldValidator<T>? validator) {
-    if (validator != null) {
-      final result = validator(value);
-      setError(result.error);
-    }
-  }
-
-  void reset() {
-    value = null;
-    error = null;
-    isDirty = false;
-    isValid = true;
-  }
-}
-
-/// A form controller that manages form state and validation
-class AppFormController extends ChangeNotifier {
-  final Map<String, FormFieldData> _fields = {};
-  final Map<String, FormFieldValidator<dynamic>> _validators = {};
-
-  /// Register a form field with optional validator
-  void registerField<T>(
-    String name, {
-    FormFieldValidator<T>? validator,
-    T? initialValue,
-  }) {
-    _fields[name] = FormFieldData<T>(value: initialValue);
-    if (validator != null) {
-      _validators[name] = validator as FormFieldValidator<dynamic>;
-    }
-  }
-
-  /// Get form field data
-  FormFieldData<T>? getField<T>(String name) {
-    return _fields[name] as FormFieldData<T>?;
-  }
-
-  /// Set field value
-  void setFieldValue<T>(String name, T? value) {
-    final field = _fields[name];
-    if (field != null) {
-      field.setValue(value);
-      _validateField(name);
-      notifyListeners();
-    }
-  }
-
-  /// Get field value
-  T? getFieldValue<T>(String name) {
-    return _fields[name]?.value as T?;
-  }
-
-  /// Get field error
-  String? getFieldError(String name) {
-    return _fields[name]?.error;
-  }
-
-  /// Validate a specific field
-  void _validateField(String name) {
-    final field = _fields[name];
-    final validator = _validators[name];
-    if (field != null && validator != null) {
-      field.validate(validator);
-    }
-  }
-
-  /// Validate all fields
-  bool validateAll() {
-    bool allValid = true;
-    for (final name in _fields.keys) {
-      _validateField(name);
-      if (!(_fields[name]?.isValid ?? true)) {
-        allValid = false;
-      }
-    }
-    notifyListeners();
-    return allValid;
-  }
-
-  /// Check if form is valid
-  bool get isValid {
-    return _fields.values.every((field) => field.isValid);
-  }
-
-  /// Check if form has any changes
-  bool get isDirty {
-    return _fields.values.any((field) => field.isDirty);
-  }
-
-  /// Get all form data as a map
-  Map<String, dynamic> getData() {
-    final data = <String, dynamic>{};
-    for (final entry in _fields.entries) {
-      data[entry.key] = entry.value.value;
-    }
-    return data;
-  }
-
-  /// Reset the form
-  void reset() {
-    for (final field in _fields.values) {
-      field.reset();
-    }
-    notifyListeners();
-  }
-
-  @override
-  void dispose() {
-    _fields.clear();
-    _validators.clear();
-    super.dispose();
-  }
-}
-
-/// A widget that provides form context to its children
-class AppForm extends StatefulWidget {
-  final AppFormController? controller;
-  final Widget child;
-  final VoidCallback? onChanged;
-
-  const AppForm({
-    super.key,
-    this.controller,
-    required this.child,
-    this.onChanged,
-  });
-
-  @override
-  State<AppForm> createState() => _AppFormState();
-}
-
-class _AppFormState extends State<AppForm> {
-  late AppFormController _controller;
-  bool _isControllerOwned = false;
-
-  @override
-  void initState() {
-    super.initState();
-    if (widget.controller != null) {
-      _controller = widget.controller!;
-    } else {
-      _controller = AppFormController();
-      _isControllerOwned = true;
-    }
-    _controller.addListener(_onFormChanged);
-  }
-
-  @override
-  void dispose() {
-    _controller.removeListener(_onFormChanged);
-    if (_isControllerOwned) {
-      _controller.dispose();
-    }
-    super.dispose();
-  }
-
-  void _onFormChanged() {
-    widget.onChanged?.call();
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return AppFormProvider(controller: _controller, child: widget.child);
-  }
-}
-
-/// An inherited widget that provides form controller to descendants
-class AppFormProvider extends InheritedWidget {
-  final AppFormController controller;
-
-  const AppFormProvider({
-    super.key,
-    required this.controller,
-    required super.child,
-  });
-
-  static AppFormController? of(BuildContext context) {
-    return context
-        .dependOnInheritedWidgetOfExactType<AppFormProvider>()
-        ?.controller;
-  }
-
-  @override
-  bool updateShouldNotify(AppFormProvider oldWidget) {
-    return controller != oldWidget.controller;
-  }
-}
-
-/// A form field widget that integrates with AppForm
-class AppFormField<T> extends StatefulWidget {
-  final String name;
-  final Widget Function(
-    BuildContext context,
-    T? value,
-    String? error,
-    ValueChanged<T?> onChanged,
-  )
-  builder;
-  final FormFieldValidator<T>? validator;
-  final T? initialValue;
-
-  const AppFormField({
-    super.key,
-    required this.name,
-    required this.builder,
-    this.validator,
-    this.initialValue,
-  });
-
-  @override
-  State<AppFormField<T>> createState() => _AppFormFieldState<T>();
-}
-
-class _AppFormFieldState<T> extends State<AppFormField<T>> {
-  AppFormController? _formController;
-
-  @override
-  void didChangeDependencies() {
-    super.didChangeDependencies();
-    _formController = AppFormProvider.of(context);
-    if (_formController != null) {
-      _formController!.registerField<T>(
-        widget.name,
-        validator: widget.validator,
-        initialValue: widget.initialValue,
-      );
-    }
-  }
-
-  void _onChanged(T? value) {
-    _formController?.setFieldValue(widget.name, value);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    if (_formController == null) {
-      throw FlutterError('AppFormField must be used within an AppForm');
-    }
-
-    return ListenableBuilder(
-      listenable: _formController!,
-      builder: (context, child) {
-        final value = _formController!.getFieldValue<T>(widget.name);
-        final error = _formController!.getFieldError(widget.name);
-        return widget.builder(context, value, error, _onChanged);
-      },
-    );
-  }
-}
-
-/// Common form validators
-class AppFormValidators {
-  static FormFieldValidator<String> required([String? message]) {
-    return (value) {
-      if (value == null || value.trim().isEmpty) {
-        return FormFieldValidationResult.invalid(
-          message ?? 'This field is required',
-        );
-      }
-      return FormFieldValidationResult.valid;
-    };
-  }
-
-  static FormFieldValidator<String> email([String? message]) {
-    return (value) {
-      if (value == null || value.isEmpty) {
-        return FormFieldValidationResult.valid;
-      }
-      final emailRegex = RegExp(r'^[^@]+@[^@]+\.[^@]+$');
-      if (!emailRegex.hasMatch(value)) {
-        return FormFieldValidationResult.invalid(
-          message ?? 'Please enter a valid email address',
-        );
-      }
-      return FormFieldValidationResult.valid;
-    };
-  }
-
-  static FormFieldValidator<String> minLength(
-    int minLength, [
-    String? message,
-  ]) {
-    return (value) {
-      if (value == null || value.length < minLength) {
-        return FormFieldValidationResult.invalid(
-          message ?? 'Must be at least $minLength characters long',
-        );
-      }
-      return FormFieldValidationResult.valid;
-    };
-  }
-
-  static FormFieldValidator<String> maxLength(
-    int maxLength, [
-    String? message,
-  ]) {
-    return (value) {
-      if (value != null && value.length > maxLength) {
-        return FormFieldValidationResult.invalid(
-          message ?? 'Must be no more than $maxLength characters long',
-        );
-      }
-      return FormFieldValidationResult.valid;
-    };
-  }
-
-  static FormFieldValidator<T> combine<T>(
-    List<FormFieldValidator<T>> validators,
-  ) {
-    return (value) {
-      for (final validator in validators) {
-        final result = validator(value);
-        if (!result.isValid) {
-          return result;
-        }
-      }
-      return FormFieldValidationResult.valid;
-    };
-  }
-}
diff --git a/lib/components/forms/app_input_otp.dart b/lib/components/forms/app_input_otp.dart
deleted file mode 100644
index b86dc40..0000000
--- a/lib/components/forms/app_input_otp.dart
+++ /dev/null
@@ -1,277 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'package:flutter/services.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-// TODO: Implement AppInputOtpSeparator if needed based on design
-
-class AppInputOtp extends StatefulWidget {
-  const AppInputOtp({
-    super.key,
-    this.length = 6,
-    this.onCompleted,
-    this.onChanged,
-    this.separatorIndices, // e.g. [2] for a separator after the 3rd digit
-    this.separator,
-    this.fieldWidth =
-        48.0, // Approx h-10 w-10 from mock (w-10 is 2.5rem = 40px, h-10 is 40px. Adding padding/border)
-    this.fieldHeight = 48.0,
-    this.gap = AppDimensions.spacingS, // gap-2 from mock
-  });
-
-  final int length;
-  final ValueChanged<String>? onCompleted;
-  final ValueChanged<String>? onChanged;
-  final List<int>? separatorIndices;
-  final Widget? separator;
-  final double fieldWidth;
-  final double fieldHeight;
-  final double gap;
-
-  @override
-  State<AppInputOtp> createState() => _AppInputOtpState();
-}
-
-class _AppInputOtpState extends State<AppInputOtp> {
-  late List<FocusNode> _focusNodes;
-  late List<TextEditingController> _controllers;
-  late List<String> _inputValues;
-
-  @override
-  void initState() {
-    super.initState();
-    _focusNodes = List.generate(widget.length, (index) => FocusNode());
-    _controllers = List.generate(
-      widget.length,
-      (index) => TextEditingController(),
-    );
-    _inputValues = List.filled(widget.length, '');
-
-    for (int i = 0; i < widget.length; i++) {
-      _controllers[i].addListener(() {
-        final text = _controllers[i].text;
-        if (text.isNotEmpty && _inputValues[i] != text) {
-          _inputValues[i] = text;
-          if (i < widget.length - 1) {
-            FocusScope.of(context).requestFocus(_focusNodes[i + 1]);
-          } else {
-            _focusNodes[i].unfocus(); // Last field
-            _submit();
-          }
-        } else if (text.isEmpty && _inputValues[i].isNotEmpty) {
-          // Handle backspace/delete from an already filled field
-          _inputValues[i] = '';
-        }
-        _triggerOnChanged();
-      });
-    }
-  }
-
-  void _submit() {
-    final otp = _inputValues.join();
-    if (otp.length == widget.length) {
-      widget.onCompleted?.call(otp);
-    }
-  }
-
-  void _triggerOnChanged() {
-    final otp = _inputValues.join();
-    widget.onChanged?.call(otp);
-  }
-
-  @override
-  void dispose() {
-    for (var controller in _controllers) {
-      controller.dispose();
-    }
-    for (var focusNode in _focusNodes) {
-      focusNode.dispose();
-    }
-    super.dispose();
-  }
-
-  void _onKeyPressed(int index, KeyEvent event) {
-    if (event is KeyDownEvent) {
-      if (event.logicalKey == LogicalKeyboardKey.backspace) {
-        if (_controllers[index].text.isEmpty && index > 0) {
-          // If current field is empty and backspace is pressed,
-          // clear previous field and move focus to it.
-          _controllers[index - 1].clear();
-          _inputValues[index - 1] = '';
-          FocusScope.of(context).requestFocus(_focusNodes[index - 1]);
-          _triggerOnChanged();
-        } else if (_controllers[index].text.isNotEmpty) {
-          // If current field is not empty, allow normal backspace behavior by controller listener
-          // _controllers[index].clear(); // This will be handled by listener
-          // _inputValues[index] = '';
-        }
-      }
-    }
-  }
-
-  List<Widget> _buildFields() {
-    final List<Widget> fields = [];
-    for (int i = 0; i < widget.length; i++) {
-      fields.add(
-        AppInputOtpSlot(
-          controller: _controllers[i],
-          focusNode: _focusNodes[i],
-          width: widget.fieldWidth,
-          height: widget.fieldHeight,
-          onKeyPressed: (KeyEvent event) => _onKeyPressed(i, event),
-        ),
-      );
-      if (widget.separator != null &&
-          widget.separatorIndices != null &&
-          widget.separatorIndices!.contains(i) &&
-          i < widget.length - 1) {
-        fields.add(
-          Padding(
-            padding: EdgeInsets.symmetric(horizontal: widget.gap / 2),
-            child: widget.separator,
-          ),
-        );
-      } else if (i < widget.length - 1) {
-        fields.add(SizedBox(width: widget.gap));
-      }
-    }
-    return fields;
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Row(mainAxisSize: MainAxisSize.min, children: _buildFields());
-  }
-}
-
-class AppInputOtpSlot extends StatefulWidget {
-  const AppInputOtpSlot({
-    super.key,
-    required this.controller,
-    required this.focusNode,
-    this.width = 48.0,
-    this.height = 48.0,
-    this.onKeyPressed,
-  });
-
-  final TextEditingController controller;
-  final FocusNode focusNode;
-  final double width;
-  final double height;
-  final ValueChanged<KeyEvent>? onKeyPressed;
-
-  @override
-  State<AppInputOtpSlot> createState() => _AppInputOtpSlotState();
-}
-
-class _AppInputOtpSlotState extends State<AppInputOtpSlot> {
-  bool _isFocused = false;
-  // bool _hasFakeCaret = false; // TODO: Implement fake caret if needed
-
-  @override
-  void initState() {
-    super.initState();
-    widget.focusNode.addListener(_onFocusChange);
-    // TODO: Add listener for controller to manage fake caret visibility
-  }
-
-  @override
-  void dispose() {
-    widget.focusNode.removeListener(_onFocusChange);
-    super.dispose();
-  }
-
-  void _onFocusChange() {
-    if (mounted) {
-      setState(() {
-        _isFocused = widget.focusNode.hasFocus;
-      });
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Based on mock: "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md"
-    // isActive && "z-10 ring-2 ring-ring ring-offset-background"
-
-    final defaultBorderColor = AppColors.borderGray; // border-input
-    final focusedBorderColor =
-        AppColors.primaryBlue; // ring-ring (using primary for focus ring)
-    // final backgroundColor = AppColors.backgroundSecondary; // bg-background (or AppColors.backgroundWhite)
-    final textColor =
-        AppColors.foregroundDark; // text-sm (implies default text color)
-
-    // Mimic ring-offset-background by having a slightly larger outer border or container
-    // For simplicity, we'll use a double border effect when focused.
-
-    BoxDecoration decoration = BoxDecoration(
-      color: AppColors.backgroundWhite, // Or theme.scaffoldBackgroundColor
-      border: Border.all(
-        color: _isFocused ? focusedBorderColor : defaultBorderColor,
-        width: _isFocused ? 1.5 : 1.0, // Thicker border for focus to mimic ring
-      ),
-      borderRadius: BorderRadius.circular(
-        AppDimensions.radiusSmall,
-      ), // rounded-md (approx)
-    );
-
-    // The mock uses different border radii for first/last child.
-    // This is harder to achieve dynamically in a Row unless AppInputOtp passes this info.
-    // For now, uniform border radius.
-
-    return Container(
-      width: widget.width,
-      height: widget.height,
-      decoration: decoration,
-      child: KeyboardListener(
-        // Listen for backspace
-        focusNode: FocusNode(), // Dummy focus node for KeyboardListener
-        onKeyEvent: widget.onKeyPressed,
-        child: CupertinoTextField(
-          controller: widget.controller,
-          focusNode: widget.focusNode,
-          keyboardType: TextInputType.number,
-          inputFormatters: [
-            LengthLimitingTextInputFormatter(1),
-            FilteringTextInputFormatter.digitsOnly,
-          ],
-          textAlign: TextAlign.center,
-          style: AppTextStyles.bodySmall.copyWith(
-            color: textColor,
-          ), // text-sm is 14px, bodySmall is 15px. Close enough.
-          decoration: const BoxDecoration(), // Remove default Cupertino borders
-          maxLength: 1,
-          showCursor: true, // Show native cursor, mock has fake caret
-          cursorColor: AppColors.primaryBlue,
-          // To make it truly borderless inside and rely on container:
-          padding: EdgeInsets.zero,
-          onTap: () {
-            // Select all text on tap to easily overwrite
-            if (widget.controller.text.isNotEmpty) {
-              widget.controller.selection = TextSelection(
-                baseOffset: 0,
-                extentOffset: widget.controller.text.length,
-              );
-            }
-          },
-        ),
-      ),
-    );
-  }
-}
-
-// Optional: Define AppInputOtpSeparator if a specific widget is needed beyond a simple Text/Icon
-// class AppInputOtpSeparator extends StatelessWidget {
-//   const AppInputOtpSeparator({super.key, this.child});
-//   final Widget? child;
-
-//   @override
-//   Widget build(BuildContext context) {
-//     return child ?? const Icon(
-//       CupertinoIcons.circle_fill,
-//       size: AppDimensions.iconSizeSmall,
-//       color: AppColors.mediumGray,
-//     );
-//   }
-// }
diff --git a/lib/components/forms/app_label.dart b/lib/components/forms/app_label.dart
index ad1a68a..9341201 100644
--- a/lib/components/forms/app_label.dart
+++ b/lib/components/forms/app_label.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_text_styles.dart';
 import '../../theme/app_colors.dart';
 
diff --git a/lib/components/forms/app_radio_button.dart b/lib/components/forms/app_radio_button.dart
deleted file mode 100644
index 58ede1a..0000000
--- a/lib/components/forms/app_radio_button.dart
+++ /dev/null
@@ -1,154 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A single radio button item, Cupertino style.
-class AppRadioListItem<T> extends StatelessWidget {
-  final T value;
-  final T groupValue;
-  final ValueChanged<T?> onChanged;
-  final String? title;
-  final Widget? subtitle;
-  final Color? activeColor;
-  final Color?
-  unselectedColor; // Keep for consistency, though Cupertino might not use it directly
-  final bool dense;
-
-  const AppRadioListItem({
-    super.key,
-    required this.value,
-    required this.groupValue,
-    required this.onChanged,
-    this.title,
-    this.subtitle,
-    this.activeColor,
-    this.unselectedColor,
-    this.dense = false,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final bool isSelected = value == groupValue;
-    final effectiveActiveColor = activeColor ?? AppColors.primaryBlue;
-    // final effectiveUnselectedColor = unselectedColor ?? AppColors.mediumGray; // Not directly used by CupertinoListTile leading/trailing
-
-    // Using a GestureDetector to make the whole row tappable
-    return GestureDetector(
-      onTap: () => onChanged(value),
-      behavior: HitTestBehavior.opaque, // Ensures the whole area is tappable
-      child: Padding(
-        padding: EdgeInsets.symmetric(
-          horizontal: dense ? AppDimensions.spacingXs : AppDimensions.spacingS,
-          vertical:
-              dense
-                  ? AppDimensions.spacingXs / 2
-                  : AppDimensions.spacingS /
-                      1.5, // Adjusted for better visual balance
-        ),
-        child: Row(
-          children: <Widget>[
-            // Custom leading widget to mimic radio button
-            Padding(
-              padding: const EdgeInsets.only(right: AppDimensions.spacingS),
-              child: Icon(
-                isSelected
-                    ? CupertinoIcons.checkmark_alt_circle_fill
-                    : CupertinoIcons.circle,
-                color: isSelected ? effectiveActiveColor : AppColors.mediumGray,
-                size: AppDimensions.iconSizeMedium, // Standard icon size
-              ),
-            ),
-            if (title != null)
-              Expanded(
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  mainAxisAlignment: MainAxisAlignment.center,
-                  children: [
-                    Text(
-                      title!,
-                      style: AppTextStyles.body.copyWith(
-                        color:
-                            isSelected
-                                ? AppColors
-                                    .foregroundDark // Or effectiveActiveColor if title should also change color
-                                : AppColors.foregroundDark,
-                      ),
-                      overflow: TextOverflow.ellipsis,
-                    ),
-                    if (subtitle != null) ...[
-                      const SizedBox(height: AppDimensions.spacingXs / 2),
-                      DefaultTextStyle(
-                        style: AppTextStyles.caption.copyWith(
-                          color: AppColors.mediumGray, // Subtitle color
-                        ),
-                        child: subtitle!,
-                      ),
-                    ],
-                  ],
-                ),
-              ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-/// A group of radio buttons, allowing a single selection from multiple options.
-/// Uses Cupertino styling.
-class AppRadioGroup<T> extends StatelessWidget {
-  final T selectedValue;
-  final List<T> items;
-  final ValueChanged<T?> onChanged;
-  // itemBuilder now provides the item and the groupValue for convenience
-  final Widget Function(
-    BuildContext context,
-    T item,
-    T groupValue,
-    ValueChanged<T?> onChanged,
-  )
-  itemBuilder;
-  final Axis direction;
-  final WrapAlignment wrapAlignment;
-  final double spacing;
-  final double runSpacing;
-
-  const AppRadioGroup({
-    super.key,
-    required this.selectedValue,
-    required this.items,
-    required this.onChanged,
-    required this.itemBuilder,
-    this.direction = Axis.vertical,
-    this.wrapAlignment = WrapAlignment.start,
-    this.spacing = AppDimensions.spacingS,
-    this.runSpacing = AppDimensions.spacingS,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    if (direction == Axis.vertical) {
-      return Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children:
-            items.map((item) {
-              // Pass context, item, selectedValue (as groupValue), and onChanged callback
-              return itemBuilder(context, item, selectedValue, onChanged);
-            }).toList(),
-      );
-    } else {
-      return Wrap(
-        direction: direction,
-        alignment: wrapAlignment,
-        spacing: spacing,
-        runSpacing: runSpacing,
-        children:
-            items.map((item) {
-              // Pass context, item, selectedValue (as groupValue), and onChanged callback
-              return itemBuilder(context, item, selectedValue, onChanged);
-            }).toList(),
-      );
-    }
-  }
-}
diff --git a/lib/components/forms/app_slider.dart b/lib/components/forms/app_slider.dart
deleted file mode 100644
index 9e62593..0000000
--- a/lib/components/forms/app_slider.dart
+++ /dev/null
@@ -1,42 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-
-class AppSlider extends StatelessWidget {
-  final double value;
-  final ValueChanged<double> onChanged;
-  final ValueChanged<double>? onChangeStart;
-  final ValueChanged<double>? onChangeEnd;
-  final double min;
-  final double max;
-  final int? divisions;
-  final Color? activeColor;
-  final Color? thumbColor;
-
-  const AppSlider({
-    super.key,
-    required this.value,
-    required this.onChanged,
-    this.onChangeStart,
-    this.onChangeEnd,
-    this.min = 0.0,
-    this.max = 1.0,
-    this.divisions,
-    this.activeColor,
-    this.thumbColor,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoSlider(
-      value: value,
-      onChanged: onChanged,
-      onChangeStart: onChangeStart,
-      onChangeEnd: onChangeEnd,
-      min: min,
-      max: max,
-      divisions: divisions,
-      activeColor: activeColor ?? AppColors.primaryBlue,
-      thumbColor: thumbColor ?? AppColors.primaryBlue,
-    );
-  }
-}
diff --git a/lib/components/forms/app_switch.dart b/lib/components/forms/app_switch.dart
index 9cfa6d6..6836eb5 100644
--- a/lib/components/forms/app_switch.dart
+++ b/lib/components/forms/app_switch.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 
 class AppSwitch extends StatelessWidget {
@@ -19,15 +19,16 @@ class AppSwitch extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    // Using CupertinoSwitch for an iOS-style switch, which is common in Flutter.
-    // Material Switch can also be used if a Material look is preferred.
-    return CupertinoSwitch(
+    // Material Switch ensures consistency with the app-wide Material design.
+    return Switch(
       value: value,
       onChanged: onChanged,
-      activeTrackColor: activeColor ?? AppColors.primaryBlue,
+      activeColor: activeColor ?? AppColors.primaryBlue,
+      activeTrackColor: (activeColor ?? AppColors.primaryBlue).withOpacity(
+        0.54,
+      ),
       inactiveTrackColor: trackColor ?? AppColors.lightGray,
-      thumbColor:
-          thumbColor, // CupertinoSwitch handles default thumb color well
+      inactiveThumbColor: thumbColor,
     );
   }
 }
diff --git a/lib/components/forms/app_textarea.dart b/lib/components/forms/app_textarea.dart
deleted file mode 100644
index 7f7be19..0000000
--- a/lib/components/forms/app_textarea.dart
+++ /dev/null
@@ -1,173 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// A multiline text input field following Cupertino design principles,
-///
-/// This component provides a consistent textarea experience throughout
-/// the application with built-in label, placeholder, and validation support.
-class AppTextarea extends StatelessWidget {
-  /// Creates a textarea with the specified properties.
-  const AppTextarea({
-    super.key,
-    required this.controller,
-    this.label,
-    this.placeholder,
-    this.minLines = 3,
-    this.maxLines = 6,
-    this.maxLength,
-    this.errorText,
-    this.onChanged,
-    this.onSubmitted,
-    this.enabled = true,
-    this.readOnly = false,
-    this.keyboardType = TextInputType.multiline,
-    this.textInputAction = TextInputAction.newline,
-    this.focusNode,
-    this.autofocus = false,
-    this.showCounter = false,
-  });
-
-  /// Controller for the textarea input.
-  final TextEditingController controller;
-
-  /// Optional label text displayed above the textarea.
-  final String? label;
-
-  /// Placeholder text displayed when the textarea is empty.
-  final String? placeholder;
-
-  /// Minimum number of lines for the textarea.
-  final int minLines;
-
-  /// Maximum number of lines for the textarea.
-  final int maxLines;
-
-  /// Maximum number of characters allowed.
-  final int? maxLength;
-
-  /// Error message to display below the textarea.
-  final String? errorText;
-
-  /// Callback fired when the textarea value changes.
-  final ValueChanged<String>? onChanged;
-
-  /// Callback fired when the user submits the textarea.
-  final ValueChanged<String>? onSubmitted;
-
-  /// Whether the textarea is enabled for input.
-  final bool enabled;
-
-  /// Whether the textarea is read-only.
-  final bool readOnly;
-
-  /// The type of keyboard to show.
-  final TextInputType keyboardType;
-
-  /// The action to display on the keyboard.
-  final TextInputAction textInputAction;
-
-  /// Focus node for controlling focus.
-  final FocusNode? focusNode;
-
-  /// Whether to automatically focus the textarea.
-  final bool autofocus;
-
-  /// Whether to show character counter.
-  final bool showCounter;
-
-  @override
-  Widget build(BuildContext context) {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        // Label
-        if (label != null) ...[
-          Text(
-            label!,
-            style: AppTextStyles.bodySmall.copyWith(
-              fontWeight: FontWeight.w500,
-              color: AppColors.foregroundDark,
-            ),
-          ),
-          const SizedBox(height: AppDimensions.paddingSmall),
-        ],
-
-        // Textarea Container
-        Container(
-          decoration: BoxDecoration(
-            color:
-                enabled
-                    ? AppColors.lightGray
-                    : AppColors.lightGray.withValues(alpha: 0.5),
-            borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-            border: Border.all(
-              color:
-                  errorText != null
-                      ? AppColors.destructiveRed
-                      : AppColors.borderGray,
-              width: 1.0,
-            ),
-          ),
-          child: CupertinoTextField(
-            controller: controller,
-            focusNode: focusNode,
-            enabled: enabled,
-            readOnly: readOnly,
-            autofocus: autofocus,
-            minLines: minLines,
-            maxLines: maxLines,
-            maxLength: maxLength,
-            keyboardType: keyboardType,
-            textInputAction: textInputAction,
-            onChanged: onChanged,
-            onSubmitted: onSubmitted,
-            placeholder: placeholder,
-            placeholderStyle: AppTextStyles.body.copyWith(
-              color: AppColors.mediumGray,
-            ),
-            style: AppTextStyles.body.copyWith(
-              color: enabled ? AppColors.foregroundDark : AppColors.mediumGray,
-            ),
-            padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-            decoration: const BoxDecoration(),
-            textAlignVertical: TextAlignVertical.top,
-          ),
-        ),
-
-        // Error text and counter
-        if (errorText != null || (showCounter && maxLength != null)) ...[
-          const SizedBox(height: AppDimensions.paddingSmall),
-          Row(
-            mainAxisAlignment: MainAxisAlignment.spaceBetween,
-            children: [
-              // Error text
-              if (errorText != null)
-                Expanded(
-                  child: Text(
-                    errorText!,
-                    style: AppTextStyles.footnote.copyWith(
-                      color: AppColors.destructiveRed,
-                    ),
-                  ),
-                ),
-
-              // Character counter
-              if (showCounter && maxLength != null)
-                Text(
-                  '${controller.text.length}/${maxLength!}',
-                  style: AppTextStyles.footnote.copyWith(
-                    color:
-                        controller.text.length > maxLength!
-                            ? AppColors.destructiveRed
-                            : AppColors.mediumGray,
-                  ),
-                ),
-            ],
-          ),
-        ],
-      ],
-    );
-  }
-}
diff --git a/lib/components/forms/file_upload.dart b/lib/components/forms/file_upload.dart
index 0cebc0e..513b44e 100644
--- a/lib/components/forms/file_upload.dart
+++ b/lib/components/forms/file_upload.dart
@@ -1,7 +1,9 @@
 // ignore_for_file: prefer_final_fields
 
 import 'package:file_picker/file_picker.dart';
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide IconButton;
+import 'package:flutter/material.dart' as material show IconButton;
+import 'package:flutter/cupertino.dart' show CupertinoIcons;
 import '../../theme/app_colors.dart';
 import '../../theme/app_dimensions.dart';
 import '../../theme/app_text_styles.dart';
@@ -175,7 +177,7 @@ class _FileUploadFieldState extends State<FileUploadField> {
               widget.isLoading
                   ? const SizedBox(
                     height: 150,
-                    child: Center(child: CupertinoActivityIndicator()),
+                    child: Center(child: CircularProgressIndicator()),
                   )
                   : Padding(
                     padding: const EdgeInsets.all(AppDimensions.spacingM),
@@ -313,10 +315,12 @@ class _FileUploadFieldState extends State<FileUploadField> {
                                           color: AppColors.mediumGray,
                                         ),
                                       ),
-                                      CupertinoButton(
+                                      material.IconButton(
                                         padding: EdgeInsets.zero,
+                                        visualDensity: VisualDensity.compact,
+                                        constraints: const BoxConstraints(),
                                         onPressed: () => _removeFile(index),
-                                        child: const Icon(
+                                        icon: const Icon(
                                           CupertinoIcons.xmark_circle_fill,
                                           color: AppColors.mediumGray,
                                         ),
diff --git a/lib/components/forms/text_input.dart b/lib/components/forms/text_input.dart
index 834510e..de858a9 100644
--- a/lib/components/forms/text_input.dart
+++ b/lib/components/forms/text_input.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_dimensions.dart';
 import '../../theme/app_text_styles.dart';
@@ -102,15 +102,6 @@ class AppTextInput extends StatelessWidget {
       textFieldFillColor = AppColors.backgroundSecondary;
     }
 
-    BoxDecoration decoration = BoxDecoration(
-      color: textFieldFillColor,
-      borderRadius: BorderRadius.circular(AppDimensions.borderRadiusMedium),
-      border: Border.all(
-        color: hasError ? AppColors.error : AppColors.borderGray,
-        width: AppDimensions.borderWidth,
-      ),
-    );
-
     // Style for the input text itself
     TextStyle inputTextStyle = AppTextStyles.formInput.copyWith(
       color: enabled ? AppColors.foregroundDark : AppColors.textDisabled,
@@ -136,9 +127,8 @@ class AppTextInput extends StatelessWidget {
             child: Text(label!, style: labelStyle),
           ),
         ],
-        CupertinoTextField(
+        TextField(
           controller: controller,
-          placeholder: placeholder,
           keyboardType: keyboardType,
           textInputAction: textInputAction,
           obscureText: obscureText,
@@ -151,33 +141,69 @@ class AppTextInput extends StatelessWidget {
           autofocus: autofocus,
           autocorrect: autocorrect,
           focusNode: focusNode,
-          prefix: prefix,
-          suffix: suffix,
           textCapitalization: textCapitalization,
-          padding: const EdgeInsets.symmetric(
-            horizontal:
-                AppDimensions.paddingMedium, // Corresponds to px-3 in mock
-            vertical:
-                AppDimensions
-                    .paddingSmall, // Corresponds to py-2 in mock (adjust if h-10 target is strict)
-          ),
-          decoration: decoration,
+          cursorColor: AppColors.primaryBlue,
           style: inputTextStyle,
-          placeholderStyle: placeholderTextStyle,
-          cursorColor: AppColors.primaryBlue, // Standard cursor color
-        ),
-        if (hasError) ...[
-          Padding(
-            padding: const EdgeInsets.only(
-              top: AppDimensions.spacingXxs,
-              left: AppDimensions.paddingSmall,
+          decoration: InputDecoration(
+            hintText: placeholder,
+            hintStyle: placeholderTextStyle,
+            filled: true,
+            fillColor: textFieldFillColor,
+            isDense: true,
+            contentPadding: const EdgeInsets.symmetric(
+              horizontal: AppDimensions.paddingMedium,
+              vertical: AppDimensions.paddingSmall,
             ),
-            child: Text(
-              errorText!,
-              style: AppTextStyles.caption.copyWith(color: AppColors.error),
+            prefixIcon: prefix,
+            suffixIcon: suffix,
+            enabledBorder: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(
+                AppDimensions.borderRadiusMedium,
+              ),
+              borderSide: BorderSide(
+                color: AppColors.borderGray,
+                width: AppDimensions.borderWidth,
+              ),
             ),
+            focusedBorder: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(
+                AppDimensions.borderRadiusMedium,
+              ),
+              borderSide: BorderSide(
+                color: AppColors.primaryBlue,
+                width: AppDimensions.borderWidth,
+              ),
+            ),
+            disabledBorder: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(
+                AppDimensions.borderRadiusMedium,
+              ),
+              borderSide: BorderSide(
+                color: AppColors.borderGray,
+                width: AppDimensions.borderWidth,
+              ),
+            ),
+            errorBorder: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(
+                AppDimensions.borderRadiusMedium,
+              ),
+              borderSide: BorderSide(
+                color: AppColors.error,
+                width: AppDimensions.borderWidth,
+              ),
+            ),
+            focusedErrorBorder: OutlineInputBorder(
+              borderRadius: BorderRadius.circular(
+                AppDimensions.borderRadiusMedium,
+              ),
+              borderSide: BorderSide(
+                color: AppColors.error,
+                width: AppDimensions.borderWidth,
+              ),
+            ),
+            errorText: errorText,
           ),
-        ],
+        ),
       ],
     );
   }
diff --git a/lib/components/inputs/app_dropdown_menu.dart b/lib/components/inputs/app_dropdown_menu.dart
deleted file mode 100644
index 2370b58..0000000
--- a/lib/components/inputs/app_dropdown_menu.dart
+++ /dev/null
@@ -1,192 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_theme.dart';
-
-// Represents an item in the dropdown menu
-class AppDropdownMenuItem<T> {
-  final T value;
-  final Widget child;
-  final VoidCallback?
-  onTap; // If direct action, otherwise use onSelected from AppDropdownMenu
-
-  AppDropdownMenuItem({required this.value, required this.child, this.onTap});
-}
-
-// A Cupertino-styled dropdown menu button
-class AppDropdownMenu<T> extends StatefulWidget {
-  final Widget trigger;
-  final List<AppDropdownMenuItem<T>> items;
-  final ValueChanged<T>? onSelected;
-  final String? actionSheetTitle; // Optional title for the action sheet
-  final String? actionSheetMessage; // Optional message for the action sheet
-  final String?
-  cancelActionText; // Text for the cancel button, defaults to "Cancel"
-
-  const AppDropdownMenu({
-    super.key,
-    required this.trigger,
-    required this.items,
-    this.onSelected,
-    this.actionSheetTitle,
-    this.actionSheetMessage,
-    this.cancelActionText,
-  });
-
-  @override
-  State<AppDropdownMenu<T>> createState() => _AppDropdownMenuState<T>();
-}
-
-class _AppDropdownMenuState<T> extends State<AppDropdownMenu<T>> {
-  void _showMenu(BuildContext context) {
-    final appTheme = AppTheme.of(context);
-    final List<CupertinoActionSheetAction> actions =
-        widget.items.map((item) {
-          return CupertinoActionSheetAction(
-            child: item.child,
-            onPressed: () {
-              Navigator.pop(context); // Dismiss the action sheet
-              item.onTap?.call();
-              if (widget.onSelected != null) {
-                widget.onSelected!(item.value);
-              }
-            },
-          );
-        }).toList();
-
-    showCupertinoModalPopup<void>(
-      context: context,
-      builder:
-          (BuildContext context) => CupertinoActionSheet(
-            title:
-                widget.actionSheetTitle != null
-                    ? Text(
-                      widget.actionSheetTitle!,
-                      style: AppTextStyles.caption.copyWith(
-                        color: appTheme.currentTheme.textTheme.textStyle.color
-                            ?.withValues(alpha: 0.6),
-                      ),
-                    )
-                    : null,
-            message:
-                widget.actionSheetMessage != null
-                    ? Text(
-                      widget.actionSheetMessage!,
-                      style: AppTextStyles.footnote.copyWith(
-                        color: appTheme.currentTheme.textTheme.textStyle.color
-                            ?.withValues(alpha: 0.6),
-                      ),
-                    )
-                    : null,
-            actions: actions,
-            cancelButton: CupertinoActionSheetAction(
-              isDefaultAction: true,
-              onPressed: () {
-                Navigator.pop(context); // Dismiss the action sheet
-              },
-              child: Text(
-                widget.cancelActionText ?? 'Cancel',
-                style: AppTextStyles.bodyBold.copyWith(
-                  color: AppColors.primaryBlue,
-                ),
-              ),
-            ),
-          ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return GestureDetector(
-      onTap: () => _showMenu(context),
-      child: widget.trigger,
-    );
-  }
-}
-
-// --- Example Usage (Illustrative) ---
-/*
-class MyDropdownPage extends StatelessWidget {
-  const MyDropdownPage({super.key});
-
-  @override
-  Widget build(BuildContext context) {
-    String? selectedValue;
-
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Dropdown Menu'),
-      ),
-      child: SafeArea(
-        child: Center(
-          child: AppDropdownMenu<String>(
-            trigger: CupertinoButton.filled(
-              child: Row(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  Text(selectedValue ?? 'Select Option'),
-                  const SizedBox(width: AppDimensions.spacingS),
-                  const Icon(CupertinoIcons.chevron_down, size: AppDimensions.iconSizeSmall),
-                ],
-              ),
-              onPressed: null, // onPressed is handled by AppDropdownMenu's GestureDetector
-            ),
-            actionSheetTitle: 'Choose an option',
-            actionSheetMessage: 'Please select one of the following items.',
-            items: [
-              AppDropdownMenuItem(
-                value: 'option1',
-                child: const Text('Option 1: Details'),
-              ),
-              AppDropdownMenuItem(
-                value: 'option2',
-                child: const Text('Option 2: Settings'),
-              ),
-              AppDropdownMenuItem(
-                value: 'option3',
-                onTap: () => print('Option 3 specific action'), // Specific action
-                child: const Text('Option 3: Action & Select'),
-              ),
-            ],
-            onSelected: (String value) {
-              print('Selected: $value');
-              // setState(() { selectedValue = value; }); // If in a StatefulWidget
-            },
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
-
-// --- Mock Comparison (dropdown-menu.tsx) ---
-// The current AppDropdownMenu uses CupertinoActionSheet, providing a basic
-// iOS-style selection menu. The dropdown-menu.tsx mock, based on Radix UI,
-// offers more advanced features and customization:
-//
-// Features in mock not fully supported by CupertinoActionSheet:
-// - DropdownMenuCheckboxItem: Items with checkboxes.
-//   - Partial Solution: AppDropdownMenuItem child could be a Row with a Checkbox and Text.
-// - DropdownMenuRadioItem: Items for radio groups.
-//   - Partial Solution: Similar to CheckboxItem, using a custom child and managing state.
-// - DropdownMenuLabel: Non-interactive labels.
-//   - Partial Solution: AppDropdownMenuItem with a Text child and no onTap.
-// - DropdownMenuSeparator: Visual dividers.
-//   - Partial Solution: AppDropdownMenuItem with a Divider child and no onTap/value.
-// - DropdownMenuShortcut: Text aligned to the right (e.g., for keyboard shortcuts).
-//   - Partial Solution: Custom child in AppDropdownMenuItem using Row and Spacer.
-// - DropdownMenuGroup: For grouping items.
-//   - CupertinoActionSheet has a title and message, but not arbitrary group sections.
-// - DropdownMenuSub (Sub-menus): Nested menus.
-//   - Not supported by CupertinoActionSheet. Requires a custom popover.
-// - Custom Styling: The mock defines specific border radius, padding, shadows,
-//   and background/foreground colors for the popover and items.
-//   CupertinoActionSheet styling is largely system-defined.
-//
-// To fully implement these features and match the mock's visual styling,
-// a custom popover implementation (e.g., using OverlayEntry) would be necessary
-// instead of or in addition to CupertinoActionSheet.
-//
-// For now, AppDropdownMenuItem's child can be customized to achieve some of
-// these effects (e.g., including icons, custom layouts for items).
diff --git a/lib/components/inputs/app_select.dart b/lib/components/inputs/app_select.dart
deleted file mode 100644
index 84bc95c..0000000
--- a/lib/components/inputs/app_select.dart
+++ /dev/null
@@ -1,425 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A select option that can be displayed in the dropdown.
-class AppSelectOption<T> {
-  /// Creates a select option.
-  const AppSelectOption({
-    required this.value,
-    required this.label,
-    this.subtitle,
-    this.icon,
-    this.disabled = false,
-    this.searchText,
-  });
-
-  /// The value of the option.
-  final T value;
-
-  /// The display label for the option.
-  final String label;
-
-  /// Optional subtitle text.
-  final String? subtitle;
-
-  /// Optional icon to display.
-  final IconData? icon;
-
-  /// Whether this option is disabled.
-  final bool disabled;
-
-  /// Custom search text (if different from label).
-  final String? searchText;
-
-  /// Text used for searching.
-  String get effectiveSearchText => searchText ?? label;
-}
-
-/// An enhanced select component with search functionality.
-///
-/// providing an advanced dropdown with search, filtering, and custom rendering.
-class AppSelect<T> extends StatefulWidget {
-  /// Creates an enhanced select component.
-  const AppSelect({
-    super.key,
-    required this.options,
-    this.value,
-    this.onChanged,
-    this.placeholder = 'Select an option...',
-    this.searchPlaceholder = 'Search options...',
-    this.emptyText = 'No options found',
-    this.searchable = true,
-    this.disabled = false,
-    this.width,
-    this.maxHeight = 300,
-    this.optionBuilder,
-    this.selectedOptionBuilder,
-  });
-
-  /// List of available options.
-  final List<AppSelectOption<T>> options;
-
-  /// Currently selected value.
-  final T? value;
-
-  /// Called when the selection changes.
-  final ValueChanged<T?>? onChanged;
-
-  /// Placeholder text when no option is selected.
-  final String placeholder;
-
-  /// Placeholder text for the search field.
-  final String searchPlaceholder;
-
-  /// Text to show when no options match the search.
-  final String emptyText;
-
-  /// Whether the select supports searching.
-  final bool searchable;
-
-  /// Whether the select is disabled.
-  final bool disabled;
-
-  /// Fixed width for the select.
-  final double? width;
-
-  /// Maximum height for the dropdown.
-  final double maxHeight;
-
-  /// Custom builder for options in the dropdown.
-  final Widget Function(AppSelectOption<T> option, bool isSelected)?
-  optionBuilder;
-
-  /// Custom builder for the selected option display.
-  final Widget Function(AppSelectOption<T> option)? selectedOptionBuilder;
-
-  @override
-  State<AppSelect<T>> createState() => _AppSelectState<T>();
-}
-
-class _AppSelectState<T> extends State<AppSelect<T>> {
-  final TextEditingController _searchController = TextEditingController();
-  final FocusNode _searchFocusNode = FocusNode();
-  List<AppSelectOption<T>> _filteredOptions = [];
-  bool _isDropdownOpen = false;
-
-  @override
-  void initState() {
-    super.initState();
-    _filteredOptions = widget.options;
-    _searchController.addListener(_onSearchChanged);
-  }
-
-  @override
-  void didUpdateWidget(AppSelect<T> oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.options != oldWidget.options) {
-      _filterOptions(_searchController.text);
-    }
-  }
-
-  @override
-  void dispose() {
-    _searchController.dispose();
-    _searchFocusNode.dispose();
-    super.dispose();
-  }
-
-  void _onSearchChanged() {
-    _filterOptions(_searchController.text);
-  }
-
-  void _filterOptions(String query) {
-    setState(() {
-      if (query.isEmpty) {
-        _filteredOptions = widget.options;
-      } else {
-        _filteredOptions =
-            widget.options
-                .where(
-                  (option) => option.effectiveSearchText.toLowerCase().contains(
-                    query.toLowerCase(),
-                  ),
-                )
-                .toList();
-      }
-    });
-  }
-
-  void _toggleDropdown() {
-    if (widget.disabled) return;
-
-    setState(() {
-      _isDropdownOpen = !_isDropdownOpen;
-    });
-
-    if (_isDropdownOpen) {
-      _searchController.clear();
-      _filterOptions('');
-      if (widget.searchable) {
-        _searchFocusNode.requestFocus();
-      }
-    }
-  }
-
-  void _selectOption(AppSelectOption<T> option) {
-    widget.onChanged?.call(option.value);
-    setState(() {
-      _isDropdownOpen = false;
-    });
-  }
-
-  AppSelectOption<T>? get _selectedOption {
-    return widget.options.cast<AppSelectOption<T>?>().firstWhere(
-      (option) => option?.value == widget.value,
-      orElse: () => null,
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return SizedBox(
-      width: widget.width,
-      child: Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          // Select trigger
-          GestureDetector(
-            onTap: _toggleDropdown,
-            child: Container(
-              padding: const EdgeInsets.symmetric(
-                horizontal: AppDimensions.paddingMedium,
-                vertical: AppDimensions.paddingSmall,
-              ),
-              decoration: BoxDecoration(
-                color:
-                    widget.disabled
-                        ? AppColors.lightGray.withValues(alpha: 0.5)
-                        : AppColors.lightGray,
-                borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-                border: Border.all(
-                  color:
-                      _isDropdownOpen
-                          ? AppColors.primaryBlue
-                          : AppColors.borderGray,
-                ),
-              ),
-              child: Row(
-                children: [
-                  Expanded(child: _buildSelectedDisplay()),
-                  Icon(
-                    _isDropdownOpen
-                        ? CupertinoIcons.chevron_up
-                        : CupertinoIcons.chevron_down,
-                    size: 16,
-                    color:
-                        widget.disabled
-                            ? AppColors.mediumGray
-                            : AppColors.foregroundDark,
-                  ),
-                ],
-              ),
-            ),
-          ),
-
-          // Dropdown
-          if (_isDropdownOpen) ...[
-            const SizedBox(height: 4),
-            Container(
-              constraints: BoxConstraints(maxHeight: widget.maxHeight),
-              decoration: BoxDecoration(
-                color: AppColors.backgroundWhite,
-                borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-                border: Border.all(color: AppColors.borderGray),
-                boxShadow: [
-                  BoxShadow(
-                    color: CupertinoColors.black.withValues(alpha: 0.1),
-                    blurRadius: 10,
-                    offset: const Offset(0, 4),
-                  ),
-                ],
-              ),
-              child: Column(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  // Search field
-                  if (widget.searchable) ...[
-                    Padding(
-                      padding: const EdgeInsets.all(AppDimensions.paddingSmall),
-                      child: CupertinoTextField(
-                        controller: _searchController,
-                        focusNode: _searchFocusNode,
-                        placeholder: widget.searchPlaceholder,
-                        prefix: const Padding(
-                          padding: EdgeInsets.only(left: 8),
-                          child: Icon(
-                            CupertinoIcons.search,
-                            size: 16,
-                            color: AppColors.mediumGray,
-                          ),
-                        ),
-                        decoration: BoxDecoration(
-                          color: AppColors.lightGray,
-                          borderRadius: BorderRadius.circular(
-                            AppDimensions.radiusSmall,
-                          ),
-                        ),
-                        style: const TextStyle(fontSize: 14),
-                      ),
-                    ),
-                    Container(height: 1, color: AppColors.borderGray),
-                  ],
-
-                  // Options list
-                  Flexible(
-                    child:
-                        _filteredOptions.isEmpty
-                            ? Padding(
-                              padding: const EdgeInsets.all(
-                                AppDimensions.paddingMedium,
-                              ),
-                              child: Text(
-                                widget.emptyText,
-                                style: const TextStyle(
-                                  color: AppColors.mediumGray,
-                                  fontSize: 14,
-                                ),
-                                textAlign: TextAlign.center,
-                              ),
-                            )
-                            : ListView.builder(
-                              shrinkWrap: true,
-                              itemCount: _filteredOptions.length,
-                              itemBuilder: (context, index) {
-                                final option = _filteredOptions[index];
-                                final isSelected = option.value == widget.value;
-
-                                return _buildOption(option, isSelected);
-                              },
-                            ),
-                  ),
-                ],
-              ),
-            ),
-          ],
-        ],
-      ),
-    );
-  }
-
-  Widget _buildSelectedDisplay() {
-    final selectedOption = _selectedOption;
-
-    if (selectedOption != null) {
-      if (widget.selectedOptionBuilder != null) {
-        return widget.selectedOptionBuilder!(selectedOption);
-      }
-
-      return Row(
-        children: [
-          if (selectedOption.icon != null) ...[
-            Icon(
-              selectedOption.icon,
-              size: 16,
-              color: AppColors.foregroundDark,
-            ),
-            const SizedBox(width: AppDimensions.paddingSmall),
-          ],
-          Expanded(
-            child: Text(
-              selectedOption.label,
-              style: const TextStyle(
-                fontSize: 14,
-                color: AppColors.foregroundDark,
-              ),
-              overflow: TextOverflow.ellipsis,
-            ),
-          ),
-        ],
-      );
-    }
-
-    return Text(
-      widget.placeholder,
-      style: const TextStyle(fontSize: 14, color: AppColors.mediumGray),
-    );
-  }
-
-  Widget _buildOption(AppSelectOption<T> option, bool isSelected) {
-    if (widget.optionBuilder != null) {
-      return GestureDetector(
-        onTap: option.disabled ? null : () => _selectOption(option),
-        child: widget.optionBuilder!(option, isSelected),
-      );
-    }
-
-    return GestureDetector(
-      onTap: option.disabled ? null : () => _selectOption(option),
-      child: Container(
-        padding: const EdgeInsets.symmetric(
-          horizontal: AppDimensions.paddingMedium,
-          vertical: AppDimensions.paddingSmall,
-        ),
-        decoration: BoxDecoration(
-          color:
-              isSelected ? AppColors.primaryBlue.withValues(alpha: 0.1) : null,
-        ),
-        child: Row(
-          children: [
-            if (option.icon != null) ...[
-              Icon(
-                option.icon,
-                size: 16,
-                color:
-                    option.disabled
-                        ? AppColors.mediumGray
-                        : (isSelected
-                            ? AppColors.primaryBlue
-                            : AppColors.foregroundDark),
-              ),
-              const SizedBox(width: AppDimensions.paddingMedium),
-            ],
-            Expanded(
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: [
-                  Text(
-                    option.label,
-                    style: TextStyle(
-                      fontSize: 14,
-                      fontWeight:
-                          isSelected ? FontWeight.w600 : FontWeight.normal,
-                      color:
-                          option.disabled
-                              ? AppColors.mediumGray
-                              : (isSelected
-                                  ? AppColors.primaryBlue
-                                  : AppColors.foregroundDark),
-                    ),
-                  ),
-                  if (option.subtitle != null) ...[
-                    const SizedBox(height: 2),
-                    Text(
-                      option.subtitle!,
-                      style: const TextStyle(
-                        fontSize: 12,
-                        color: AppColors.mediumGray,
-                      ),
-                    ),
-                  ],
-                ],
-              ),
-            ),
-            if (isSelected)
-              const Icon(
-                CupertinoIcons.checkmark,
-                size: 16,
-                color: AppColors.primaryBlue,
-              ),
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/inputs/segmented_control.dart b/lib/components/inputs/segmented_control.dart
deleted file mode 100644
index 03880ce..0000000
--- a/lib/components/inputs/segmented_control.dart
+++ /dev/null
@@ -1,88 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// A segmented control component for selecting between a small number of options.
-///
-/// This component provides an iOS-style segmented control with
-/// customizable appearance and behavior.
-class SegmentedControl<T extends Object> extends StatelessWidget {
-  /// Creates a segmented control with the specified properties.
-  const SegmentedControl({
-    super.key,
-    required this.children,
-    required this.value,
-    required this.onValueChanged,
-    this.padding,
-    this.backgroundColor = AppColors.lightGray,
-    this.selectedColor = AppColors.primaryBlue,
-    this.borderColor = AppColors.borderGray,
-  });
-
-  /// The mapping of segment values to their display widgets.
-  final Map<T, Widget> children;
-
-  /// The currently selected segment value.
-  final T value;
-
-  /// Called when a new segment is selected.
-  final ValueChanged<T> onValueChanged;
-
-  /// Optional custom padding around the control.
-  final EdgeInsetsGeometry? padding;
-
-  /// Background color of the unselected segments.
-  final Color backgroundColor;
-
-  /// Color of the selected segment.
-  final Color selectedColor;
-
-  /// Color of the border around the control.
-  final Color borderColor;
-
-  @override
-  Widget build(BuildContext context) {
-    return Padding(
-      padding: padding ?? EdgeInsets.zero,
-      child: CupertinoSegmentedControl<T>(
-        children: children,
-        onValueChanged: onValueChanged,
-        groupValue: value,
-        padding: const EdgeInsets.all(AppDimensions.spacingXs),
-        borderColor: borderColor,
-        selectedColor: selectedColor,
-        unselectedColor: backgroundColor,
-      ),
-    );
-  }
-}
-
-/// A simple text segment for use with SegmentedControl.
-class TextSegment extends StatelessWidget {
-  /// Creates a text segment with the specified properties.
-  const TextSegment({super.key, required this.label, this.isSelected = false});
-
-  /// The text to display in the segment.
-  final String label;
-
-  /// Whether this segment is currently selected.
-  final bool isSelected;
-
-  @override
-  Widget build(BuildContext context) {
-    return Padding(
-      padding: const EdgeInsets.symmetric(
-        horizontal: AppDimensions.spacingM,
-        vertical: AppDimensions.spacingXs,
-      ),
-      child: Text(
-        label,
-        style: AppTextStyles.buttonSecondary.copyWith(
-          color: isSelected ? AppColors.white : AppColors.foregroundDark,
-          fontWeight: isSelected ? FontWeight.w600 : FontWeight.normal,
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/layout/app_aspect_ratio.dart b/lib/components/layout/app_aspect_ratio.dart
deleted file mode 100644
index b6adb8d..0000000
--- a/lib/components/layout/app_aspect_ratio.dart
+++ /dev/null
@@ -1,26 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-/// A widget that attempts to size the child to a specific aspect ratio.
-///
-/// providing a way to maintain consistent aspect ratios for content.
-class AppAspectRatio extends StatelessWidget {
-  /// Creates an aspect ratio widget.
-  const AppAspectRatio({
-    super.key,
-    required this.aspectRatio,
-    required this.child,
-  });
-
-  /// The aspect ratio to attempt to use.
-  ///
-  /// For example, a 16:9 aspect ratio would have a value of 16.0/9.0.
-  final double aspectRatio;
-
-  /// The widget to apply the aspect ratio to.
-  final Widget child;
-
-  @override
-  Widget build(BuildContext context) {
-    return AspectRatio(aspectRatio: aspectRatio, child: child);
-  }
-}
diff --git a/lib/components/layout/app_collapsible.dart b/lib/components/layout/app_collapsible.dart
deleted file mode 100644
index b6c4009..0000000
--- a/lib/components/layout/app_collapsible.dart
+++ /dev/null
@@ -1,174 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-/// A collapsible widget that can expand and collapse its content.
-///
-/// providing smooth expand/collapse animations for content sections.
-class AppCollapsible extends StatefulWidget {
-  /// Creates a collapsible widget.
-  const AppCollapsible({
-    super.key,
-    required this.child,
-    this.isExpanded = false,
-    this.onExpansionChanged,
-    this.duration = const Duration(milliseconds: 300),
-    this.curve = Curves.easeInOut,
-  });
-
-  /// The widget to show/hide when expanded/collapsed.
-  final Widget child;
-
-  /// Whether the collapsible is initially expanded.
-  final bool isExpanded;
-
-  /// Called when the expansion state changes.
-  final ValueChanged<bool>? onExpansionChanged;
-
-  /// The duration of the expand/collapse animation.
-  final Duration duration;
-
-  /// The curve to use for the expand/collapse animation.
-  final Curve curve;
-
-  @override
-  State<AppCollapsible> createState() => _AppCollapsibleState();
-}
-
-class _AppCollapsibleState extends State<AppCollapsible>
-    with SingleTickerProviderStateMixin {
-  late AnimationController _animationController;
-  late Animation<double> _animation;
-  late bool _isExpanded;
-
-  @override
-  void initState() {
-    super.initState();
-    _isExpanded = widget.isExpanded;
-
-    _animationController = AnimationController(
-      duration: widget.duration,
-      vsync: this,
-    );
-
-    _animation = CurvedAnimation(
-      parent: _animationController,
-      curve: widget.curve,
-    );
-
-    if (_isExpanded) {
-      _animationController.value = 1.0;
-    }
-  }
-
-  @override
-  void didUpdateWidget(AppCollapsible oldWidget) {
-    super.didUpdateWidget(oldWidget);
-
-    if (widget.isExpanded != oldWidget.isExpanded) {
-      _toggleExpansion(widget.isExpanded);
-    }
-
-    if (widget.duration != oldWidget.duration) {
-      _animationController.duration = widget.duration;
-    }
-  }
-
-  @override
-  void dispose() {
-    _animationController.dispose();
-    super.dispose();
-  }
-
-  void _toggleExpansion(bool expand) {
-    setState(() {
-      _isExpanded = expand;
-    });
-
-    if (expand) {
-      _animationController.forward();
-    } else {
-      _animationController.reverse();
-    }
-
-    widget.onExpansionChanged?.call(expand);
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return AnimatedBuilder(
-      animation: _animation,
-      builder: (context, child) {
-        return ClipRect(
-          child: Align(
-            alignment: Alignment.topCenter,
-            heightFactor: _animation.value,
-            child: widget.child,
-          ),
-        );
-      },
-    );
-  }
-}
-
-/// A collapsible widget with a trigger that controls the expansion state.
-class AppCollapsibleWithTrigger extends StatefulWidget {
-  /// Creates a collapsible widget with trigger.
-  const AppCollapsibleWithTrigger({
-    super.key,
-    required this.trigger,
-    required this.content,
-    this.initiallyExpanded = false,
-    this.duration = const Duration(milliseconds: 300),
-    this.curve = Curves.easeInOut,
-  });
-
-  /// The widget that acts as the trigger (usually a button or header).
-  final Widget trigger;
-
-  /// The content to show/hide when expanded/collapsed.
-  final Widget content;
-
-  /// Whether the collapsible is initially expanded.
-  final bool initiallyExpanded;
-
-  /// The duration of the expand/collapse animation.
-  final Duration duration;
-
-  /// The curve to use for the expand/collapse animation.
-  final Curve curve;
-
-  @override
-  State<AppCollapsibleWithTrigger> createState() =>
-      _AppCollapsibleWithTriggerState();
-}
-
-class _AppCollapsibleWithTriggerState extends State<AppCollapsibleWithTrigger> {
-  late bool _isExpanded;
-
-  @override
-  void initState() {
-    super.initState();
-    _isExpanded = widget.initiallyExpanded;
-  }
-
-  void _toggle() {
-    setState(() {
-      _isExpanded = !_isExpanded;
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        GestureDetector(onTap: _toggle, child: widget.trigger),
-        AppCollapsible(
-          isExpanded: _isExpanded,
-          duration: widget.duration,
-          curve: widget.curve,
-          child: widget.content,
-        ),
-      ],
-    );
-  }
-}
diff --git a/lib/components/layout/app_resizable_panel.dart b/lib/components/layout/app_resizable_panel.dart
deleted file mode 100644
index 498ab70..0000000
--- a/lib/components/layout/app_resizable_panel.dart
+++ /dev/null
@@ -1,271 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-// TODO: Implement Resizable Panel Group, Panel, and Handle.
-// --- Data Models (if necessary) ---
-// May not be strictly needed if state is managed within widgets.
-
-// --- Widgets ---
-
-/// Main container for a group of resizable panels.
-/// Manages the layout (horizontal or vertical) and distribution of space.
-class AppResizablePanelGroup extends StatefulWidget {
-  final Axis direction;
-  final List<AppResizablePanel> children;
-  final bool showHandles; // Whether to show resize handles between panels
-  // TODO: Add initial sizes, min/max sizes per panel, onLayoutChanged callback etc.
-
-  const AppResizablePanelGroup({
-    super.key,
-    required this.children,
-    this.direction = Axis.horizontal,
-    this.showHandles = true,
-  }) : assert(
-         children.length >= 2,
-         "ResizablePanelGroup must have at least two children.",
-       );
-
-  @override
-  AppResizablePanelGroupState createState() => AppResizablePanelGroupState();
-}
-
-class AppResizablePanelGroupState extends State<AppResizablePanelGroup> {
-  // List to store the flex factors or explicit sizes of the panels.
-  // For simplicity, let's start with flex factors.
-  late List<double> _panelFlexFactors;
-
-  @override
-  void initState() {
-    super.initState();
-    // Initialize flex factors, e.g., distribute equally or based on initial sizes.
-    // For now, equal distribution.
-    _panelFlexFactors = List.generate(widget.children.length, (index) => 1.0);
-  }
-
-  void _onDragUpdate(int handleIndex, DragUpdateDetails details) {
-    setState(() {
-      // This is a simplified drag logic.
-      // It needs to be more robust, considering direction, min/max sizes, etc.
-      final delta =
-          widget.direction == Axis.horizontal
-              ? details.delta.dx
-              : details.delta.dy;
-
-      // Naive flex adjustment:
-      // Adjust flex of panel before and after the handle.
-      // Needs to be bounded and ensure sum of flexes remains consistent or handled appropriately.
-      // This logic is highly simplified and needs significant refinement.
-
-      if (delta > 0) {
-        // Dragging right or down
-        if (_panelFlexFactors[handleIndex] > 0.1) {
-          // Arbitrary min flex
-          _panelFlexFactors[handleIndex] += 0.01 * delta.abs();
-          if (handleIndex + 1 < _panelFlexFactors.length) {
-            _panelFlexFactors[handleIndex + 1] -= 0.01 * delta.abs();
-            if (_panelFlexFactors[handleIndex + 1] < 0.1) {
-              _panelFlexFactors[handleIndex + 1] = 0.1;
-            }
-          }
-        }
-      } else {
-        // Dragging left or up
-        if (handleIndex + 1 < _panelFlexFactors.length &&
-            _panelFlexFactors[handleIndex + 1] > 0.1) {
-          _panelFlexFactors[handleIndex] -= 0.01 * delta.abs();
-          if (_panelFlexFactors[handleIndex] < 0.1) {
-            _panelFlexFactors[handleIndex] = 0.1;
-          }
-
-          _panelFlexFactors[handleIndex + 1] += 0.01 * delta.abs();
-        }
-      }
-      // Normalize flex factors (optional, depending on strategy)
-      // double sum = _panelFlexFactors.reduce((a, b) => a + b);
-      // _panelFlexFactors = _panelFlexFactors.map((f) => f / sum * widget.children.length).toList();
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    List<Widget> widgetsWithHandles = [];
-    for (int i = 0; i < widget.children.length; i++) {
-      widgetsWithHandles.add(
-        Flexible(
-          flex: (_panelFlexFactors[i] * 100).toInt(), // Flex must be int
-          child: widget.children[i],
-        ),
-      );
-      if (widget.showHandles && i < widget.children.length - 1) {
-        widgetsWithHandles.add(
-          AppResizableHandle(
-            direction: widget.direction,
-            onDragUpdate: (details) => _onDragUpdate(i, details),
-            // withHandleIcon: true, // Example: make this configurable
-          ),
-        );
-      }
-    }
-
-    if (widget.direction == Axis.horizontal) {
-      return Row(
-        crossAxisAlignment: CrossAxisAlignment.stretch,
-        children: widgetsWithHandles,
-      );
-    } else {
-      return Column(
-        crossAxisAlignment: CrossAxisAlignment.stretch,
-        children: widgetsWithHandles,
-      );
-    }
-  }
-}
-
-/// Represents a single panel within a [AppResizablePanelGroup].
-/// This widget itself might just be a container for its child content.
-class AppResizablePanel extends StatelessWidget {
-  final Widget child;
-  final int? initialFlex; // Example for initial sizing
-  final int? minFlex;
-  // Or use constraints:
-  // final double? initialSize;
-  // final double? minSize;
-  // final double? maxSize;
-
-  const AppResizablePanel({
-    super.key,
-    required this.child,
-    this.initialFlex,
-    this.minFlex,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    // The actual sizing is controlled by the parent AppResizablePanelGroup
-    // This widget primarily holds the content and panel-specific configurations.
-    return Container(
-      // color: Colors.grey[300], // For debugging panel boundaries
-      child: child,
-    );
-  }
-}
-
-/// The draggable handle used to resize panels.
-class AppResizableHandle extends StatelessWidget {
-  final Axis direction;
-  final bool withHandleIcon;
-  final ValueChanged<DragUpdateDetails> onDragUpdate;
-  final VoidCallback? onDragStart;
-  final VoidCallback? onDragEnd;
-
-  const AppResizableHandle({
-    super.key,
-    required this.direction,
-    required this.onDragUpdate,
-    this.onDragStart,
-    this.onDragEnd,
-    this.withHandleIcon = false, // Default to no icon as per mock's base handle
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: "relative flex w-px items-center justify-center bg-border ..."
-    // Vertical: "h-px data-[panel-group-direction=vertical]:w-full ..."
-    // Handle icon div: "z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border"
-    // GripVertical: "h-2.5 w-2.5" (10px)
-
-    final double handleThickness =
-        withHandleIcon
-            ? AppDimensions.spacingS
-            : 1.0; // w-px or thicker for icon
-    final Color handleColor = AppColors.border;
-
-    Widget handleCore;
-    if (withHandleIcon) {
-      handleCore = Container(
-        width:
-            direction == Axis.horizontal
-                ? AppDimensions.spacingL
-                : null, // w-3 (approx 12px, use 24px for touch)
-        height:
-            direction == Axis.vertical
-                ? AppDimensions.spacingL
-                : null, // h-4 (approx 16px, use 24px for touch)
-        decoration: BoxDecoration(
-          color: AppColors.border.withValues(
-            alpha: 0.8,
-          ), // bg-border (slightly transparent for effect)
-          border: Border.all(color: AppColors.border),
-          borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
-        ),
-        child: Icon(
-          direction == Axis.horizontal
-              ? CupertinoIcons.ellipsis
-              : CupertinoIcons
-                  .ellipsis, // Placeholder, GripVertical is specific
-          // CupertinoIcons.line_horizontal_3_decrease for vertical grip?
-          // Or use a custom painter for GripVertical if exact match needed.
-          // For now, using a standard icon.
-          size: AppDimensions.iconSizeSmall, // h-2.5 w-2.5 (10px, use 16px)
-          color: AppColors.foregroundDark.withValues(alpha: 0.7),
-        ),
-      );
-    } else {
-      handleCore = SizedBox(
-        width: direction == Axis.horizontal ? handleThickness : null,
-        height: direction == Axis.vertical ? handleThickness : null,
-        // child: Container(color: handleColor), // The line itself
-      );
-    }
-
-    return GestureDetector(
-      onHorizontalDragUpdate:
-          direction == Axis.horizontal ? onDragUpdate : null,
-      onVerticalDragUpdate: direction == Axis.vertical ? onDragUpdate : null,
-      onHorizontalDragStart:
-          direction == Axis.horizontal ? (_) => onDragStart?.call() : null,
-      onVerticalDragStart:
-          direction == Axis.vertical ? (_) => onDragStart?.call() : null,
-      onHorizontalDragEnd:
-          direction == Axis.horizontal ? (_) => onDragEnd?.call() : null,
-      onVerticalDragEnd:
-          direction == Axis.vertical ? (_) => onDragEnd?.call() : null,
-      child: MouseRegion(
-        cursor:
-            direction == Axis.horizontal
-                ? SystemMouseCursors.resizeLeftRight
-                : SystemMouseCursors.resizeUpDown,
-        child: Container(
-          width:
-              direction == Axis.horizontal
-                  ? (withHandleIcon
-                      ? AppDimensions.spacingL
-                      : AppDimensions.spacingXs)
-                  : null,
-          height:
-              direction == Axis.vertical
-                  ? (withHandleIcon
-                      ? AppDimensions.spacingL
-                      : AppDimensions.spacingXs)
-                  : null,
-          color:
-              withHandleIcon
-                  ? CupertinoColors.transparent
-                  : handleColor, // Line color or transparent if icon shown
-          alignment: Alignment.center,
-          child: handleCore,
-        ),
-      ),
-    );
-  }
-}
-
-// TODO:
-// - Implement robust flex/size calculation in _AppResizablePanelGroupState.
-// - Add support for min/max sizes for panels.
-// - Implement `initialSize` properties for panels.
-// - Refine handle appearance and interaction (focus rings, exact icon).
-// - Consider using a package like `multi_split_view` for production-ready features if this becomes too complex.
-// - Add keyboard support for resizing.
-// - Ensure proper state restoration (e.g., on hot reload or if sizes are persisted).
diff --git a/lib/components/layout/app_scroll_area.dart b/lib/components/layout/app_scroll_area.dart
deleted file mode 100644
index 214f123..0000000
--- a/lib/components/layout/app_scroll_area.dart
+++ /dev/null
@@ -1,219 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-/// A customizable scroll area with consistent styling.
-///
-/// providing a consistent scrollable area with optional custom scrollbars.
-class AppScrollArea extends StatelessWidget {
-  /// Creates a scroll area.
-  const AppScrollArea({
-    super.key,
-    required this.child,
-    this.scrollDirection = Axis.vertical,
-    this.controller,
-    this.showScrollbar = true,
-    this.scrollbarThickness = 6.0,
-    this.scrollbarRadius = 3.0,
-    this.scrollbarColor,
-    this.padding,
-    this.physics,
-    this.clipBehavior = Clip.hardEdge,
-  });
-
-  /// The widget to display inside the scroll area.
-  final Widget child;
-
-  /// The direction in which the scroll area scrolls.
-  final Axis scrollDirection;
-
-  /// The scroll controller for the scroll area.
-  final ScrollController? controller;
-
-  /// Whether to show the scrollbar.
-  final bool showScrollbar;
-
-  /// The thickness of the scrollbar.
-  final double scrollbarThickness;
-
-  /// The radius of the scrollbar.
-  final double scrollbarRadius;
-
-  /// The color of the scrollbar. Defaults to medium gray.
-  final Color? scrollbarColor;
-
-  /// Padding around the scrollable content.
-  final EdgeInsetsGeometry? padding;
-
-  /// The scroll physics to use.
-  final ScrollPhysics? physics;
-
-  /// The clip behavior for the scroll area.
-  final Clip clipBehavior;
-
-  @override
-  Widget build(BuildContext context) {
-    Widget scrollableChild = SingleChildScrollView(
-      scrollDirection: scrollDirection,
-      controller: controller,
-      padding: padding,
-      physics: physics ?? const BouncingScrollPhysics(),
-      clipBehavior: clipBehavior,
-      child: child,
-    );
-
-    if (showScrollbar) {
-      scrollableChild = CupertinoScrollbar(
-        controller: controller,
-        thickness: scrollbarThickness,
-        radius: Radius.circular(scrollbarRadius),
-        thumbVisibility: false, // Show on scroll only
-        child: scrollableChild,
-      );
-    }
-
-    return scrollableChild;
-  }
-}
-
-/// A scroll area that always shows scrollbars.
-class AppScrollAreaWithVisibleScrollbar extends StatelessWidget {
-  /// Creates a scroll area with always visible scrollbar.
-  const AppScrollAreaWithVisibleScrollbar({
-    super.key,
-    required this.child,
-    this.scrollDirection = Axis.vertical,
-    this.controller,
-    this.scrollbarThickness = 6.0,
-    this.scrollbarRadius = 3.0,
-    this.scrollbarColor,
-    this.padding,
-    this.physics,
-    this.clipBehavior = Clip.hardEdge,
-  });
-
-  /// The widget to display inside the scroll area.
-  final Widget child;
-
-  /// The direction in which the scroll area scrolls.
-  final Axis scrollDirection;
-
-  /// The scroll controller for the scroll area.
-  final ScrollController? controller;
-
-  /// The thickness of the scrollbar.
-  final double scrollbarThickness;
-
-  /// The radius of the scrollbar.
-  final double scrollbarRadius;
-
-  /// The color of the scrollbar.
-  final Color? scrollbarColor;
-
-  /// Padding around the scrollable content.
-  final EdgeInsetsGeometry? padding;
-
-  /// The scroll physics to use.
-  final ScrollPhysics? physics;
-
-  /// The clip behavior for the scroll area.
-  final Clip clipBehavior;
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoScrollbar(
-      controller: controller,
-      thickness: scrollbarThickness,
-      radius: Radius.circular(scrollbarRadius),
-      thumbVisibility: true, // Always show
-      child: SingleChildScrollView(
-        scrollDirection: scrollDirection,
-        controller: controller,
-        padding: padding,
-        physics: physics ?? const BouncingScrollPhysics(),
-        clipBehavior: clipBehavior,
-        child: child,
-      ),
-    );
-  }
-}
-
-/// A bidirectional scroll area that can scroll both horizontally and vertically.
-class AppBidirectionalScrollArea extends StatelessWidget {
-  /// Creates a bidirectional scroll area.
-  const AppBidirectionalScrollArea({
-    super.key,
-    required this.child,
-    this.horizontalController,
-    this.verticalController,
-    this.showScrollbars = true,
-    this.scrollbarThickness = 6.0,
-    this.scrollbarRadius = 3.0,
-    this.scrollbarColor,
-    this.padding,
-    this.horizontalPhysics,
-    this.verticalPhysics,
-    this.clipBehavior = Clip.hardEdge,
-  });
-
-  /// The widget to display inside the scroll area.
-  final Widget child;
-
-  /// The horizontal scroll controller.
-  final ScrollController? horizontalController;
-
-  /// The vertical scroll controller.
-  final ScrollController? verticalController;
-
-  /// Whether to show the scrollbars.
-  final bool showScrollbars;
-
-  /// The thickness of the scrollbars.
-  final double scrollbarThickness;
-
-  /// The radius of the scrollbars.
-  final double scrollbarRadius;
-
-  /// The color of the scrollbars.
-  final Color? scrollbarColor;
-
-  /// Padding around the scrollable content.
-  final EdgeInsetsGeometry? padding;
-
-  /// The horizontal scroll physics to use.
-  final ScrollPhysics? horizontalPhysics;
-
-  /// The vertical scroll physics to use.
-  final ScrollPhysics? verticalPhysics;
-
-  /// The clip behavior for the scroll area.
-  final Clip clipBehavior;
-
-  @override
-  Widget build(BuildContext context) {
-    Widget scrollableChild = SingleChildScrollView(
-      scrollDirection: Axis.horizontal,
-      controller: horizontalController,
-      physics: horizontalPhysics ?? const BouncingScrollPhysics(),
-      child: SingleChildScrollView(
-        scrollDirection: Axis.vertical,
-        controller: verticalController,
-        padding: padding,
-        physics: verticalPhysics ?? const BouncingScrollPhysics(),
-        clipBehavior: clipBehavior,
-        child: child,
-      ),
-    );
-
-    if (showScrollbars) {
-      // Add horizontal scrollbar
-      scrollableChild = CupertinoScrollbar(
-        controller: horizontalController,
-        thickness: scrollbarThickness,
-        radius: Radius.circular(scrollbarRadius),
-        thumbVisibility: false,
-        child: scrollableChild,
-      );
-    }
-
-    return scrollableChild;
-  }
-}
diff --git a/lib/components/layout/app_separator.dart b/lib/components/layout/app_separator.dart
deleted file mode 100644
index c32f404..0000000
--- a/lib/components/layout/app_separator.dart
+++ /dev/null
@@ -1,113 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-
-/// A separator widget that creates visual divisions between content.
-///
-/// providing consistent visual separation throughout the application.
-class AppSeparator extends StatelessWidget {
-  /// Creates a separator widget.
-  const AppSeparator({
-    super.key,
-    this.orientation = Axis.horizontal,
-    this.thickness = 1.0,
-    this.color,
-    this.margin,
-    this.decorative = true,
-  });
-
-  /// The orientation of the separator (horizontal or vertical).
-  final Axis orientation;
-
-  /// The thickness of the separator line.
-  final double thickness;
-
-  /// The color of the separator. Defaults to border gray.
-  final Color? color;
-
-  /// Optional margin around the separator.
-  final EdgeInsetsGeometry? margin;
-
-  /// Whether this separator is purely decorative.
-  /// When true, it's ignored by screen readers.
-  final bool decorative;
-
-  @override
-  Widget build(BuildContext context) {
-    final Widget separator = Container(
-      width: orientation == Axis.horizontal ? double.infinity : thickness,
-      height: orientation == Axis.vertical ? double.infinity : thickness,
-      color: color ?? AppColors.borderGray,
-    );
-
-    final Widget separatorWithMargin =
-        margin != null
-            ? Padding(padding: margin!, child: separator)
-            : separator;
-
-    if (decorative) {
-      return ExcludeSemantics(child: separatorWithMargin);
-    }
-
-    return Semantics(label: 'Separator', child: separatorWithMargin);
-  }
-}
-
-/// A horizontal separator with common styling.
-class AppHorizontalSeparator extends StatelessWidget {
-  /// Creates a horizontal separator.
-  const AppHorizontalSeparator({
-    super.key,
-    this.thickness = 1.0,
-    this.color,
-    this.margin = const EdgeInsets.symmetric(vertical: 8.0),
-  });
-
-  /// The thickness of the separator line.
-  final double thickness;
-
-  /// The color of the separator.
-  final Color? color;
-
-  /// Margin around the separator.
-  final EdgeInsetsGeometry? margin;
-
-  @override
-  Widget build(BuildContext context) {
-    return AppSeparator(
-      orientation: Axis.horizontal,
-      thickness: thickness,
-      color: color,
-      margin: margin,
-    );
-  }
-}
-
-/// A vertical separator with common styling.
-class AppVerticalSeparator extends StatelessWidget {
-  /// Creates a vertical separator.
-  const AppVerticalSeparator({
-    super.key,
-    this.thickness = 1.0,
-    this.color,
-    this.margin = const EdgeInsets.symmetric(horizontal: 8.0),
-  });
-
-  /// The thickness of the separator line.
-  final double thickness;
-
-  /// The color of the separator.
-  final Color? color;
-
-  /// Margin around the separator.
-  final EdgeInsetsGeometry? margin;
-
-  @override
-  Widget build(BuildContext context) {
-    return AppSeparator(
-      orientation: Axis.vertical,
-      thickness: thickness,
-      color: color,
-      margin: margin,
-    );
-  }
-}
diff --git a/lib/components/layout/app_sheet.dart b/lib/components/layout/app_sheet.dart
deleted file mode 100644
index 6664399..0000000
--- a/lib/components/layout/app_sheet.dart
+++ /dev/null
@@ -1,245 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// The side from which the sheet should slide in.
-enum AppSheetSide { left, right, top, bottom }
-
-/// A sheet widget that slides in from a specified side of the screen.
-///
-/// providing modal-like overlays that slide in from screen edges.
-class AppSheet extends StatelessWidget {
-  /// Creates a sheet widget.
-  const AppSheet({
-    super.key,
-    required this.child,
-    this.side = AppSheetSide.right,
-    this.width,
-    this.height,
-    this.backgroundColor,
-    this.barrierDismissible = true,
-    this.barrierColor,
-  });
-
-  /// The content to display in the sheet.
-  final Widget child;
-
-  /// The side from which the sheet slides in.
-  final AppSheetSide side;
-
-  /// The width of the sheet (for left/right sheets).
-  final double? width;
-
-  /// The height of the sheet (for top/bottom sheets).
-  final double? height;
-
-  /// The background color of the sheet.
-  final Color? backgroundColor;
-
-  /// Whether tapping outside the sheet dismisses it.
-  final bool barrierDismissible;
-
-  /// The color of the barrier behind the sheet.
-  final Color? barrierColor;
-
-  /// Shows the sheet using the specified context.
-  static Future<T?> show<T>({
-    required BuildContext context,
-    required Widget child,
-    AppSheetSide side = AppSheetSide.right,
-    double? width,
-    double? height,
-    Color? backgroundColor,
-    bool barrierDismissible = true,
-    Color? barrierColor,
-  }) {
-    return showCupertinoModalPopup<T>(
-      context: context,
-      barrierDismissible: barrierDismissible,
-      barrierColor:
-          barrierColor ?? CupertinoColors.black.withValues(alpha: 0.3),
-      builder:
-          (BuildContext context) => AppSheet(
-            side: side,
-            width: width,
-            height: height,
-            backgroundColor: backgroundColor,
-            barrierDismissible: barrierDismissible,
-            barrierColor: barrierColor,
-            child: child,
-          ),
-    );
-  }
-
-  double _getWidth(BuildContext context) {
-    final screenWidth = MediaQuery.of(context).size.width;
-
-    switch (side) {
-      case AppSheetSide.left:
-      case AppSheetSide.right:
-        return width ?? (screenWidth * 0.8).clamp(300.0, 400.0);
-      case AppSheetSide.top:
-      case AppSheetSide.bottom:
-        return screenWidth;
-    }
-  }
-
-  double _getHeight(BuildContext context) {
-    final screenHeight = MediaQuery.of(context).size.height;
-
-    switch (side) {
-      case AppSheetSide.top:
-      case AppSheetSide.bottom:
-        return height ?? (screenHeight * 0.7).clamp(200.0, 600.0);
-      case AppSheetSide.left:
-      case AppSheetSide.right:
-        return screenHeight;
-    }
-  }
-
-  Alignment _getAlignment() {
-    switch (side) {
-      case AppSheetSide.left:
-        return Alignment.centerLeft;
-      case AppSheetSide.right:
-        return Alignment.centerRight;
-      case AppSheetSide.top:
-        return Alignment.topCenter;
-      case AppSheetSide.bottom:
-        return Alignment.bottomCenter;
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Align(
-      alignment: _getAlignment(),
-      child: Container(
-        width: _getWidth(context),
-        height: _getHeight(context),
-        decoration: BoxDecoration(
-          color: backgroundColor ?? AppColors.backgroundWhite,
-          borderRadius: _getBorderRadius(),
-          boxShadow: [
-            BoxShadow(
-              color: CupertinoColors.black.withValues(alpha: 0.1),
-              blurRadius: 20,
-              offset: _getShadowOffset(),
-            ),
-          ],
-        ),
-        child: ClipRRect(borderRadius: _getBorderRadius(), child: child),
-      ),
-    );
-  }
-
-  BorderRadius _getBorderRadius() {
-    const radius = Radius.circular(AppDimensions.radiusLarge);
-
-    switch (side) {
-      case AppSheetSide.left:
-        return const BorderRadius.only(topRight: radius, bottomRight: radius);
-      case AppSheetSide.right:
-        return const BorderRadius.only(topLeft: radius, bottomLeft: radius);
-      case AppSheetSide.top:
-        return const BorderRadius.only(bottomLeft: radius, bottomRight: radius);
-      case AppSheetSide.bottom:
-        return const BorderRadius.only(topLeft: radius, topRight: radius);
-    }
-  }
-
-  Offset _getShadowOffset() {
-    switch (side) {
-      case AppSheetSide.left:
-        return const Offset(2, 0);
-      case AppSheetSide.right:
-        return const Offset(-2, 0);
-      case AppSheetSide.top:
-        return const Offset(0, 2);
-      case AppSheetSide.bottom:
-        return const Offset(0, -2);
-    }
-  }
-}
-
-/// A sheet header with title and optional close button.
-class AppSheetHeader extends StatelessWidget {
-  /// Creates a sheet header.
-  const AppSheetHeader({
-    super.key,
-    required this.title,
-    this.subtitle,
-    this.showCloseButton = true,
-    this.onClose,
-    this.actions = const [],
-  });
-
-  /// The title to display.
-  final String title;
-
-  /// Optional subtitle to display.
-  final String? subtitle;
-
-  /// Whether to show the close button.
-  final bool showCloseButton;
-
-  /// Callback when the close button is tapped.
-  final VoidCallback? onClose;
-
-  /// Additional action widgets to display.
-  final List<Widget> actions;
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      padding: const EdgeInsets.all(AppDimensions.paddingLarge),
-      decoration: const BoxDecoration(
-        border: Border(
-          bottom: BorderSide(color: AppColors.borderGray, width: 1.0),
-        ),
-      ),
-      child: Row(
-        children: [
-          Expanded(
-            child: Column(
-              crossAxisAlignment: CrossAxisAlignment.start,
-              children: [
-                Text(
-                  title,
-                  style: const TextStyle(
-                    fontSize: 20,
-                    fontWeight: FontWeight.w600,
-                    color: AppColors.foregroundDark,
-                  ),
-                ),
-                if (subtitle != null) ...[
-                  const SizedBox(height: 4),
-                  Text(
-                    subtitle!,
-                    style: const TextStyle(
-                      fontSize: 14,
-                      color: AppColors.mediumGray,
-                    ),
-                  ),
-                ],
-              ],
-            ),
-          ),
-          ...actions,
-          if (showCloseButton) ...[
-            const SizedBox(width: AppDimensions.paddingMedium),
-            CupertinoButton(
-              padding: EdgeInsets.zero,
-              onPressed: onClose ?? () => Navigator.of(context).pop(),
-              child: const Icon(
-                CupertinoIcons.xmark,
-                color: AppColors.mediumGray,
-                size: 20,
-              ),
-            ),
-          ],
-        ],
-      ),
-    );
-  }
-}
diff --git a/lib/components/layout/page_scaffold.dart b/lib/components/layout/page_scaffold.dart
deleted file mode 100644
index cea89aa..0000000
--- a/lib/components/layout/page_scaffold.dart
+++ /dev/null
@@ -1,124 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import 'responsive_container.dart';
-
-/// Page layout type options to control content constraints
-enum PageLayoutType {
-  /// Full-width layout with no content constraints
-  fullWidth,
-
-  /// Centered content with responsive width constraints
-  centered,
-
-  /// Narrow content useful for forms and focused content
-  narrow,
-}
-
-/// A scaffold component that provides a consistent page structure.
-///
-/// This component wraps pages with a consistent layout including optional
-/// navigation bar, content area, and footer. It handles responsive behavior
-/// automatically based on screen size.
-class PageScaffold extends StatelessWidget {
-  /// Creates a page scaffold with the specified properties.
-  const PageScaffold({
-    super.key,
-    required this.body,
-    this.navigationBar,
-    this.backgroundColor = AppColors.backgroundWhite,
-    this.padding,
-    this.layoutType = PageLayoutType.centered,
-    this.resizeToAvoidBottomInset = true,
-    this.footer,
-    this.scrollable = true,
-    this.safeAreaBottom = true,
-    this.safeAreaTop = true,
-  });
-
-  /// Main content of the page
-  final Widget body;
-
-  /// Optional navigation bar to display at the top
-  final ObstructingPreferredSizeWidget? navigationBar;
-
-  /// Background color of the page
-  final Color backgroundColor;
-
-  /// Optional custom padding for the page content
-  final EdgeInsetsGeometry? padding;
-
-  /// Layout type that controls how content is constrained
-  final PageLayoutType layoutType;
-
-  /// Whether to resize when the keyboard appears
-  final bool resizeToAvoidBottomInset;
-
-  /// Optional footer to display at the bottom of the page
-  final Widget? footer;
-
-  /// Whether the page content should be scrollable
-  final bool scrollable;
-
-  /// Whether to apply safe area at the bottom
-  final bool safeAreaBottom;
-
-  /// Whether to apply safe area at the top
-  final bool safeAreaTop;
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: navigationBar,
-      backgroundColor: backgroundColor,
-      resizeToAvoidBottomInset: resizeToAvoidBottomInset,
-      child: SafeArea(
-        top: safeAreaTop,
-        bottom: safeAreaBottom,
-        child: Column(
-          children: [
-            Expanded(child: _buildContent(context)),
-            if (footer != null) footer!,
-          ],
-        ),
-      ),
-    );
-  }
-
-  /// Builds the main content area based on layout type
-  Widget _buildContent(BuildContext context) {
-    Widget content;
-
-    // Apply padding to the body content
-    final paddedBody = Padding(
-      padding: padding ?? EdgeInsets.zero,
-      child: body,
-    );
-
-    // Make content scrollable if needed
-    if (scrollable) {
-      content = CupertinoScrollbar(
-        child: SingleChildScrollView(
-          physics: const AlwaysScrollableScrollPhysics(),
-          child: paddedBody,
-        ),
-      );
-    } else {
-      content = paddedBody;
-    }
-
-    // Apply appropriate responsive container based on layout type
-    switch (layoutType) {
-      case PageLayoutType.fullWidth:
-        return content;
-      case PageLayoutType.centered:
-        return ResponsiveContainer(child: content);
-      case PageLayoutType.narrow:
-        return ResponsiveContainer(
-          mobileWidth: double.infinity,
-          tabletWidth: 550,
-          desktopWidth: 650,
-          child: content,
-        );
-    }
-  }
-}
diff --git a/lib/components/layout/responsive_container.dart b/lib/components/layout/responsive_container.dart
deleted file mode 100644
index 21d4e48..0000000
--- a/lib/components/layout/responsive_container.dart
+++ /dev/null
@@ -1,84 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A container that adapts its layout based on screen size.
-///
-/// This component helps create responsive layouts that work well across
-/// different devices and screen sizes, from mobile to desktop.
-class ResponsiveContainer extends StatelessWidget {
-  /// Creates a responsive container with the specified properties.
-  const ResponsiveContainer({
-    super.key,
-    required this.child,
-    this.mobileWidth = double.infinity,
-    this.tabletWidth = 700,
-    this.desktopWidth = 1100,
-    this.maxWidth,
-    this.alignment = Alignment.center,
-    this.padding,
-  });
-
-  /// The child widget to display
-  final Widget child;
-
-  /// Width to use on mobile devices
-  final double mobileWidth;
-
-  /// Maximum width to use on tablet devices
-  final double tabletWidth;
-
-  /// Maximum width to use on desktop devices
-  final double desktopWidth;
-
-  /// Overall maximum width constraint
-  final double? maxWidth;
-
-  /// How to align the child within the container
-  final Alignment alignment;
-
-  /// Optional padding around the container
-  final EdgeInsetsGeometry? padding;
-
-  @override
-  Widget build(BuildContext context) {
-    return LayoutBuilder(
-      builder: (context, constraints) {
-        // Determine current device type based on width
-        final screenWidth = constraints.maxWidth;
-
-        // Calculate appropriate width based on screen size
-        double containerWidth;
-        EdgeInsetsGeometry effectivePadding;
-
-        if (screenWidth >= AppDimensions.breakpointL) {
-          // Desktop layout
-          containerWidth = maxWidth ?? desktopWidth;
-          effectivePadding =
-              padding ??
-              const EdgeInsets.symmetric(horizontal: AppDimensions.spacingXl);
-        } else if (screenWidth >= AppDimensions.breakpointM) {
-          // Tablet layout
-          containerWidth = maxWidth ?? tabletWidth;
-          effectivePadding =
-              padding ??
-              const EdgeInsets.symmetric(horizontal: AppDimensions.spacingL);
-        } else {
-          // Mobile layout
-          containerWidth = maxWidth ?? mobileWidth;
-          effectivePadding =
-              padding ??
-              const EdgeInsets.symmetric(horizontal: AppDimensions.spacingM);
-        }
-
-        return Align(
-          alignment: alignment,
-          child: Container(
-            padding: effectivePadding,
-            constraints: BoxConstraints(maxWidth: containerWidth),
-            child: child,
-          ),
-        );
-      },
-    );
-  }
-}
diff --git a/lib/components/navigation/app_breadcrumbs.dart b/lib/components/navigation/app_breadcrumbs.dart
deleted file mode 100644
index 4868111..0000000
--- a/lib/components/navigation/app_breadcrumbs.dart
+++ /dev/null
@@ -1,177 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// Represents a single item in the AppBreadcrumbs widget.
-class BreadcrumbItem {
-  final String text;
-  final VoidCallback? onTap;
-  final IconData? icon;
-
-  BreadcrumbItem({required this.text, this.onTap, this.icon});
-}
-
-/// A Cupertino-styled breadcrumbs navigation widget.
-class AppBreadcrumbs extends StatelessWidget {
-  final List<BreadcrumbItem> items;
-  final IconData separatorIcon;
-  final TextStyle? activeTextStyle;
-  final TextStyle? inactiveTextStyle;
-  final Color? separatorColor;
-
-  const AppBreadcrumbs({
-    super.key,
-    required this.items,
-    this.separatorIcon = CupertinoIcons.chevron_right,
-    this.activeTextStyle,
-    this.inactiveTextStyle,
-    this.separatorColor,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    if (items.isEmpty) {
-      return const SizedBox.shrink();
-    }
-
-    final effectiveActiveTextStyle =
-        activeTextStyle ??
-        AppTextStyles.bodySmall.copyWith(
-          color: AppColors.foregroundDark,
-          fontWeight:
-              FontWeight.normal, // Changed from FontWeight.w600 to normal
-        );
-    final effectiveInactiveTextStyle =
-        inactiveTextStyle ??
-        AppTextStyles.bodySmall.copyWith(color: AppColors.mediumGray);
-    final effectiveSeparatorColor = separatorColor ?? AppColors.mediumGray;
-
-    List<Widget> breadcrumbWidgets = [];
-
-    for (int i = 0; i < items.length; i++) {
-      final item = items[i];
-      final bool isLastItem = i == items.length - 1;
-
-      Widget textWidget = Text(
-        item.text,
-        style:
-            isLastItem ? effectiveActiveTextStyle : effectiveInactiveTextStyle,
-        overflow: TextOverflow.ellipsis,
-      );
-
-      if (item.icon != null) {
-        textWidget = Row(
-          mainAxisSize: MainAxisSize.min,
-          children: [
-            Icon(
-              item.icon,
-              size:
-                  (isLastItem
-                      ? effectiveActiveTextStyle.fontSize
-                      : effectiveInactiveTextStyle.fontSize) ??
-                  AppDimensions.iconSizeSmall,
-              color:
-                  isLastItem
-                      ? effectiveActiveTextStyle.color
-                      : effectiveInactiveTextStyle.color,
-            ),
-            const SizedBox(width: AppDimensions.spacingXs / 2),
-            Flexible(child: textWidget),
-          ],
-        );
-      }
-
-      if (item.onTap != null && !isLastItem) {
-        breadcrumbWidgets.add(
-          CupertinoButton(
-            padding: EdgeInsets.zero,
-            minSize: 0,
-            onPressed: item.onTap,
-            child: textWidget,
-          ),
-        );
-      } else {
-        breadcrumbWidgets.add(
-          Padding(
-            padding: const EdgeInsets.symmetric(
-              vertical: AppDimensions.spacingXs / 2,
-            ), // Align with button tap target
-            child: textWidget,
-          ),
-        );
-      }
-
-      if (!isLastItem) {
-        breadcrumbWidgets.add(
-          Padding(
-            padding: const EdgeInsets.symmetric(
-              horizontal: AppDimensions.spacingXs / 2,
-            ),
-            child: Icon(
-              separatorIcon,
-              size: AppDimensions.iconSizeSmall,
-              color: effectiveSeparatorColor,
-            ),
-          ),
-        );
-      }
-    }
-
-    return Wrap(
-      crossAxisAlignment: WrapCrossAlignment.center,
-      children: breadcrumbWidgets,
-    );
-  }
-}
-
-// Example Usage:
-/*
-class MyBreadcrumbsPage extends StatefulWidget {
-  const MyBreadcrumbsPage({super.key});
-
-  @override
-  State<MyBreadcrumbsPage> createState() => _MyBreadcrumbsPageState();
-}
-
-class _MyBreadcrumbsPageState extends State<MyBreadcrumbsPage> {
-  String _currentPage = "Details";
-
-  void _navigateTo(String page) {
-    setState(() {
-      _currentPage = page;
-    });
-    // In a real app, you would use Navigator.push or your routing solution
-    print("Navigating to $page");
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: CupertinoNavigationBar(
-        middle: Text('Breadcrumbs Example'),
-      ),
-      child: SafeArea(
-        child: Padding(
-          padding: const EdgeInsets.all(AppDimensions.spacingL),
-          child: Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              AppBreadcrumbs(
-                items: [
-                  BreadcrumbItem(text: 'Home', onTap: () => _navigateTo('Home'), icon: CupertinoIcons.home),
-                  BreadcrumbItem(text: 'Products', onTap: () => _navigateTo('Products'), icon: CupertinoIcons.collections),
-                  BreadcrumbItem(text: 'Electronics', onTap: () => _navigateTo('Electronics')),
-                  BreadcrumbItem(text: _currentPage, icon: CupertinoIcons.tag_fill), // Current page, no onTap
-                ],
-              ),
-              const SizedBox(height: AppDimensions.spacingL),
-              Text("Current Page: $_currentPage", style: AppTextStyles.title2),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/navigation/app_drawer.dart b/lib/components/navigation/app_drawer.dart
deleted file mode 100644
index 2ebd837..0000000
--- a/lib/components/navigation/app_drawer.dart
+++ /dev/null
@@ -1,204 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_theme.dart';
-
-class AppDrawer extends StatelessWidget {
-  final Widget? title;
-  final Widget? description;
-  final Widget? header;
-  final Widget? footer;
-  final List<Widget> children;
-  final bool showDragHandle;
-
-  const AppDrawer({
-    super.key,
-    this.title,
-    this.description,
-    this.header,
-    this.footer,
-    required this.children,
-    this.showDragHandle = true,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final appThemeData = AppTheme.of(context).currentTheme;
-    final screenHeight = MediaQuery.of(context).size.height;
-
-    return Container(
-      margin: const EdgeInsets.only(top: AppDimensions.spacingXxl),
-      constraints: BoxConstraints(maxHeight: screenHeight * 0.9),
-      decoration: BoxDecoration(
-        color: appThemeData.scaffoldBackgroundColor,
-        borderRadius: const BorderRadius.only(
-          topLeft: Radius.circular(AppDimensions.radiusLarge),
-          topRight: Radius.circular(AppDimensions.radiusLarge),
-        ),
-        border: Border(
-          top: BorderSide(color: AppColors.borderGray, width: 0.5),
-          left: BorderSide(color: AppColors.borderGray, width: 0.5),
-          right: BorderSide(color: AppColors.borderGray, width: 0.5),
-        ),
-      ),
-      child: Column(
-        mainAxisSize: MainAxisSize.min,
-        children: [
-          if (showDragHandle)
-            Container(
-              width: 100,
-              height: AppDimensions.spacingXs,
-              margin: const EdgeInsets.symmetric(
-                vertical: AppDimensions.spacingS,
-              ),
-              decoration: BoxDecoration(
-                color: AppColors.mediumGray, // Used for muted color
-                borderRadius: BorderRadius.circular(AppDimensions.radiusFull),
-              ),
-            ),
-          if (header != null) header!,
-          if (title != null || description != null)
-            Padding(
-              padding: const EdgeInsets.all(AppDimensions.spacingM),
-              child: Column(
-                crossAxisAlignment: CrossAxisAlignment.start,
-                children: [
-                  if (title != null) title!,
-                  if (description != null) ...[
-                    const SizedBox(height: AppDimensions.spacingXs),
-                    description!,
-                  ],
-                ],
-              ),
-            ),
-          Flexible(
-            child: SingleChildScrollView(
-              child: Padding(
-                padding: const EdgeInsets.symmetric(
-                  horizontal: AppDimensions.spacingM,
-                ),
-                child: Column(
-                  mainAxisSize: MainAxisSize.min,
-                  crossAxisAlignment: CrossAxisAlignment.stretch,
-                  children: children,
-                ),
-              ),
-            ),
-          ),
-          if (footer != null) footer!,
-        ],
-      ),
-    );
-  }
-}
-
-class AppDrawerHeader extends StatelessWidget {
-  final List<Widget> children;
-  final CrossAxisAlignment crossAxisAlignment;
-  final TextAlign textAlign;
-
-  const AppDrawerHeader({
-    super.key,
-    required this.children,
-    this.crossAxisAlignment =
-        CrossAxisAlignment.center, // Default to center like mock's text-center
-    this.textAlign = TextAlign.center,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Padding(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      child: Column(
-        crossAxisAlignment: crossAxisAlignment,
-        children:
-            children.isNotEmpty
-                ? List.generate(children.length * 2 - 1, (index) {
-                  if (index.isEven) {
-                    return children[index ~/ 2];
-                  } else {
-                    return const SizedBox(height: AppDimensions.spacingS);
-                  }
-                })
-                : [],
-      ),
-    );
-  }
-}
-
-class AppDrawerFooter extends StatelessWidget {
-  final List<Widget> children;
-  final MainAxisAlignment mainAxisAlignment;
-  final CrossAxisAlignment crossAxisAlignment;
-
-  const AppDrawerFooter({
-    super.key,
-    required this.children,
-    this.mainAxisAlignment =
-        MainAxisAlignment.start, // Default, mock is "flex flex-col"
-    this.crossAxisAlignment = CrossAxisAlignment.stretch,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    return Padding(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      child: Column(
-        mainAxisAlignment: mainAxisAlignment,
-        crossAxisAlignment: crossAxisAlignment,
-        children:
-            children.isNotEmpty
-                ? List.generate(children.length * 2 - 1, (index) {
-                  if (index.isEven) {
-                    return children[index ~/ 2];
-                  } else {
-                    return const SizedBox(
-                      height: AppDimensions.spacingS, // gap-2 is 8px
-                    );
-                  }
-                })
-                : [],
-      ),
-    );
-  }
-}
-
-class AppDrawerTitle extends StatelessWidget {
-  final String text;
-  final TextAlign? textAlign;
-
-  const AppDrawerTitle(this.text, {super.key, this.textAlign});
-
-  @override
-  Widget build(BuildContext context) {
-    return Text(
-      text,
-      style: AppTextStyles.title3.copyWith(
-        fontWeight: FontWeight.w600,
-        color: AppColors.foregroundDark,
-      ),
-      textAlign: textAlign,
-    );
-  }
-}
-
-class AppDrawerDescription extends StatelessWidget {
-  final String text;
-  final TextAlign? textAlign;
-
-  const AppDrawerDescription(this.text, {super.key, this.textAlign});
-
-  @override
-  Widget build(BuildContext context) {
-    return Text(
-      text,
-      style: AppTextStyles.bodySmall.copyWith(color: AppColors.mediumGray),
-      textAlign: textAlign,
-    );
-  }
-}
-
-// DrawerTrigger and DrawerClose are context-dependent and will be handled by
-// the showAppDrawer function and the usage of Navigator.pop(context) respectively.
-// DrawerPortal and DrawerOverlay are implicitly handled by showModalBottomSheet.
diff --git a/lib/components/navigation/app_header.dart b/lib/components/navigation/app_header.dart
index 75e4154..80ccdc2 100644
--- a/lib/components/navigation/app_header.dart
+++ b/lib/components/navigation/app_header.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_text_styles.dart';
@@ -133,7 +133,7 @@ class AppHeader extends StatelessWidget implements PreferredSizeWidget {
           child: const Row(
             mainAxisSize: MainAxisSize.min,
             children: [
-              Icon(CupertinoIcons.person, size: 16),
+              Icon(Icons.person, size: 16),
               SizedBox(width: AppDimensions.spacingXs),
               Text('Profilo'),
             ],
@@ -146,7 +146,7 @@ class AppHeader extends StatelessWidget implements PreferredSizeWidget {
           child: const Row(
             mainAxisSize: MainAxisSize.min,
             children: [
-              Icon(CupertinoIcons.arrow_right_square, size: 16),
+              Icon(Icons.logout, size: 16),
               SizedBox(width: AppDimensions.spacingXs),
               Text('Esci'),
             ],
@@ -295,7 +295,7 @@ class LoginHeader extends StatelessWidget implements PreferredSizeWidget {
               child: const Row(
                 mainAxisSize: MainAxisSize.min,
                 children: [
-                  Icon(CupertinoIcons.chevron_left, size: 16),
+                  Icon(Icons.arrow_back, size: 16),
                   SizedBox(width: AppDimensions.spacingXs),
                   Text('Torna alla Home'),
                 ],
diff --git a/lib/components/navigation/app_menubar.dart b/lib/components/navigation/app_menubar.dart
deleted file mode 100644
index 9b75453..0000000
--- a/lib/components/navigation/app_menubar.dart
+++ /dev/null
@@ -1,1092 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-// --- Data Models for Menubar Structure ---
-
-/// Represents a single item in a menubar menu or submenu.
-class AppMenubarItemModel {
-  final String id;
-  final String label;
-  final IconData? icon; // Optional icon
-  VoidCallback? onTap; // Made non-final to be potentially wrapped
-  final List<AppMenubarItemModel>? subItems; // For submenus
-  final bool isCheckbox;
-  bool isChecked; // For checkbox items, mutable
-  final bool isRadio;
-  final String? radioGroup; // To group radio items
-  final bool isSeparator;
-  final String? shortcut; // e.g., "Ctrl+O"
-  final bool disabled;
-  final bool
-  inset; // For items that should be indented (e.g. checkbox, radio without icon)
-
-  AppMenubarItemModel({
-    required this.id,
-    required this.label,
-    this.icon,
-    this.onTap,
-    this.subItems,
-    this.isCheckbox = false,
-    this.isChecked = false,
-    this.isRadio = false,
-    this.radioGroup,
-    this.isSeparator = false,
-    this.shortcut,
-    this.disabled = false,
-    this.inset = false,
-  }) : assert(
-         isSeparator ||
-             onTap != null ||
-             (subItems != null && subItems.isNotEmpty) ||
-             isCheckbox ||
-             isRadio,
-         'Menu item must have an action (onTap), sub-items, be a checkbox/radio, or be a separator.',
-       );
-
-  factory AppMenubarItemModel.separator() {
-    return AppMenubarItemModel(
-      id: 'separator_${DateTime.now().millisecondsSinceEpoch}',
-      label: '',
-      isSeparator: true,
-    );
-  }
-}
-
-/// Represents a top-level menu in the menubar (e.g., "File", "Edit").
-class AppMenubarMenuModel {
-  final String id;
-  final String label;
-  List<AppMenubarItemModel>
-  items; // Made non-final for radio group state updates
-
-  AppMenubarMenuModel({
-    required this.id,
-    required this.label,
-    required this.items,
-  });
-}
-
-// --- Widgets ---
-
-/// The main menubar container.
-class AppMenubar extends StatefulWidget {
-  final List<AppMenubarMenuModel> menus;
-  final Color backgroundColor;
-  final Color foregroundColor; // For the text of the triggers
-  final Color itemHighlightColor; // For when a menu is open or item hovered
-  final Color itemForegroundColor; // For text inside dropdowns
-  final Color
-  itemHoverBackgroundColor; // For item hover background in dropdowns
-  final Color
-  itemHoverForegroundColor; // For item hover foreground in dropdowns
-  final double height;
-
-  const AppMenubar({
-    super.key,
-    required this.menus,
-    this.backgroundColor = AppColors.lightGray, // Mock: bg-background
-    this.foregroundColor = AppColors.foregroundDark,
-    this.itemHighlightColor = AppColors.primaryBlue, // Mock: bg-accent
-    this.itemForegroundColor =
-        AppColors.foregroundDark, // Mock: text-popover-foreground
-    this.itemHoverBackgroundColor =
-        AppColors
-            .primaryBlue, // Mock: bg-accent (using primaryBlue as a sensible default)
-    this.itemHoverForegroundColor =
-        AppColors.accentForeground, // Mock: text-accent-foreground
-    this.height = 40.0, // Mock: h-10
-  });
-
-  @override
-  State<AppMenubar> createState() => _AppMenubarState();
-}
-
-class _AppMenubarState extends State<AppMenubar> {
-  // This state can be used to manage radio group selections if needed globally
-  // For now, individual menu models will handle their radio groups.
-
-  void _handleRadioSelection(
-    AppMenubarMenuModel menuModel,
-    AppMenubarItemModel selectedRadioItem,
-  ) {
-    setState(() {
-      for (var item in menuModel.items) {
-        if (item.isRadio && item.radioGroup == selectedRadioItem.radioGroup) {
-          item.isChecked = (item.id == selectedRadioItem.id);
-        }
-      }
-      // Also check sub-items recursively if radio items can be in submenus
-      // For simplicity, assuming radio items are at the current menu level
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      height: widget.height,
-      color: widget.backgroundColor,
-      padding: const EdgeInsets.symmetric(
-        horizontal: AppDimensions.spacingXs, // p-1
-      ),
-      child: Row(
-        mainAxisAlignment: MainAxisAlignment.start,
-        children:
-            widget.menus.map((menuModel) {
-              return _AppMenubarMenuWidget(
-                menuModel: menuModel,
-                foregroundColor: widget.foregroundColor,
-                itemHighlightColor: widget.itemHighlightColor,
-                menubarHeight: widget.height,
-                itemForegroundColor: widget.itemForegroundColor,
-                itemHoverBackgroundColor: widget.itemHoverBackgroundColor,
-                itemHoverForegroundColor: widget.itemHoverForegroundColor,
-                onRadioSelected: (selectedItem) {
-                  _handleRadioSelection(menuModel, selectedItem);
-                },
-              );
-            }).toList(),
-      ),
-    );
-  }
-}
-
-class _AppMenubarMenuWidget extends StatefulWidget {
-  final AppMenubarMenuModel menuModel;
-  final Color foregroundColor;
-  final Color itemHighlightColor;
-  final double menubarHeight;
-  final Color itemForegroundColor;
-  final Color itemHoverBackgroundColor;
-  final Color itemHoverForegroundColor;
-  final Function(AppMenubarItemModel) onRadioSelected;
-
-  const _AppMenubarMenuWidget({
-    required this.menuModel,
-    required this.foregroundColor,
-    required this.itemHighlightColor,
-    required this.menubarHeight,
-    required this.itemForegroundColor,
-    required this.itemHoverBackgroundColor,
-    required this.itemHoverForegroundColor,
-    required this.onRadioSelected,
-  });
-
-  @override
-  _AppMenubarMenuWidgetState createState() => _AppMenubarMenuWidgetState();
-}
-
-class _AppMenubarMenuWidgetState extends State<_AppMenubarMenuWidget> {
-  OverlayEntry? _overlayEntry;
-  bool _isMenuOpen = false;
-  final LayerLink _layerLink = LayerLink();
-  final GlobalKey _menuKey = GlobalKey(); // Use a GlobalKey for positioning
-
-  void _toggleMenu() {
-    if (_isMenuOpen) {
-      _closeMenu();
-    } else {
-      _openMenu();
-    }
-  }
-
-  void _openMenu() {
-    // Close other menus if any are open (optional, for traditional menubar behavior)
-    // This would require communication between _AppMenubarMenuWidget instances,
-    // possibly via a shared state or callbacks through AppMenubar.
-
-    _overlayEntry = _createOverlayEntry();
-    Overlay.of(context).insert(_overlayEntry!);
-    setState(() {
-      _isMenuOpen = true;
-    });
-  }
-
-  void _closeMenu() {
-    _overlayEntry?.remove();
-    _overlayEntry = null;
-    setState(() {
-      _isMenuOpen = false;
-    });
-  }
-
-  OverlayEntry _createOverlayEntry() {
-    final RenderBox renderBox =
-        _menuKey.currentContext!.findRenderObject() as RenderBox;
-    final size = renderBox.size;
-    final offset = renderBox.localToGlobal(Offset.zero);
-
-    return OverlayEntry(
-      builder:
-          (context) => Positioned(
-            left: offset.dx,
-            top: offset.dy + size.height, // Position below the menu trigger
-            width: 250, // Mock: w-56 (224px), adjusted for typical menu width
-            child: CupertinoPopupSurface(
-              // Using CupertinoPopupSurface for background/shadow
-              child: _AppMenubarDropdown(
-                items: widget.menuModel.items,
-                foregroundColor: widget.itemForegroundColor,
-                hoverBackgroundColor: widget.itemHoverBackgroundColor,
-                hoverForegroundColor: widget.itemHoverForegroundColor,
-                onItemSelected: (item) {
-                  _closeMenu();
-                  if (item.isCheckbox) {
-                    setState(() {
-                      item.isChecked = !item.isChecked;
-                    });
-                    item.onTap
-                        ?.call(); // Call onTap even for checkbox if defined
-                  } else if (item.isRadio) {
-                    widget.onRadioSelected(
-                      item,
-                    ); // Let parent handle radio state
-                    item.onTap?.call();
-                  } else {
-                    item.onTap?.call();
-                  }
-                },
-                onSubmenuRequested: (item, subMenuKey) {
-                  // This is where submenu logic would be triggered.
-                  // For now, submenus are opened by _AppMenubarDropdownItem itself.
-                },
-                parentMenuCloseCallback: _closeMenu, // Pass the callback
-                menubarHeight: widget.menubarHeight,
-                itemHighlightColor: widget.itemHighlightColor,
-                menuModel: widget.menuModel, // Pass menuModel
-                onRadioSelectedInSubmenu:
-                    widget.onRadioSelected, // Pass radio selection down
-              ),
-            ),
-          ),
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: Trigger: \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors ... h-10 px-4 py-2\"
-    // Mock: Data state open: \"bg-accent text-accent-foreground\"
-    // Mock: Hover: \"bg-accent/80\" (using itemHighlightColor with opacity for hover)
-
-    return CompositedTransformTarget(
-      link: _layerLink,
-      child: GestureDetector(
-        key: _menuKey, // Assign key here
-        onTap: _toggleMenu,
-        child: FocusableActionDetector(
-          onShowFocusHighlight: (hasFocus) {
-            // Optional: Add visual feedback for focus if needed, e.g. a border
-          },
-          child: MouseRegion(
-            onEnter:
-                (_) => setState(
-                  () {},
-                ), // Trigger rebuild for hover state if needed
-            onExit: (_) => setState(() {}), // Trigger rebuild
-            cursor: SystemMouseCursors.click,
-            child: Container(
-              padding: const EdgeInsets.symmetric(
-                horizontal: AppDimensions.spacingM, // px-3 or px-4
-                vertical: AppDimensions.spacingS, // py-2
-              ),
-              decoration: BoxDecoration(
-                color:
-                    _isMenuOpen
-                        ? widget.itemHighlightColor
-                        : CupertinoColors.transparent,
-                borderRadius: BorderRadius.circular(
-                  AppDimensions.radiusMedium,
-                ), // rounded-md
-              ),
-              child: Text(
-                widget.menuModel.label,
-                style: AppTextStyles.bodySmall.copyWith(
-                  fontWeight: FontWeight.w500, // font-medium
-                  color:
-                      _isMenuOpen
-                          ? widget
-                              .itemHoverForegroundColor // text-accent-foreground when open
-                          : widget.foregroundColor,
-                ),
-              ),
-            ),
-          ),
-        ),
-      ),
-    );
-  }
-}
-
-class _AppMenubarDropdown extends StatefulWidget {
-  final List<AppMenubarItemModel> items;
-  final Color foregroundColor;
-  final Color hoverBackgroundColor;
-  final Color hoverForegroundColor;
-  final Function(AppMenubarItemModel) onItemSelected;
-  final Function(AppMenubarItemModel, GlobalKey) onSubmenuRequested;
-  final VoidCallback parentMenuCloseCallback;
-  final double menubarHeight;
-  final Color itemHighlightColor;
-  final AppMenubarMenuModel menuModel; // Added
-  final Function(AppMenubarItemModel) onRadioSelectedInSubmenu; // Added
-
-  const _AppMenubarDropdown({
-    required this.items,
-    required this.foregroundColor,
-    required this.hoverBackgroundColor,
-    required this.hoverForegroundColor,
-    required this.onItemSelected,
-    required this.onSubmenuRequested,
-    required this.parentMenuCloseCallback,
-    required this.menubarHeight,
-    required this.itemHighlightColor,
-    required this.menuModel, // Added
-    required this.onRadioSelectedInSubmenu, // Added
-  });
-
-  @override
-  State<_AppMenubarDropdown> createState() => _AppMenubarDropdownState();
-}
-
-class _AppMenubarDropdownState extends State<_AppMenubarDropdown> {
-  OverlayEntry? _activeSubmenuOverlayEntry;
-
-  void _closeActiveSubmenu() {
-    _activeSubmenuOverlayEntry?.remove();
-    _activeSubmenuOverlayEntry = null;
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\"
-    return Container(
-      padding: EdgeInsets.zero,
-      margin: EdgeInsets.zero,
-      decoration: BoxDecoration(
-        color: AppColors.lightGray, // Mock: bg-popover
-        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-        // border: Border.all(color: AppColors.border), // Mock: border
-        boxShadow: [
-          BoxShadow(
-            color: AppColors.shadowColor,
-            blurRadius: 10,
-            spreadRadius: 0,
-            offset: Offset(0, 2),
-          ),
-        ],
-      ),
-      child: Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children:
-            widget.items.map((item) {
-              if (item.isSeparator) {
-                return Container(
-                  height: 1,
-                  color: AppColors.border,
-                  margin: const EdgeInsets.symmetric(
-                    horizontal: 0,
-                    vertical: AppDimensions.spacingXxs,
-                  ),
-                );
-              }
-              return _AppMenubarDropdownItem(
-                item: item,
-                foregroundColor: widget.foregroundColor,
-                hoverBackgroundColor: widget.hoverBackgroundColor,
-                hoverForegroundColor: widget.hoverForegroundColor,
-                onTap: () {
-                  // Close submenu on item tap
-                  _closeActiveSubmenu();
-                  widget.onItemSelected(item);
-                },
-                onSubmenuOpenRequested: (submenuKey) {
-                  // Close any open submenu before opening a new one
-                  _closeActiveSubmenu();
-                  // Delay the opening of the submenu to allow for animation
-                  // Future.delayed(const Duration(milliseconds: 100), () { // MODIFIED
-                  // if (mounted) {
-                  // Check if still mounted
-
-                  // MODIFIED: Resolve context-dependent data *before* the async gap
-                  final List<AppMenubarItemModel>? subItems =
-                      submenuKey.currentContext
-                          ?.findAncestorWidgetOfExactType<
-                            _AppMenubarDropdownItem
-                          >()!
-                          .item
-                          .subItems;
-
-                  // Capture context before async gap
-                  final overlayState = Overlay.of(context);
-
-                  Future.delayed(const Duration(milliseconds: 100), () {
-                    if (mounted && subItems != null) {
-                      _activeSubmenuOverlayEntry = OverlayEntry(
-                        builder:
-                            (context) => Positioned(
-                              left: 0,
-                              top: 0,
-                              width: 250, // Mock: w-56
-                              child: CupertinoPopupSurface(
-                                child: _AppMenubarDropdown(
-                                  items: subItems,
-                                  foregroundColor: widget.foregroundColor,
-                                  hoverBackgroundColor:
-                                      widget.hoverBackgroundColor,
-                                  hoverForegroundColor:
-                                      widget.hoverForegroundColor,
-                                  onItemSelected: (selectedSubItem) {
-                                    _closeActiveSubmenu();
-                                    widget.onItemSelected(selectedSubItem);
-                                  },
-                                  onSubmenuRequested: (subItem, subSubMenuKey) {
-                                    // Handle nested submenus if necessary
-                                  },
-                                  parentMenuCloseCallback:
-                                      widget.parentMenuCloseCallback,
-                                  menubarHeight: widget.menubarHeight,
-                                  itemHighlightColor: widget.itemHighlightColor,
-                                  menuModel: widget.menuModel,
-                                  onRadioSelectedInSubmenu:
-                                      widget.onRadioSelectedInSubmenu,
-                                ),
-                              ),
-                            ),
-                      );
-                      // Use captured overlay state instead of context
-                      overlayState.insert(_activeSubmenuOverlayEntry!);
-                    }
-                  });
-                },
-                onSubmenuCloseRequested: () {
-                  // Close submenu directly
-                  _closeActiveSubmenu();
-                },
-                parentMenuCloseCallback: widget.parentMenuCloseCallback,
-                menubarHeight: widget.menubarHeight,
-                itemHighlightColor: widget.itemHighlightColor,
-                menuModel: widget.menuModel, // Pass down menuModel
-                onRadioSelectedInSubmenu:
-                    widget.onRadioSelectedInSubmenu, // Pass down
-              );
-            }).toList(),
-      ),
-    );
-  }
-}
-
-class _AppMenubarDropdownItem extends StatefulWidget {
-  final AppMenubarItemModel item;
-  final Color foregroundColor;
-  final Color hoverBackgroundColor;
-  final Color hoverForegroundColor;
-  final VoidCallback onTap;
-  final Function(GlobalKey) onSubmenuOpenRequested;
-  final VoidCallback onSubmenuCloseRequested;
-  final VoidCallback
-  parentMenuCloseCallback; // To close the entire menu structure
-  final double menubarHeight;
-  final Color itemHighlightColor;
-  final AppMenubarMenuModel menuModel; // Added
-  final Function(AppMenubarItemModel) onRadioSelectedInSubmenu; // Added
-
-  const _AppMenubarDropdownItem({
-    required this.item,
-    required this.foregroundColor,
-    required this.hoverBackgroundColor,
-    required this.hoverForegroundColor,
-    required this.onTap,
-    required this.onSubmenuOpenRequested,
-    required this.onSubmenuCloseRequested,
-    required this.parentMenuCloseCallback,
-    required this.menubarHeight,
-    required this.itemHighlightColor,
-    required this.menuModel, // Added
-    required this.onRadioSelectedInSubmenu, // Added
-  });
-
-  @override
-  _AppMenubarDropdownItemState createState() => _AppMenubarDropdownItemState();
-}
-
-class _AppMenubarDropdownItemState extends State<_AppMenubarDropdownItem> {
-  bool _isHovered = false;
-  final GlobalKey _submenuAnchorKey = GlobalKey();
-
-  void _handleTap() {
-    if (widget.item.disabled) return;
-
-    if (widget.item.subItems != null && widget.item.subItems!.isNotEmpty) {
-      widget.onSubmenuOpenRequested(_submenuAnchorKey);
-    } else {
-      widget.onTap(); // This will call onItemSelected in the parent
-      // which then calls parentMenuCloseCallback
-    }
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: Item: \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors ...\"
-    // Mock: Focus/Hover: \"bg-accent text-accent-foreground\" (handled by _isHovered)
-    // Mock: Disabled: \"opacity-50 pointer-events-none\"
-
-    Color currentForegroundColor =
-        widget.item.disabled
-            ? widget.foregroundColor.withValues(alpha: 0.5)
-            : (_isHovered
-                ? widget.hoverForegroundColor
-                : widget.foregroundColor);
-    Color? currentBackgroundColor =
-        _isHovered && !widget.item.disabled
-            ? widget.hoverBackgroundColor
-            : null;
-
-    if (widget.item.isCheckbox &&
-        widget.item.isChecked &&
-        !_isHovered &&
-        !widget.item.disabled) {
-      // Keep highlight if checked and not hovered (UX decision)
-      // currentBackgroundColor = widget.hoverBackgroundColor.withOpacity(0.1);
-    }
-
-    Widget content = Row(
-      key: _submenuAnchorKey,
-      children: [
-        SizedBox(
-          width:
-              widget.item.inset ||
-                      widget.item.icon != null ||
-                      widget.item.isCheckbox ||
-                      widget.item.isRadio
-                  ? AppDimensions
-                      .spacingM // Equivalent to icon width for alignment
-                  : 0,
-          child:
-              widget.item.icon != null &&
-                      !widget.item.isCheckbox &&
-                      !widget.item.isRadio
-                  ? Icon(
-                    widget.item.icon,
-                    size: AppDimensions.iconSizeSmall,
-                    color: currentForegroundColor,
-                  )
-                  : (widget.item.isCheckbox
-                      ? _CheckboxIndicator(
-                        isChecked: widget.item.isChecked,
-                        color: currentForegroundColor,
-                        isDisabled: widget.item.disabled,
-                        isHovered: _isHovered,
-                        highlightColor: widget.hoverBackgroundColor,
-                      )
-                      : (widget.item.isRadio
-                          ? _RadioIndicator(
-                            isChecked: widget.item.isChecked,
-                            color: currentForegroundColor,
-                            isDisabled: widget.item.disabled,
-                            isHovered: _isHovered,
-                            highlightColor: widget.hoverBackgroundColor,
-                          )
-                          : null)),
-        ),
-        if (widget.item.icon != null ||
-            widget.item.isCheckbox ||
-            widget.item.isRadio ||
-            widget.item.inset)
-          const SizedBox(
-            width: AppDimensions.spacingS,
-          ), // space after icon/check/radio
-        Expanded(
-          child: Text(
-            widget.item.label,
-            style: AppTextStyles.bodySmall.copyWith(
-              color: currentForegroundColor,
-            ),
-            overflow: TextOverflow.ellipsis,
-          ),
-        ),
-        if (widget.item.shortcut != null) ...[
-          const Spacer(),
-          Text(
-            widget.item.shortcut!,
-            style: AppTextStyles.caption.copyWith(
-              color: currentForegroundColor.withValues(alpha: 0.7),
-            ), // text-muted-foreground
-          ),
-        ],
-        if (widget.item.subItems != null && widget.item.subItems!.isNotEmpty)
-          Icon(
-            CupertinoIcons.right_chevron,
-            size: AppDimensions.iconSizeSmall - 2,
-            color: currentForegroundColor,
-          ),
-      ],
-    );
-
-    return MouseRegion(
-      onEnter:
-          widget.item.disabled
-              ? null
-              : (event) {
-                setState(() => _isHovered = true);
-                if (widget.item.subItems != null &&
-                    widget.item.subItems!.isNotEmpty) {
-                  // Debounce or delay opening submenu on hover
-                  Future.delayed(const Duration(milliseconds: 100), () {
-                    if (_isHovered && mounted) {
-                      // Check if still hovered and mounted
-                      widget.onSubmenuOpenRequested(_submenuAnchorKey);
-                    }
-                  });
-                } else {
-                  widget.onSubmenuCloseRequested(); // Close other submenus
-                }
-              },
-      onExit:
-          widget.item.disabled
-              ? null
-              : (event) {
-                setState(() => _isHovered = false);
-                // Do not close submenu immediately on exit, allow moving to submenu
-              },
-      cursor:
-          widget.item.disabled
-              ? SystemMouseCursors.basic
-              : SystemMouseCursors.click,
-      child: GestureDetector(
-        onTap: _handleTap,
-        behavior: HitTestBehavior.opaque, // Ensure the whole area is tappable
-        child: Container(
-          padding: const EdgeInsets.symmetric(
-            horizontal: AppDimensions.spacingS, // px-2
-            vertical: AppDimensions.spacingXs + 2, // py-1.5 (6px)
-          ),
-          decoration: BoxDecoration(
-            color: currentBackgroundColor,
-            borderRadius: BorderRadius.circular(
-              AppDimensions.radiusSmall,
-            ), // rounded-sm
-          ),
-          child: content,
-        ),
-      ),
-    );
-  }
-}
-
-class _CheckboxIndicator extends StatelessWidget {
-  final bool isChecked;
-  final Color color;
-  final bool isDisabled;
-  final bool isHovered;
-  final Color highlightColor;
-
-  const _CheckboxIndicator({
-    required this.isChecked,
-    required this.color,
-    required this.isDisabled,
-    required this.isHovered,
-    required this.highlightColor,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: Check: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"
-    // Mock: Indicator: \"h-2 w-2 fill-current\"
-    return Container(
-      width: AppDimensions.iconSizeSmall, // h-3.5 w-3.5 (14px)
-      height: AppDimensions.iconSizeSmall,
-      decoration: BoxDecoration(
-        // border: Border.all(color: isDisabled ? color.withOpacity(0.5) : (isHovered ? highlightColor : color), width: 1.5),
-        // borderRadius: BorderRadius.circular(AppDimensions.radiusSmall / 2),
-        // color: isChecked && isHovered && !isDisabled ? highlightColor.withOpacity(0.2) : Colors.transparent,
-      ),
-      child:
-          isChecked
-              ? Icon(
-                CupertinoIcons.check_mark,
-                size: AppDimensions.iconSizeSmall - 2, // h-2 w-2 (8px)
-                color:
-                    isDisabled
-                        ? color.withValues(alpha: 0.5)
-                        : (isHovered
-                            ? highlightColor
-                            : color), // Fixed: widget.highlightColor to highlightColor
-              )
-              : null,
-    );
-  }
-}
-
-class _RadioIndicator extends StatelessWidget {
-  final bool isChecked;
-  final Color color;
-  final bool isDisabled;
-  final bool isHovered;
-  final Color highlightColor;
-
-  const _RadioIndicator({
-    required this.isChecked,
-    required this.color,
-    required this.isDisabled,
-    required this.isHovered,
-    required this.highlightColor,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: Radio: \"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\"
-    // Mock: Indicator: \"h-2 w-2 fill-current\" -> a small circle
-    return Container(
-      width: AppDimensions.iconSizeSmall,
-      height: AppDimensions.iconSizeSmall,
-      decoration: BoxDecoration(
-        shape: BoxShape.circle,
-        // border: Border.all(color: isDisabled ? color.withOpacity(0.5) : (isHovered ? highlightColor : color), width: 1.5),
-        // color: isChecked && isHovered && !isDisabled ? highlightColor.withOpacity(0.2) : Colors.transparent,
-      ),
-      child:
-          isChecked
-              ? Center(
-                child: Container(
-                  width: AppDimensions.iconSizeSmall / 2, // h-2 w-2 (8px)
-                  height: AppDimensions.iconSizeSmall / 2,
-                  decoration: BoxDecoration(
-                    shape: BoxShape.circle,
-                    color:
-                        isDisabled
-                            ? color.withValues(alpha: 0.5)
-                            : (isHovered
-                                ? highlightColor
-                                : color), // Fixed: widget.highlightColor to highlightColor
-                  ),
-                ),
-              )
-              : null,
-    );
-  }
-}
-
-// Example Usage (can be placed in a separate file or a demo screen)
-class AppMenubarExample extends StatefulWidget {
-  const AppMenubarExample({super.key});
-
-  @override
-  // _AppMenubarExampleState createState() => _AppMenubarExampleState(); // MODIFIED
-  AppMenubarExampleState createState() => AppMenubarExampleState(); // MODIFIED
-}
-
-// class _AppMenubarExampleState extends State<AppMenubarExample> { // MODIFIED
-class AppMenubarExampleState extends State<AppMenubarExample> {
-  // MODIFIED
-  bool _showStatusBar = true;
-  String _radioSelection = "Panel"; // To track radio button state
-  late List<AppMenubarMenuModel> menus; // MODIFIED: Made instance variable
-
-  @override
-  void initState() {
-    // ADDED: initState
-    super.initState();
-    menus = _initializeMenus(); // Initialize menus here
-  }
-
-  // Helper to update radio group items
-  void _updateRadioItems(List<AppMenubarItemModel> items, String selectedId) {
-    for (var item in items) {
-      if (item.isRadio && item.radioGroup == "appearancePanel") {
-        item.isChecked = item.id == selectedId;
-      }
-      if (item.subItems != null) {
-        _updateRadioItems(item.subItems!, selectedId);
-      }
-    }
-  }
-
-  // ADDED: Method to initialize menus
-  List<AppMenubarMenuModel> _initializeMenus() {
-    return [
-      AppMenubarMenuModel(
-        id: "file",
-        label: "File",
-        items: [
-          AppMenubarItemModel(
-            id: "newTab",
-            label: "New Tab",
-            shortcut: "⌘T",
-            // onTap: () => print("New Tab clicked"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "newWindow",
-            label: "New Window",
-            shortcut: "⌘N",
-            // onTap: () => print("New Window clicked"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "newIncognito",
-            label: "New Incognito Window",
-            disabled: true,
-            onTap: () {},
-          ),
-          AppMenubarItemModel.separator(),
-          AppMenubarItemModel(
-            id: "share",
-            label: "Share",
-            subItems: [
-              AppMenubarItemModel(
-                id: "emailLink",
-                label: "Email Link",
-                // onTap: () => print("Email link"), // REMOVED
-                onTap: () {},
-              ),
-              AppMenubarItemModel(
-                id: "messages",
-                label: "Messages",
-                // onTap: () => print("Messages"), // REMOVED
-                onTap: () {},
-              ),
-              AppMenubarItemModel(
-                id: "notes",
-                label: "Notes",
-                // onTap: () => print("Notes"), // REMOVED
-                onTap: () {},
-              ),
-            ],
-          ),
-          AppMenubarItemModel.separator(),
-          AppMenubarItemModel(
-            id: "print",
-            label: "Print...",
-            shortcut: "⌘P",
-            // onTap: () => print("Print clicked"), // REMOVED
-            onTap: () {},
-          ),
-        ],
-      ),
-      AppMenubarMenuModel(
-        id: "edit",
-        label: "Edit",
-        items: [
-          AppMenubarItemModel(
-            id: "undo",
-            label: "Undo",
-            shortcut: "⌘Z",
-            // onTap: () => print("Undo"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "redo",
-            label: "Redo",
-            shortcut: "⇧⌘Z",
-            // onTap: () => print("Redo"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel.separator(),
-          AppMenubarItemModel(
-            id: "cut",
-            label: "Cut",
-            // onTap: () => print("Cut"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "copy",
-            label: "Copy",
-            // onTap: () => print("Copy"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "paste",
-            label: "Paste",
-            // onTap: () => print("Paste"), // REMOVED
-            onTap: () {},
-          ),
-        ],
-      ),
-      AppMenubarMenuModel(
-        id: "view",
-        label: "View",
-        items: [
-          AppMenubarItemModel(
-            id: "showStatusBar",
-            label: "Show Status Bar",
-            isCheckbox: true,
-            isChecked: _showStatusBar,
-            onTap: () {
-              setState(() {
-                _showStatusBar = !_showStatusBar;
-                var viewMenu = menus.firstWhere((m) => m.id == "view");
-                var statusBarItem = viewMenu.items.firstWhere(
-                  (i) => i.id == "showStatusBar",
-                );
-                statusBarItem.isChecked = _showStatusBar;
-                // print("Show Status Bar: $_showStatusBar"); // REMOVED
-              });
-            },
-          ),
-          AppMenubarItemModel.separator(),
-          AppMenubarItemModel(
-            id: "appearance",
-            label: "Appearance",
-            subItems: [
-              AppMenubarItemModel(
-                id: "panelLeft",
-                label: "Panel Left",
-                isRadio: true,
-                radioGroup: "appearancePanel",
-                isChecked: _radioSelection == "Panel Left",
-                onTap: () {
-                  setState(() {
-                    _radioSelection = "Panel Left";
-                    var viewMenu = menus.firstWhere((m) => m.id == "view");
-                    var appearanceMenu = viewMenu.items.firstWhere(
-                      (i) => i.id == "appearance",
-                    );
-                    _updateRadioItems(appearanceMenu.subItems!, "panelLeft");
-                    // print("Radio selected: Panel Left"); // REMOVED
-                  });
-                },
-              ),
-              AppMenubarItemModel(
-                id: "panelRight",
-                label: "Panel Right",
-                isRadio: true,
-                radioGroup: "appearancePanel",
-                isChecked: _radioSelection == "Panel Right",
-                onTap: () {
-                  setState(() {
-                    _radioSelection = "Panel Right";
-                    var viewMenu = menus.firstWhere((m) => m.id == "view");
-                    var appearanceMenu = viewMenu.items.firstWhere(
-                      (i) => i.id == "appearance",
-                    );
-                    _updateRadioItems(appearanceMenu.subItems!, "panelRight");
-                    // print("Radio selected: Panel Right"); // REMOVED
-                  });
-                },
-              ),
-              AppMenubarItemModel(
-                id: "panelBottom",
-                label: "Panel Bottom",
-                isRadio: true,
-                radioGroup: "appearancePanel",
-                isChecked: _radioSelection == "Panel Bottom",
-                onTap: () {
-                  setState(() {
-                    _radioSelection = "Panel Bottom";
-                    var viewMenu = menus.firstWhere((m) => m.id == "view");
-                    var appearanceMenu = viewMenu.items.firstWhere(
-                      (i) => i.id == "appearance",
-                    );
-                    _updateRadioItems(appearanceMenu.subItems!, "panelBottom");
-                    // print("Radio selected: Panel Bottom"); // REMOVED
-                  });
-                },
-              ),
-              AppMenubarItemModel.separator(),
-              AppMenubarItemModel(
-                id: "resetPanels",
-                label: "Reset Panels",
-                // onTap: () => print("Reset Panels"), // REMOVED
-                onTap: () {},
-              ),
-            ],
-          ),
-        ],
-      ),
-      AppMenubarMenuModel(
-        id: "account",
-        label: "Account",
-        items: [
-          AppMenubarItemModel(
-            id: "user1",
-            label: "User One",
-            icon: CupertinoIcons.person_fill,
-            // onTap: () => print("User One"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "user2",
-            label: "User Two",
-            icon: CupertinoIcons.person_2_fill,
-            // onTap: () => print("User Two"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel.separator(),
-          AppMenubarItemModel(
-            id: "settings",
-            label: "Settings",
-            shortcut: "⌘,",
-            icon: CupertinoIcons.gear_alt_fill,
-            // onTap: () => print("Settings"), // REMOVED
-            onTap: () {},
-          ),
-          AppMenubarItemModel(
-            id: "newTeam",
-            label: "New Team",
-            icon: CupertinoIcons.group_solid,
-            // onTap: () => print("New Team"), // REMOVED
-            onTap: () {},
-          ),
-        ],
-      ),
-    ];
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // The 'menus' final variable is removed from here.
-    // It now uses the instance variable 'this.menus' or 'menus'.
-    return AppMenubar(menus: menus); // Use the instance field
-  }
-}
-
-// To ensure radio button state is correctly managed within the AppMenubar itself,
-// the AppMenubarItemModel's `isChecked` needs to be mutable, and the `onTap` for
-// radio items should trigger a state update in a common ancestor, likely _AppMenubarState
-// or by passing callbacks down that can update the original AppMenubarMenuModel list.
-
-// The current _AppMenubarState._handleRadioSelection is a good start.
-// It needs to be called correctly from the _AppMenubarDropdownItem.
-// This involves passing the AppMenubarMenuModel instance down to where the tap occurs,
-// or passing a more specific callback.
-
-// Let's refine the callback chain for radio buttons.
-// 1. _AppMenubarDropdownItem: onTap calls a method passed from _AppMenubarDropdown.
-// 2. _AppMenubarDropdown: This method calls `widget.onRadioSelectedInSubmenu` (newly added).
-// 3. _AppMenubarMenuWidget: `onRadioSelectedInSubmenu` is `widget.onRadioSelected`.
-// 4. _AppMenubarState: `onRadioSelected` is `_handleRadioSelection`.
-
-// The `_handleRadioSelection` in `_AppMenubarState` needs to correctly identify and update
-// the `isChecked` status of all radio buttons within the same group across the specific `menuModel`.
-
-// For Checkboxes: The state `isChecked` is toggled directly in `_AppMenubarMenuWidgetState`'s
-// `_createOverlayEntry`'s `onItemSelected` callback. This is fine for checkboxes as their
-// state is independent.
-
-// For Submenus:
-// - Opening: _AppMenubarDropdownItem calls onSubmenuOpenRequested -> _AppMenubarDropdown._openSubmenu
-// - Closing: _AppMenubarDropdown._closeActiveSubmenu
-// - Item selection within submenu: Propagates up to the top-level onItemSelected.
-
-// The GlobalKey usage for positioning overlays is standard.
-// Using CupertinoPopupSurface is a good step towards removing Material.
-// Ensure all interactive elements like GestureDetector are used correctly.
-// MouseRegion for hover effects is also appropriate.
-// FocusableActionDetector can be used for keyboard navigation if that's a future requirement.
-
-// Final check on Material dependencies:
-// - Icons: Replaced with CupertinoIcons or custom (e.g. for checkbox/radio).
-// - InkWell: Replaced with GestureDetector + MouseRegion.
-// - Material (widget): Replaced with Container, CupertinoPopupSurface.
-// - Colors: Using AppColors or CupertinoColors.
-
-// The example usage demonstrates how to build the menu structure and handle basic state.
-// The radio button state management in the example itself (`_AppMenubarExampleState._updateRadioItems`)
-// is a bit manual. The goal is for the AppMenubar component to handle this internally
-// based on the `onRadioSelected` callback chain.
-
-// The `AppMenubarItemModel.onTap` for radio items should still be callable for any additional
-// actions the user wants to perform beyond just selection.
-// The `item.isChecked` in `AppMenubarItemModel` is now crucial and must be updated by the menubar logic.
-// The `AppMenubarMenuModel.items` was made non-final to allow these updates.
diff --git a/lib/components/navigation/app_navigation_menu.dart b/lib/components/navigation/app_navigation_menu.dart
deleted file mode 100644
index 2e5e686..0000000
--- a/lib/components/navigation/app_navigation_menu.dart
+++ /dev/null
@@ -1,314 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A navigation menu item that can contain sub-items.
-class AppNavigationMenuItem {
-  /// Creates a navigation menu item.
-  const AppNavigationMenuItem({
-    required this.id,
-    required this.label,
-    this.icon,
-    this.onTap,
-    this.children = const [],
-    this.disabled = false,
-  });
-
-  /// Unique identifier for the menu item.
-  final String id;
-
-  /// The label to display for the menu item.
-  final String label;
-
-  /// Optional icon to display.
-  final IconData? icon;
-
-  /// Callback when the item is tapped.
-  final VoidCallback? onTap;
-
-  /// Sub-menu items.
-  final List<AppNavigationMenuItem> children;
-
-  /// Whether this item is disabled.
-  final bool disabled;
-
-  /// Whether this item has children.
-  bool get hasChildren => children.isNotEmpty;
-}
-
-/// A horizontal navigation menu component.
-///
-/// providing a clean horizontal navigation interface.
-class AppNavigationMenu extends StatefulWidget {
-  /// Creates a navigation menu.
-  const AppNavigationMenu({
-    super.key,
-    required this.items,
-    this.backgroundColor,
-    this.height = 56.0,
-    this.activeItemId,
-    this.onItemSelected,
-    this.showActiveIndicator = true,
-  });
-
-  /// The navigation menu items to display.
-  final List<AppNavigationMenuItem> items;
-
-  /// Background color of the navigation menu.
-  final Color? backgroundColor;
-
-  /// Height of the navigation menu.
-  final double height;
-
-  /// ID of the currently active item.
-  final String? activeItemId;
-
-  /// Called when an item is selected.
-  final ValueChanged<String>? onItemSelected;
-
-  /// Whether to show an active indicator.
-  final bool showActiveIndicator;
-
-  @override
-  State<AppNavigationMenu> createState() => _AppNavigationMenuState();
-}
-
-class _AppNavigationMenuState extends State<AppNavigationMenu> {
-  String? _hoveredItemId;
-  final Map<String, GlobalKey> _itemKeys = {};
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      height: widget.height,
-      decoration: BoxDecoration(
-        color: widget.backgroundColor ?? AppColors.backgroundWhite,
-        border: const Border(
-          bottom: BorderSide(color: AppColors.borderGray, width: 1.0),
-        ),
-      ),
-      child: Row(
-        children:
-            widget.items.map((item) => _buildNavigationItem(item)).toList(),
-      ),
-    );
-  }
-
-  Widget _buildNavigationItem(AppNavigationMenuItem item) {
-    final isActive = widget.activeItemId == item.id;
-    final isHovered = _hoveredItemId == item.id;
-    final key = _itemKeys.putIfAbsent(item.id, () => GlobalKey());
-
-    return MouseRegion(
-      onEnter: (_) => _setHoveredItem(item.id),
-      onExit: (_) => _setHoveredItem(null),
-      child: GestureDetector(
-        key: key,
-        onTap:
-            item.disabled
-                ? null
-                : () {
-                  if (item.hasChildren) {
-                    _showSubmenu(item, key);
-                  } else {
-                    item.onTap?.call();
-                    widget.onItemSelected?.call(item.id);
-                  }
-                },
-        child: Container(
-          padding: const EdgeInsets.symmetric(
-            horizontal: AppDimensions.paddingLarge,
-            vertical: AppDimensions.paddingMedium,
-          ),
-          decoration: BoxDecoration(
-            color:
-                isHovered && !item.disabled
-                    ? AppColors.lightGray.withValues(alpha: 0.5)
-                    : null,
-          ),
-          child: Column(
-            mainAxisAlignment: MainAxisAlignment.center,
-            children: [
-              Row(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  if (item.icon != null) ...[
-                    Icon(
-                      item.icon,
-                      size: 20,
-                      color: _getItemColor(item, isActive),
-                    ),
-                    const SizedBox(width: AppDimensions.paddingSmall),
-                  ],
-                  Text(
-                    item.label,
-                    style: TextStyle(
-                      fontSize: 16,
-                      fontWeight:
-                          isActive ? FontWeight.w600 : FontWeight.normal,
-                      color: _getItemColor(item, isActive),
-                    ),
-                  ),
-                  if (item.hasChildren) ...[
-                    const SizedBox(width: AppDimensions.paddingSmall),
-                    Icon(
-                      CupertinoIcons.chevron_down,
-                      size: 16,
-                      color: _getItemColor(item, isActive),
-                    ),
-                  ],
-                ],
-              ),
-
-              // Active indicator
-              if (widget.showActiveIndicator && isActive)
-                Container(
-                  margin: const EdgeInsets.only(top: 4),
-                  height: 2,
-                  width: 20,
-                  decoration: BoxDecoration(
-                    color: AppColors.primaryBlue,
-                    borderRadius: BorderRadius.circular(1),
-                  ),
-                ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-
-  Color _getItemColor(AppNavigationMenuItem item, bool isActive) {
-    if (item.disabled) return AppColors.mediumGray;
-    if (isActive) return AppColors.primaryBlue;
-    return AppColors.foregroundDark;
-  }
-
-  void _setHoveredItem(String? itemId) {
-    if (_hoveredItemId != itemId) {
-      setState(() {
-        _hoveredItemId = itemId;
-      });
-    }
-  }
-
-  void _showSubmenu(AppNavigationMenuItem item, GlobalKey key) {
-    final RenderBox? renderBox =
-        key.currentContext?.findRenderObject() as RenderBox?;
-    if (renderBox == null) return;
-
-    final position = renderBox.localToGlobal(Offset.zero);
-
-    showCupertinoModalPopup(
-      context: context,
-      barrierColor: CupertinoColors.black.withValues(alpha: 0.1),
-      builder:
-          (context) => _AppNavigationSubmenu(
-            items: item.children,
-            position: Offset(position.dx, position.dy + widget.height),
-            onItemSelected: (itemId) {
-              Navigator.of(context).pop();
-              widget.onItemSelected?.call(itemId);
-            },
-          ),
-    );
-  }
-}
-
-class _AppNavigationSubmenu extends StatelessWidget {
-  const _AppNavigationSubmenu({
-    required this.items,
-    required this.position,
-    required this.onItemSelected,
-  });
-
-  final List<AppNavigationMenuItem> items;
-  final Offset position;
-  final ValueChanged<String> onItemSelected;
-
-  @override
-  Widget build(BuildContext context) {
-    return Stack(
-      children: [
-        // Barrier to close submenu
-        Positioned.fill(
-          child: GestureDetector(
-            onTap: () => Navigator.of(context).pop(),
-            child: Container(color: const Color(0x00000000)),
-          ),
-        ),
-
-        // Submenu
-        Positioned(
-          left: position.dx,
-          top: position.dy,
-          child: Container(
-            width: 200,
-            decoration: BoxDecoration(
-              color: AppColors.backgroundWhite,
-              borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-              border: Border.all(color: AppColors.borderGray),
-              boxShadow: [
-                BoxShadow(
-                  color: CupertinoColors.black.withValues(alpha: 0.1),
-                  blurRadius: 10,
-                  offset: const Offset(0, 4),
-                ),
-              ],
-            ),
-            child: Column(
-              mainAxisSize: MainAxisSize.min,
-              children: items.map((item) => _buildSubmenuItem(item)).toList(),
-            ),
-          ),
-        ),
-      ],
-    );
-  }
-
-  Widget _buildSubmenuItem(AppNavigationMenuItem item) {
-    return GestureDetector(
-      onTap:
-          item.disabled
-              ? null
-              : () {
-                item.onTap?.call();
-                onItemSelected(item.id);
-              },
-      child: Container(
-        width: double.infinity,
-        padding: const EdgeInsets.symmetric(
-          horizontal: AppDimensions.paddingMedium,
-          vertical: AppDimensions.paddingSmall,
-        ),
-        child: Row(
-          children: [
-            if (item.icon != null) ...[
-              Icon(
-                item.icon,
-                size: 18,
-                color:
-                    item.disabled
-                        ? AppColors.mediumGray
-                        : AppColors.foregroundDark,
-              ),
-              const SizedBox(width: AppDimensions.paddingMedium),
-            ],
-            Expanded(
-              child: Text(
-                item.label,
-                style: TextStyle(
-                  fontSize: 14,
-                  color:
-                      item.disabled
-                          ? AppColors.mediumGray
-                          : AppColors.foregroundDark,
-                ),
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/components/navigation/app_pagination_controls.dart b/lib/components/navigation/app_pagination_controls.dart
deleted file mode 100644
index aaaf9e7..0000000
--- a/lib/components/navigation/app_pagination_controls.dart
+++ /dev/null
@@ -1,399 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-class AppPaginationControls extends StatelessWidget {
-  final int currentPage; // 0-indexed
-  final int totalPages;
-  final ValueChanged<int> onPageChanged;
-  final int displayPageCount; // Number of page numbers to display directly
-
-  const AppPaginationControls({
-    super.key,
-    required this.currentPage,
-    required this.totalPages,
-    required this.onPageChanged,
-    this.displayPageCount =
-        5, // e.g., 1, 2, 3, ..., 10 or 1, ..., 4, 5, 6, ..., 10
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    if (totalPages <= 1) {
-      return const SizedBox.shrink(); // No pagination needed for 0 or 1 page
-    }
-
-    return Row(
-      mainAxisAlignment: MainAxisAlignment.center,
-      crossAxisAlignment:
-          CrossAxisAlignment.center, // Added for vertical alignment
-      children: _buildPaginationItems(context),
-    );
-  }
-
-  List<Widget> _buildPaginationItems(BuildContext context) {
-    final List<Widget> items = [];
-
-    // Previous Button
-    items.add(
-      _PaginationButton(
-        // icon: CupertinoIcons.chevron_left, // Icon is now part of the label logic
-        label: 'Previous',
-        enabled: currentPage > 0,
-        onPressed: () => onPageChanged(currentPage - 1),
-        isPrevious: true,
-      ),
-    );
-    items.add(
-      const SizedBox(width: AppDimensions.spacingS),
-    ); // Corrected: spacingSmall -> spacingS
-
-    // Page Number Buttons
-    items.addAll(_generatePageNumbers(context));
-
-    items.add(
-      const SizedBox(width: AppDimensions.spacingS),
-    ); // Corrected: spacingSmall -> spacingS
-    // Next Button
-    items.add(
-      _PaginationButton(
-        // icon: CupertinoIcons.chevron_right, // Icon is now part of the label logic
-        label: 'Next',
-        enabled: currentPage < totalPages - 1,
-        onPressed: () => onPageChanged(currentPage + 1),
-        isPrevious: false,
-      ),
-    );
-
-    return items;
-  }
-
-  // Refined logic for generating page numbers with ellipsis
-  List<Widget> _generatePageNumbers(BuildContext context) {
-    final List<Widget> pageWidgets = [];
-    const int wingSize =
-        1; // Number of pages to show on each side of current page, plus current page itself makes 2*wingSize + 1 items typically
-    const int pagesToAlwaysShow = 2; // Show first and last page always
-    const int maxPagesOverall =
-        5; // Max items in the middle part (e.g. 1 ... 3 4 5 ... 10) -> 1, ..., c-1, c, c+1, ..., N. displayPageCount is similar
-
-    if (totalPages <= maxPagesOverall) {
-      // If total pages are few, show all of them
-      for (int i = 0; i < totalPages; i++) {
-        pageWidgets.add(
-          _PageNumberButton(
-            page: i,
-            currentPage: currentPage,
-            onPageChanged: onPageChanged,
-          ),
-        );
-        if (i < totalPages - 1) {
-          pageWidgets.add(
-            const SizedBox(width: AppDimensions.spacingXs),
-          ); // Corrected: spacingXxs -> spacingXs
-        }
-      }
-      return pageWidgets;
-    }
-
-    // Add first page
-    pageWidgets.add(
-      _PageNumberButton(
-        page: 0,
-        currentPage: currentPage,
-        onPageChanged: onPageChanged,
-      ),
-    );
-    pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-
-    // Calculate start and end for the middle segment of pages
-    int start = currentPage - wingSize;
-    int end = currentPage + wingSize;
-
-    bool frontEllipsis = false;
-    bool backEllipsis = false;
-
-    if (start > 1) {
-      // Greater than 1 because page 0 is already added, and we need space for ellipsis if start is not 1
-      frontEllipsis = true;
-    }
-    if (end < totalPages - 2) {
-      // Less than totalPages - 2 because page totalPages-1 will be added, and we need space for ellipsis
-      backEllipsis = true;
-    }
-
-    if (frontEllipsis) {
-      // Adjust start if we are too close to the beginning to show full wing
-      // And we need to show ellipsis after page 0
-      if (currentPage < maxPagesOverall - pagesToAlwaysShow) {
-        // e.g. current is 2, total 10, max 5. 2 < 5-2=3. Show 0,1,2,3,...,9
-        start = 1;
-        end = maxPagesOverall - pagesToAlwaysShow - 1; // -1 because 0-indexed
-        backEllipsis = true; // ensure back ellipsis if we cap the end
-        frontEllipsis = false; // No front ellipsis if we start from 1
-      } else {
-        pageWidgets.add(const _Ellipsis());
-        pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-      }
-    } else {
-      start =
-          1; // Start from page 1 if no front ellipsis (page 0 is already there)
-    }
-
-    if (backEllipsis) {
-      // Adjust end if we are too close to the end to show full wing
-      if (currentPage >
-          totalPages - (maxPagesOverall - pagesToAlwaysShow) - 1) {
-        // e.g. current is 7, total 9, max 5. 7 > 9-(5-2)-1 = 5. Show 0,...,5,6,7,8,9
-        end = totalPages - 2;
-        start =
-            totalPages -
-            (maxPagesOverall - pagesToAlwaysShow) -
-            1; // -1 because 0-indexed
-        frontEllipsis = true; // ensure front ellipsis if we cap the start
-        backEllipsis = false; // No back ellipsis if we end at totalPages-2
-        // Add front ellipsis if start is not 1 and not already added
-        if (start > 1 && pageWidgets.whereType<_Ellipsis>().isEmpty) {
-          pageWidgets.add(const _Ellipsis());
-          pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-        }
-      }
-    } else {
-      end =
-          totalPages -
-          2; // End at page totalPages - 2 if no back ellipsis (page totalPages-1 is added later)
-    }
-
-    for (int i = start; i <= end; i++) {
-      if (i >= 0 && i < totalPages) {
-        // Ensure page is valid
-        pageWidgets.add(
-          _PageNumberButton(
-            page: i,
-            currentPage: currentPage,
-            onPageChanged: onPageChanged,
-          ),
-        );
-        if (i < end) {
-          // Add spacing if not the last in this loop
-          pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-        }
-      }
-    }
-
-    if (backEllipsis && end < totalPages - 2) {
-      if (pageWidgets.last is! _Ellipsis) {
-        pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-        pageWidgets.add(const _Ellipsis());
-      }
-    }
-
-    // Add last page (if not already included and totalPages > 1)
-    if (totalPages > 1) {
-      // Check if last page is already effectively added or very close to `end`
-      bool lastPageAlreadyShown = false;
-      if (pageWidgets.last is _PageNumberButton) {
-        if ((pageWidgets.last as _PageNumberButton).page == totalPages - 1) {
-          lastPageAlreadyShown = true;
-        }
-      }
-      if (!lastPageAlreadyShown) {
-        pageWidgets.add(const SizedBox(width: AppDimensions.spacingXs));
-        pageWidgets.add(
-          _PageNumberButton(
-            page: totalPages - 1,
-            currentPage: currentPage,
-            onPageChanged: onPageChanged,
-          ),
-        );
-      }
-    }
-
-    return pageWidgets;
-  }
-}
-
-class _PageNumberButton extends StatelessWidget {
-  final int page;
-  final int currentPage;
-  final ValueChanged<int> onPageChanged;
-
-  const _PageNumberButton({
-    required this.page,
-    required this.currentPage,
-    required this.onPageChanged,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final bool isActive = page == currentPage;
-    return CupertinoButton(
-      padding: const EdgeInsets.symmetric(
-        horizontal:
-            AppDimensions.spacingS, // Corrected: paddingSmall -> spacingS
-        vertical:
-            AppDimensions
-                .spacingXs, // Corrected: paddingXs -> spacingXs (or spacingS for more height)
-      ),
-      minSize:
-          AppDimensions
-              .buttonHeightSmall, // Ensure a decent tap target, using a theme dimension
-      color:
-          isActive
-              ? AppColors.primaryBlue
-              : null, // Corrected: primary -> primaryBlue
-      borderRadius: BorderRadius.circular(
-        AppDimensions.radiusSmall,
-      ), // Added consistent border radius
-      onPressed: () => onPageChanged(page),
-      child: Text(
-        '${page + 1}', // Display 1-indexed page number
-        style:
-            isActive
-                ? AppTextStyles.buttonPrimary.copyWith(
-                  color: AppColors.white,
-                ) // Corrected: AppTextStyles.button(context) -> buttonPrimary, CupertinoColors.white -> AppColors.white
-                : AppTextStyles.buttonPrimary.copyWith(
-                  color: AppColors.primaryBlue,
-                ), // Corrected: AppTextStyles.button(context) -> buttonPrimary, AppColors.primary -> primaryBlue
-      ),
-    );
-  }
-}
-
-class _PaginationButton extends StatelessWidget {
-  // final IconData icon; // Removed, icons are conditional based on label/isPrevious
-  final String label;
-  final bool enabled;
-  final VoidCallback onPressed;
-  // final bool isIconOnly; // Removed, assuming buttons always have text or are prev/next with icons
-  final bool isPrevious;
-
-  const _PaginationButton({
-    // required this.icon, // Removed
-    required this.label,
-    required this.enabled,
-    required this.onPressed,
-    // this.isIconOnly = false, // Removed
-    required this.isPrevious,
-  });
-
-  @override
-  Widget build(BuildContext context) {
-    final color =
-        enabled
-            ? AppColors.primaryBlue
-            : AppColors
-                .mediumGray; // Corrected: primary -> primaryBlue, grey500 -> mediumGray
-    final textStyle = AppTextStyles.buttonPrimary.copyWith(
-      color: color,
-    ); // Corrected: button(context) -> buttonPrimary
-
-    List<Widget> children = [];
-    final iconData =
-        isPrevious ? CupertinoIcons.chevron_left : CupertinoIcons.chevron_right;
-
-    if (isPrevious) {
-      children.add(
-        Icon(
-          iconData,
-          color: color,
-          size: AppDimensions.iconSizeSmall,
-        ), // Corrected: iconSizeMedium -> iconSizeSmall (or iconSizeS)
-      );
-      children.add(
-        const SizedBox(width: AppDimensions.spacingXs),
-      ); // Corrected: spacingXxs -> spacingXs
-      children.add(Text(label, style: textStyle));
-    } else {
-      children.add(Text(label, style: textStyle));
-      children.add(
-        const SizedBox(width: AppDimensions.spacingXs),
-      ); // Corrected: spacingXxs -> spacingXs
-      children.add(
-        Icon(
-          iconData,
-          color: color,
-          size: AppDimensions.iconSizeSmall,
-        ), // Corrected: iconSizeMedium -> iconSizeSmall
-      );
-    }
-
-    return CupertinoButton(
-      padding: const EdgeInsets.symmetric(
-        horizontal:
-            AppDimensions.spacingM, // Corrected: paddingMedium -> spacingM
-        vertical: AppDimensions.spacingS, // Corrected: paddingSmall -> spacingS
-      ),
-      onPressed: enabled ? onPressed : null,
-      child: Row(mainAxisSize: MainAxisSize.min, children: children),
-    );
-  }
-}
-
-class _Ellipsis extends StatelessWidget {
-  const _Ellipsis();
-
-  @override
-  Widget build(BuildContext context) {
-    return Padding(
-      padding: const EdgeInsets.symmetric(
-        horizontal: AppDimensions.spacingXs,
-      ), // Corrected: paddingXs -> spacingXs
-      child: Text(
-        '...',
-        style: AppTextStyles.body.copyWith(
-          color: AppColors.mediumGray,
-        ), // Corrected: body(context) -> body, textDisabled -> mediumGray
-      ),
-    );
-  }
-}
-
-// Example Usage:
-/*
-class MyPaginationPage extends StatefulWidget {
-  const MyPaginationPage({super.key});
-
-  @override
-  State<MyPaginationPage> createState() => _MyPaginationPageState();
-}
-
-class _MyPaginationPageState extends State<MyPaginationPage> {
-  int _currentPage = 0;
-  final int _totalPages = 20;
-
-  void _handlePageChanged(int newPage) {
-    setState(() {
-      _currentPage = newPage;
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Pagination Example'),
-      ),
-      child: SafeArea(
-        child: Center(
-          child: Column(
-            mainAxisAlignment: MainAxisAlignment.center,
-            children: [
-              Text('Current Page: ${_currentPage + 1} / $_totalPages', style: AppTextStyles.title1), // Corrected: title(context) -> title1 (or other appropriate static style)
-              const SizedBox(height: AppDimensions.spacingL), // Corrected: spacingLarge -> spacingL
-              AppPaginationControls(
-                currentPage: _currentPage,
-                totalPages: _totalPages,
-                onPageChanged: _handlePageChanged,
-                displayPageCount: 5, // Or 7 for more numbers
-              ),
-            ],
-          ),
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/components/navigation/app_sidebar.dart b/lib/components/navigation/app_sidebar.dart
deleted file mode 100644
index eb99232..0000000
--- a/lib/components/navigation/app_sidebar.dart
+++ /dev/null
@@ -1,365 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-/// State of the sidebar (expanded or collapsed).
-enum AppSidebarState { expanded, collapsed }
-
-/// A sidebar navigation item.
-class AppSidebarItem {
-  /// Creates a sidebar item.
-  const AppSidebarItem({
-    required this.id,
-    required this.label,
-    this.icon,
-    this.iconCollapsed,
-    this.onTap,
-    this.children = const [],
-    this.disabled = false,
-    this.badge,
-  });
-
-  /// Unique identifier for the item.
-  final String id;
-
-  /// The label to display.
-  final String label;
-
-  /// Icon to show when expanded.
-  final IconData? icon;
-
-  /// Icon to show when collapsed (defaults to [icon]).
-  final IconData? iconCollapsed;
-
-  /// Callback when the item is tapped.
-  final VoidCallback? onTap;
-
-  /// Child items for nested navigation.
-  final List<AppSidebarItem> children;
-
-  /// Whether this item is disabled.
-  final bool disabled;
-
-  /// Optional badge to display.
-  final Widget? badge;
-
-  /// Whether this item has children.
-  bool get hasChildren => children.isNotEmpty;
-}
-
-/// A customizable sidebar navigation component.
-///
-/// providing a comprehensive sidebar system with expansion/collapse functionality.
-class AppSidebar extends StatefulWidget {
-  /// Creates a sidebar.
-  const AppSidebar({
-    super.key,
-    required this.items,
-    this.state = AppSidebarState.expanded,
-    this.onStateChanged,
-    this.width = 280.0,
-    this.collapsedWidth = 60.0,
-    this.backgroundColor,
-    this.selectedItemId,
-    this.onItemSelected,
-    this.header,
-    this.footer,
-    this.showToggleButton = true,
-  });
-
-  /// The navigation items to display.
-  final List<AppSidebarItem> items;
-
-  /// The current state of the sidebar.
-  final AppSidebarState state;
-
-  /// Called when the sidebar state changes.
-  final ValueChanged<AppSidebarState>? onStateChanged;
-
-  /// Width when expanded.
-  final double width;
-
-  /// Width when collapsed.
-  final double collapsedWidth;
-
-  /// Background color of the sidebar.
-  final Color? backgroundColor;
-
-  /// ID of the currently selected item.
-  final String? selectedItemId;
-
-  /// Called when an item is selected.
-  final ValueChanged<String>? onItemSelected;
-
-  /// Optional header widget.
-  final Widget? header;
-
-  /// Optional footer widget.
-  final Widget? footer;
-
-  /// Whether to show the toggle button.
-  final bool showToggleButton;
-
-  @override
-  State<AppSidebar> createState() => _AppSidebarState();
-}
-
-class _AppSidebarState extends State<AppSidebar>
-    with SingleTickerProviderStateMixin {
-  late AnimationController _animationController;
-  late Animation<double> _widthAnimation;
-  late AppSidebarState _currentState;
-  final Set<String> _expandedItems = <String>{};
-
-  @override
-  void initState() {
-    super.initState();
-    _currentState = widget.state;
-
-    _animationController = AnimationController(
-      duration: const Duration(milliseconds: 200),
-      vsync: this,
-    );
-
-    _widthAnimation = Tween<double>(
-      begin: widget.collapsedWidth,
-      end: widget.width,
-    ).animate(
-      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),
-    );
-
-    if (_currentState == AppSidebarState.expanded) {
-      _animationController.value = 1.0;
-    }
-  }
-
-  @override
-  void didUpdateWidget(AppSidebar oldWidget) {
-    super.didUpdateWidget(oldWidget);
-    if (widget.state != oldWidget.state) {
-      _updateState(widget.state);
-    }
-  }
-
-  @override
-  void dispose() {
-    _animationController.dispose();
-    super.dispose();
-  }
-
-  void _toggleState() {
-    final newState =
-        _currentState == AppSidebarState.expanded
-            ? AppSidebarState.collapsed
-            : AppSidebarState.expanded;
-    _updateState(newState);
-    widget.onStateChanged?.call(newState);
-  }
-
-  void _updateState(AppSidebarState newState) {
-    setState(() {
-      _currentState = newState;
-    });
-
-    if (newState == AppSidebarState.expanded) {
-      _animationController.forward();
-    } else {
-      _animationController.reverse();
-    }
-  }
-
-  void _toggleItemExpansion(String itemId) {
-    setState(() {
-      if (_expandedItems.contains(itemId)) {
-        _expandedItems.remove(itemId);
-      } else {
-        _expandedItems.add(itemId);
-      }
-    });
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    return AnimatedBuilder(
-      animation: _widthAnimation,
-      builder: (context, child) {
-        final isExpanded = _currentState == AppSidebarState.expanded;
-
-        return Container(
-          width: _widthAnimation.value,
-          decoration: BoxDecoration(
-            color: widget.backgroundColor ?? AppColors.backgroundWhite,
-            border: const Border(
-              right: BorderSide(color: AppColors.borderGray, width: 1.0),
-            ),
-          ),
-          child: Column(
-            children: [
-              // Header
-              if (widget.header != null) widget.header!,
-
-              // Toggle button
-              if (widget.showToggleButton) _buildToggleButton(isExpanded),
-
-              // Navigation items
-              Expanded(
-                child: ListView(
-                  padding: const EdgeInsets.symmetric(
-                    vertical: AppDimensions.paddingSmall,
-                  ),
-                  children:
-                      widget.items
-                          .map(
-                            (item) => _buildNavigationItem(item, isExpanded, 0),
-                          )
-                          .toList(),
-                ),
-              ),
-
-              // Footer
-              if (widget.footer != null) widget.footer!,
-            ],
-          ),
-        );
-      },
-    );
-  }
-
-  Widget _buildToggleButton(bool isExpanded) {
-    return Container(
-      padding: const EdgeInsets.all(AppDimensions.paddingMedium),
-      child: Row(
-        children: [
-          CupertinoButton(
-            padding: EdgeInsets.zero,
-            onPressed: _toggleState,
-            child: Icon(
-              isExpanded
-                  ? CupertinoIcons.sidebar_left
-                  : CupertinoIcons.sidebar_right,
-              color: AppColors.mediumGray,
-              size: 20,
-            ),
-          ),
-          if (isExpanded) ...[
-            const SizedBox(width: AppDimensions.paddingMedium),
-            const Expanded(
-              child: Text(
-                'Collapse',
-                style: TextStyle(color: AppColors.mediumGray, fontSize: 14),
-              ),
-            ),
-          ],
-        ],
-      ),
-    );
-  }
-
-  Widget _buildNavigationItem(AppSidebarItem item, bool isExpanded, int depth) {
-    final isSelected = widget.selectedItemId == item.id;
-    final isItemExpanded = _expandedItems.contains(item.id);
-    final hasChildren = item.hasChildren;
-
-    return Column(
-      children: [
-        // Main item
-        Container(
-          margin: EdgeInsets.symmetric(
-            horizontal: AppDimensions.paddingSmall,
-            vertical: 2,
-          ).copyWith(left: AppDimensions.paddingSmall + (depth * 16.0)),
-          child: GestureDetector(
-            onTap:
-                item.disabled
-                    ? null
-                    : () {
-                      if (hasChildren && isExpanded) {
-                        _toggleItemExpansion(item.id);
-                      } else if (item.onTap != null) {
-                        item.onTap!();
-                        widget.onItemSelected?.call(item.id);
-                      }
-                    },
-            child: Container(
-              padding: const EdgeInsets.symmetric(
-                horizontal: AppDimensions.paddingMedium,
-                vertical: AppDimensions.paddingSmall,
-              ),
-              decoration: BoxDecoration(
-                color:
-                    isSelected
-                        ? AppColors.primaryBlue.withValues(alpha: 0.1)
-                        : null,
-                borderRadius: BorderRadius.circular(AppDimensions.radiusSmall),
-              ),
-              child: Row(
-                children: [
-                  // Icon
-                  if (item.icon != null)
-                    Icon(
-                      isExpanded
-                          ? item.icon
-                          : (item.iconCollapsed ?? item.icon),
-                      color:
-                          isSelected
-                              ? AppColors.primaryBlue
-                              : (item.disabled
-                                  ? AppColors.mediumGray
-                                  : AppColors.foregroundDark),
-                      size: 20,
-                    ),
-
-                  if (isExpanded) ...[
-                    const SizedBox(width: AppDimensions.paddingMedium),
-
-                    // Label
-                    Expanded(
-                      child: Text(
-                        item.label,
-                        style: TextStyle(
-                          color:
-                              isSelected
-                                  ? AppColors.primaryBlue
-                                  : (item.disabled
-                                      ? AppColors.mediumGray
-                                      : AppColors.foregroundDark),
-                          fontWeight:
-                              isSelected ? FontWeight.w600 : FontWeight.normal,
-                          fontSize: 14,
-                        ),
-                      ),
-                    ),
-
-                    // Badge
-                    if (item.badge != null) ...[
-                      const SizedBox(width: AppDimensions.paddingSmall),
-                      item.badge!,
-                    ],
-
-                    // Expand/collapse indicator
-                    if (hasChildren) ...[
-                      const SizedBox(width: AppDimensions.paddingSmall),
-                      Icon(
-                        isItemExpanded
-                            ? CupertinoIcons.chevron_down
-                            : CupertinoIcons.chevron_right,
-                        color: AppColors.mediumGray,
-                        size: 16,
-                      ),
-                    ],
-                  ],
-                ],
-              ),
-            ),
-          ),
-        ),
-
-        // Children (if expanded)
-        if (hasChildren && isExpanded && isItemExpanded)
-          ...item.children.map(
-            (child) => _buildNavigationItem(child, isExpanded, depth + 1),
-          ),
-      ],
-    );
-  }
-}
diff --git a/lib/components/navigation/app_tabs.dart b/lib/components/navigation/app_tabs.dart
index 86e0e56..9dae38d 100644
--- a/lib/components/navigation/app_tabs.dart
+++ b/lib/components/navigation/app_tabs.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import '../../theme/app_colors.dart';
 import '../../theme/app_dimensions.dart';
 
@@ -239,7 +239,7 @@ class _AppTabButton extends StatelessWidget {
               isActive
                   ? [
                     BoxShadow(
-                      color: CupertinoColors.black.withValues(alpha: 0.1),
+                      color: Colors.black.withOpacity(0.1),
                       blurRadius: 2,
                       offset: const Offset(0, 1),
                     ),
diff --git a/lib/components/navigation/cupertino_app_bar.dart b/lib/components/navigation/cupertino_app_bar.dart
deleted file mode 100644
index 65dd0a1..0000000
--- a/lib/components/navigation/cupertino_app_bar.dart
+++ /dev/null
@@ -1,173 +0,0 @@
-// ignore_for_file: use_super_parameters
-
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-
-/// A custom navigation bar component that provides consistent styling
-/// and behavior across the application.
-///
-/// This component wraps the CupertinoNavigationBar with our application's
-/// styling and provides additional functionality like responsiveness.
-class CupertinoAppBar extends StatelessWidget implements PreferredSizeWidget {
-  /// Creates a navigation bar with the specified properties.
-  const CupertinoAppBar({
-    Key? key,
-    this.title,
-    this.largeTitle = false,
-    this.leading,
-    this.automaticallyImplyLeading = true,
-    this.trailing,
-    this.backgroundColor = AppColors.backgroundWhite,
-    this.border,
-    this.brightness,
-    this.padding,
-    this.previousPageTitle,
-  }) : super(key: key);
-
-  /// The title to display in the navigation bar.
-  final Widget? title;
-
-  /// Whether to use a large title style.
-  final bool largeTitle;
-
-  /// Leading widget to display at the start of the navigation bar.
-  final Widget? leading;
-
-  /// Whether to automatically add a back button when there are pages on the stack.
-  final bool automaticallyImplyLeading;
-
-  /// Trailing widget(s) to display at the end of the navigation bar.
-  final Widget? trailing;
-
-  /// Background color of the navigation bar.
-  final Color backgroundColor;
-
-  /// Custom border for the navigation bar.
-  final Border? border;
-
-  /// The brightness of the navigation bar, used to determine status bar styling.
-  final Brightness? brightness;
-
-  /// Custom padding for the navigation bar content.
-  final EdgeInsetsDirectional? padding;
-
-  /// Title of the previous page, used for the back button label.
-  final String? previousPageTitle;
-
-  @override
-  Size get preferredSize => const Size.fromHeight(44.0);
-
-  @override
-  Widget build(BuildContext context) {
-    Widget? titleWidget;
-
-    if (title != null) {
-      titleWidget = DefaultTextStyle(
-        style: largeTitle ? AppTextStyles.title1 : AppTextStyles.title3,
-        child: title!,
-      );
-    }
-
-    // Create a standard Cupertino navigation bar
-    return CupertinoNavigationBar(
-      middle: titleWidget,
-      leading: leading,
-      automaticallyImplyLeading: automaticallyImplyLeading,
-      trailing: trailing,
-      backgroundColor: backgroundColor,
-      border:
-          border ??
-          Border(
-            bottom: BorderSide(
-              color: AppColors.borderGray,
-              width: AppDimensions.borderWidth,
-            ),
-          ),
-      padding: padding,
-      previousPageTitle: previousPageTitle,
-      brightness: brightness,
-    );
-  }
-}
-
-/// A button component specifically designed for navigation bar actions.
-class NavigationBarButton extends StatelessWidget {
-  /// Creates a navigation bar button with an icon.
-  const NavigationBarButton.icon({
-    Key? key,
-    required this.icon,
-    required this.onPressed,
-    this.color = AppColors.primaryBlue,
-    this.size = AppDimensions.iconSizeMedium,
-  }) : label = null,
-       super(key: key);
-
-  /// Creates a navigation bar button with text.
-  const NavigationBarButton.text({
-    Key? key,
-    required this.label,
-    required this.onPressed,
-    this.color = AppColors.primaryBlue,
-    this.size = AppDimensions.iconSizeMedium,
-  }) : icon = null,
-       super(key: key);
-
-  /// Creates a navigation bar back button.
-  factory NavigationBarButton.back({
-    Key? key,
-    required VoidCallback onPressed,
-    String? label,
-    Color color = AppColors.primaryBlue,
-  }) {
-    return NavigationBarButton.icon(
-      key: key,
-      icon: CupertinoIcons.back,
-      onPressed: onPressed,
-      color: color,
-    );
-  }
-
-  /// The icon to display in the button.
-  final IconData? icon;
-
-  /// The text to display in the button.
-  final String? label;
-
-  /// Callback that is called when the button is tapped.
-  final VoidCallback onPressed;
-
-  /// Color of the button.
-  final Color color;
-
-  /// Size of the icon if an icon is used.
-  final double size;
-
-  @override
-  Widget build(BuildContext context) {
-    if (icon != null) {
-      return CupertinoButton(
-        padding: EdgeInsets.zero,
-        onPressed: onPressed,
-        child: Icon(icon, color: color, size: size),
-      );
-    } else if (label != null) {
-      return CupertinoButton(
-        padding: EdgeInsets.zero,
-        onPressed: onPressed,
-        child: Text(
-          label!,
-          style: TextStyle(
-            color: color,
-            fontSize: 17,
-            fontWeight: FontWeight.w400,
-          ),
-        ),
-      );
-    }
-
-    // This shouldn't happen but provide a fallback
-    return const SizedBox.shrink();
-  }
-}
diff --git a/lib/components/navigation/show_app_drawer.dart b/lib/components/navigation/show_app_drawer.dart
deleted file mode 100644
index c101aa5..0000000
--- a/lib/components/navigation/show_app_drawer.dart
+++ /dev/null
@@ -1,72 +0,0 @@
-import 'package:flutter/cupertino.dart';
-
-Future<T?> showAppDrawer<T>({
-  required BuildContext context,
-  required Widget Function(BuildContext) builder,
-  bool barrierDismissible = true,
-  Color? barrierColor,
-  bool useRootNavigator = false,
-  RouteSettings? routeSettings,
-  Offset? anchorPoint,
-  // bool shouldScaleBackground = true, // Not directly supported by Cupertino modal popups
-}) {
-  // The `vaul` library used in the mock scales the background page.
-  // `showCupertinoModalPopup` doesn't do this by default.
-
-  return showCupertinoModalPopup<T>(
-    context: context,
-    builder: (BuildContext popupContext) {
-      // The builder for showCupertinoModalPopup typically expects a Cupertino-styled widget.
-      // The AppDrawer itself is already styled, so we can return it directly after being built.
-      return builder(popupContext);
-    },
-    filter: null, // No image filter needed for a simple drawer
-    barrierColor:
-        barrierColor ??
-        CupertinoColors.black.withValues(alpha: 0.54), // Default barrier color
-    barrierDismissible: barrierDismissible,
-    useRootNavigator: useRootNavigator,
-    routeSettings: routeSettings,
-    anchorPoint: anchorPoint,
-    // Note: showCupertinoModalPopup does not have a direct `shape` or `backgroundColor` parameter
-    // for the popup itself like showModalBottomSheet. The AppDrawer widget returned by the builder
-    // is responsible for its own background color and shape (rounded corners).
-    // Elevation is also not a direct parameter here; shadows would be part of AppDrawer's styling if desired.
-  );
-}
-
-// Example Usage (to be placed in a widget that can show the drawer):
-/*
-CupertinoButton(
-  child: Text('Open Drawer'),
-  onPressed: () {
-    showAppDrawer(
-      context: context,
-      builder: (BuildContext drawerContext) {
-        return AppDrawer(
-          title: AppDrawerTitle('Drawer Title'),
-          description: AppDrawerDescription('This is a description for the drawer.'),
-          children: [
-            CupertinoListTile(
-              title: Text('Menu Item 1'),
-              onTap: () => Navigator.pop(drawerContext),
-            ),
-            CupertinoListTile(
-              title: Text('Menu Item 2'),
-              onTap: () => Navigator.pop(drawerContext),
-            ),
-          ],
-          footer: AppDrawerFooter(
-            children: [
-              CupertinoButton.filled(
-                child: Text('Close'),
-                onPressed: () => Navigator.pop(drawerContext),
-              ),
-            ],
-          ),
-        );
-      },
-    );
-  },
-)
-*/
diff --git a/lib/components/visualizations/charts.dart b/lib/components/visualizations/charts.dart
deleted file mode 100644
index 0d98ce2..0000000
--- a/lib/components/visualizations/charts.dart
+++ /dev/null
@@ -1,380 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'package:fl_chart/fl_chart.dart';
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_text_styles.dart';
-
-/// Data point for medical metrics.
-class MedicalDataPoint {
-  /// Creates a medical data point with the specified properties.
-  const MedicalDataPoint({
-    required this.value,
-    required this.date,
-    this.normalRangeMin,
-    this.normalRangeMax,
-    this.label,
-  });
-
-  /// The measured value.
-  final double value;
-
-  /// The date of the measurement.
-  final DateTime date;
-
-  /// Optional minimum of normal range.
-  final double? normalRangeMin;
-
-  /// Optional maximum of normal range.
-  final double? normalRangeMax;
-
-  /// Optional label for the data point.
-  final String? label;
-
-  /// Check if this value is within normal range.
-  bool get isWithinNormalRange {
-    if (normalRangeMin == null || normalRangeMax == null) {
-      return true;
-    }
-    // Ensure non-null before comparison if they are nullable
-    return value >= normalRangeMin! && value <= normalRangeMax!;
-  }
-}
-
-/// A line chart component for visualizing medical data over time.
-class MedicalLineChart extends StatelessWidget {
-  /// Creates a medical line chart with the specified properties.
-  const MedicalLineChart({
-    super.key,
-    required this.dataPoints,
-    required this.title,
-    this.unit = '',
-    this.normalRangeLabel = 'Range normale',
-    this.height = 240,
-    this.showNormalRange = true,
-    this.showDots = true,
-    this.lineColor = AppColors.primaryBlue,
-    this.normalRangeFillColor,
-  });
-
-  /// The data points to display in the chart.
-  final List<MedicalDataPoint> dataPoints;
-
-  /// The title of the chart.
-  final String title;
-
-  /// The unit of measurement (e.g., "mg/dL").
-  final String unit;
-
-  /// Label for the normal range area.
-  final String normalRangeLabel;
-
-  /// Height of the chart.
-  final double height;
-
-  /// Whether to show the normal range area.
-  final bool showNormalRange;
-
-  /// Whether to show dots at each data point.
-  final bool showDots;
-
-  /// Color of the data line.
-  final Color lineColor;
-
-  /// Fill color for the normal range area.
-  final Color? normalRangeFillColor;
-
-  @override
-  Widget build(BuildContext context) {
-    if (dataPoints.isEmpty) {
-      return SizedBox(
-        height: height,
-        child: const Center(child: Text('Nessun dato disponibile')),
-      );
-    }
-
-    double minY = double.infinity;
-    double maxY = double.negativeInfinity;
-    double? normalRangeMinGlobal;
-    double? normalRangeMaxGlobal;
-
-    for (final point in dataPoints) {
-      if (point.value < minY) minY = point.value;
-      if (point.value > maxY) maxY = point.value;
-
-      if (point.normalRangeMin != null) {
-        if (normalRangeMinGlobal == null ||
-            point.normalRangeMin! < normalRangeMinGlobal) {
-          normalRangeMinGlobal = point.normalRangeMin;
-        }
-      }
-      if (point.normalRangeMax != null) {
-        if (normalRangeMaxGlobal == null ||
-            point.normalRangeMax! > normalRangeMaxGlobal) {
-          normalRangeMaxGlobal = point.normalRangeMax;
-        }
-      }
-    }
-
-    if (dataPoints.isNotEmpty) {
-      final padding =
-          (maxY - minY).abs() * 0.1; // Use abs() in case minY == maxY
-      minY =
-          (minY - padding).isNaN
-              ? 0
-              : (minY - padding); // Handle NaN if minY and maxY were equal
-      maxY = (maxY + padding).isNaN ? 10 : (maxY + padding); // Handle NaN
-
-      if (minY == maxY) {
-        // Ensure there's a range if all values are the same
-        minY -= 1;
-        maxY += 1;
-      }
-    } else {
-      // Default range if no data points
-      minY = 0;
-      maxY = 10;
-    }
-
-    if (normalRangeMinGlobal != null && normalRangeMinGlobal < minY) {
-      minY = normalRangeMinGlobal;
-    }
-    if (normalRangeMaxGlobal != null && normalRangeMaxGlobal > maxY) {
-      maxY = normalRangeMaxGlobal;
-    }
-    // Ensure minY is not greater than maxY after adjustments
-    if (minY > maxY) {
-      minY = maxY - 1; // Or some other sensible default
-    }
-
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        Padding(
-          padding: const EdgeInsets.only(bottom: AppDimensions.spacingM),
-          child: Row(
-            children: [
-              Text(title, style: AppTextStyles.title3),
-              const SizedBox(width: AppDimensions.spacingXs),
-              Text(
-                unit,
-                style: AppTextStyles.caption.copyWith(
-                  color: AppColors.mediumGray,
-                ),
-              ),
-            ],
-          ),
-        ),
-        SizedBox(
-          height: height,
-          child: LineChart(
-            LineChartData(
-              gridData: const FlGridData(
-                show: true,
-                drawVerticalLine: false,
-                // horizontalInterval: 10, // Consider making this dynamic or removing if not needed
-              ),
-              titlesData: FlTitlesData(
-                show: true,
-                rightTitles: const AxisTitles(
-                  sideTitles: SideTitles(showTitles: false),
-                ),
-                topTitles: const AxisTitles(
-                  sideTitles: SideTitles(showTitles: false),
-                ),
-                bottomTitles: AxisTitles(
-                  sideTitles: SideTitles(
-                    showTitles: true,
-                    reservedSize: 30,
-                    // interval: 1, // Consider making this dynamic based on dataPoints.length
-                    getTitlesWidget: (value, meta) {
-                      final index = value.toInt();
-                      if (index >= 0 && index < dataPoints.length) {
-                        // Show fewer labels if too many data points
-                        if (dataPoints.length > 10 &&
-                            index % (dataPoints.length ~/ 5) != 0 &&
-                            index != dataPoints.length - 1 &&
-                            index != 0) {
-                          // return const SizedBox.shrink(); // Skips labels to prevent clutter
-                        }
-                        final date = dataPoints[index].date;
-                        return Padding(
-                          padding: const EdgeInsets.only(top: 8.0),
-                          child: Text(
-                            '${date.day}/${date.month}',
-                            style: AppTextStyles.caption,
-                          ),
-                        );
-                      }
-                      return const SizedBox.shrink();
-                    },
-                  ),
-                ),
-                leftTitles: AxisTitles(
-                  sideTitles: SideTitles(
-                    showTitles: true,
-                    reservedSize: 40,
-                    // interval: (maxY - minY) / 5, // Example: 5 labels
-                    getTitlesWidget: (value, meta) {
-                      // Prevents showing title for minY if it's the same as a grid line
-                      if (value == meta.min) return const SizedBox.shrink();
-                      return Text(
-                        value.toStringAsFixed(0),
-                        style: AppTextStyles.caption,
-                        textAlign: TextAlign.left,
-                      );
-                    },
-                  ),
-                ),
-              ),
-              borderData: FlBorderData(
-                show: true,
-                border: Border(
-                  bottom: BorderSide(
-                    color: AppColors.borderGray,
-                    width: AppDimensions.borderWidth,
-                  ),
-                  left: BorderSide(
-                    color: AppColors.borderGray,
-                    width: AppDimensions.borderWidth,
-                  ),
-                ),
-              ),
-              minX: 0,
-              maxX:
-                  dataPoints.isEmpty
-                      ? 1
-                      : dataPoints.length.toDouble() - 1, // Ensure maxX > minX
-              minY: minY,
-              maxY: maxY,
-              lineBarsData: [
-                if (showNormalRange &&
-                    normalRangeMinGlobal != null &&
-                    normalRangeMaxGlobal != null)
-                  LineChartBarData(
-                    spots: [
-                      FlSpot(0, normalRangeMaxGlobal),
-                      FlSpot(
-                        dataPoints.isEmpty
-                            ? 1
-                            : dataPoints.length.toDouble() - 1,
-                        normalRangeMaxGlobal,
-                      ),
-                    ],
-                    isCurved: false,
-                    barWidth: 0,
-                    color: const Color(0x00000000), // Transparent
-                    belowBarData: BarAreaData(
-                      show: true,
-                      color:
-                          normalRangeFillColor ??
-                          _getTransparentColor(AppColors.successGreen, 0.1),
-                      cutOffY: normalRangeMinGlobal,
-                      applyCutOffY: true,
-                    ),
-                    dotData: const FlDotData(show: false),
-                  ),
-                LineChartBarData(
-                  spots: List.generate(dataPoints.length, (i) {
-                    return FlSpot(i.toDouble(), dataPoints[i].value);
-                  }),
-                  isCurved: true,
-                  barWidth: 3,
-                  color: lineColor,
-                  isStrokeCapRound: true,
-                  dotData: FlDotData(
-                    show: showDots,
-                    getDotPainter: (spot, percent, bar, index) {
-                      final isWithinRange =
-                          dataPoints[index].isWithinNormalRange;
-                      return FlDotCirclePainter(
-                        radius: 4,
-                        color:
-                            isWithinRange
-                                ? AppColors.successGreen
-                                : AppColors.destructiveRed,
-                        strokeWidth: 2,
-                        strokeColor: AppColors.white,
-                      );
-                    },
-                  ),
-                  belowBarData: BarAreaData(show: false),
-                ),
-              ],
-              lineTouchData: LineTouchData(
-                touchTooltipData: LineTouchTooltipData(
-                  getTooltipColor: (LineBarSpot spot) {
-                    // Changed to getTooltipColor
-                    return _getTransparentColor(AppColors.foregroundDark, 0.8);
-                  },
-                  getTooltipItems: (touchedSpots) {
-                    return touchedSpots
-                        .map((spot) {
-                          final index = spot.x.toInt();
-                          if (index < 0 || index >= dataPoints.length) {
-                            return null;
-                          } // Boundary check
-                          final point = dataPoints[index];
-                          return LineTooltipItem(
-                            '${point.value.toStringAsFixed(1)} $unit',
-                            AppTextStyles.caption.copyWith(
-                              color: AppColors.white,
-                            ),
-                            children: [
-                              if (point.label != null)
-                                TextSpan(
-                                  text: '\n${point.label}',
-                                  style: AppTextStyles.caption.copyWith(
-                                    color: AppColors.white,
-                                    fontSize:
-                                        AppTextStyles.caption.fontSize! * 0.85,
-                                  ),
-                                ),
-                            ],
-                          );
-                        })
-                        .whereType<LineTooltipItem>()
-                        .toList(); // Filter out nulls
-                  },
-                ),
-              ),
-            ),
-          ),
-        ),
-        if (showNormalRange &&
-            normalRangeMinGlobal != null &&
-            normalRangeMaxGlobal != null)
-          Padding(
-            padding: const EdgeInsets.only(top: AppDimensions.spacingM),
-            child: Row(
-              children: [
-                Container(
-                  width: 12,
-                  height: 12,
-                  decoration: BoxDecoration(
-                    color:
-                        normalRangeFillColor ??
-                        _getTransparentColor(AppColors.successGreen, 0.1),
-                    borderRadius: BorderRadius.circular(2),
-                  ),
-                ),
-                const SizedBox(width: AppDimensions.spacingXs),
-                Text(
-                  '$normalRangeLabel: $normalRangeMinGlobal - $normalRangeMaxGlobal $unit',
-                  style: AppTextStyles.caption,
-                ),
-              ],
-            ),
-          ),
-      ],
-    );
-  }
-
-  Color _getTransparentColor(Color baseColor, double opacity) {
-    return Color.fromRGBO(
-      baseColor.r.toInt(),
-      baseColor.g.toInt(),
-      baseColor.b.toInt(),
-      opacity,
-    );
-  }
-}
diff --git a/lib/components/widgets/app_card.dart b/lib/components/widgets/app_card.dart
deleted file mode 100644
index 08c1d5a..0000000
--- a/lib/components/widgets/app_card.dart
+++ /dev/null
@@ -1,175 +0,0 @@
-// ignore_for_file: use_super_parameters
-
-import 'package:flutter/cupertino.dart';
-import '../../theme/app_text_styles.dart';
-import '../../theme/app_dimensions.dart';
-import '../../theme/app_colors.dart';
-
-/// AppCard is a container that groups related content and actions.
-/// It corresponds to the `Card` component in the mock.
-class AppCard extends StatelessWidget {
-  final Widget child;
-  final EdgeInsetsGeometry? margin;
-  final Color? backgroundColor;
-  final Border? border;
-  final List<BoxShadow>? boxShadow;
-  final BorderRadius? borderRadius;
-
-  const AppCard({
-    Key? key,
-    required this.child,
-    this.margin,
-    this.backgroundColor,
-    this.border,
-    this.boxShadow,
-    this.borderRadius,
-  }) : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Container(
-      margin: margin ?? EdgeInsets.zero,
-      decoration: BoxDecoration(
-        color: backgroundColor ?? AppColors.backgroundWhite, // bg-card (white)
-        borderRadius:
-            borderRadius ??
-            BorderRadius.circular(AppDimensions.radiusLarge), // rounded-lg
-        border:
-            border ??
-            Border.all(
-              color: AppColors.borderGray,
-              width: AppDimensions.borderWidth,
-            ), // border
-        boxShadow:
-            boxShadow ??
-            [
-              // shadow-sm
-              BoxShadow(
-                color: AppColors.shadowColor, // Standard shadow color
-                blurRadius:
-                    AppDimensions
-                        .spacingS, // Adjusted blur to be subtle like shadow-sm
-                offset: const Offset(0, AppDimensions.spacingXs / 2),
-              ),
-            ],
-      ),
-      child: child,
-    );
-  }
-}
-
-/// AppCardHeader provides a padded section for the top of an AppCard.
-/// Corresponds to `CardHeader` from the mock.
-class AppCardHeader extends StatelessWidget {
-  final Widget child;
-  final EdgeInsetsGeometry? padding;
-
-  const AppCardHeader({Key? key, required this.child, this.padding})
-    : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: "p-6" -> AppDimensions.spacingL (24.0)
-    return Padding(
-      padding: padding ?? const EdgeInsets.all(AppDimensions.spacingL),
-      child: child,
-    );
-  }
-}
-
-/// AppCardTitle provides a styled text for titles within an AppCardHeader.
-/// Corresponds to `CardTitle` from the mock (text-2xl font-semibold).
-class AppCardTitle extends StatelessWidget {
-  final String text;
-  final TextAlign? textAlign;
-  final TextStyle? style;
-
-  const AppCardTitle(this.text, {Key? key, this.textAlign, this.style})
-    : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Text(
-      text,
-      textAlign: textAlign,
-      style:
-          style ??
-          AppTextStyles.title2.copyWith(color: AppColors.foregroundDark),
-    );
-  }
-}
-
-/// AppCardDescription provides styled text for descriptions within an AppCardHeader.
-/// Corresponds to `CardDescription` from the mock (text-sm text-muted-foreground).
-class AppCardDescription extends StatelessWidget {
-  final String text;
-  final TextAlign? textAlign;
-  final TextStyle? style;
-
-  const AppCardDescription(this.text, {Key? key, this.textAlign, this.style})
-    : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    return Text(
-      text,
-      textAlign: textAlign,
-      style:
-          style ??
-          AppTextStyles.bodySmall.copyWith(color: AppColors.mediumGray),
-    );
-  }
-}
-
-/// AppCardContent provides a padded section for the main content of an AppCard.
-/// Corresponds to `CardContent` from the mock.
-class AppCardContent extends StatelessWidget {
-  final Widget child;
-  final EdgeInsetsGeometry? padding;
-
-  const AppCardContent({Key? key, required this.child, this.padding})
-    : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: "p-6 pt-0" -> padding AppDimensions.spacingL (24px) L, R, B; 0 T
-    return Padding(
-      padding:
-          padding ??
-          const EdgeInsets.fromLTRB(
-            AppDimensions.spacingL,
-            0,
-            AppDimensions.spacingL,
-            AppDimensions.spacingL,
-          ),
-      child: child,
-    );
-  }
-}
-
-/// AppCardFooter provides a padded section for the bottom of an AppCard.
-/// Corresponds to `CardFooter` from the mock.
-class AppCardFooter extends StatelessWidget {
-  final Widget child;
-  final EdgeInsetsGeometry? padding;
-
-  const AppCardFooter({Key? key, required this.child, this.padding})
-    : super(key: key);
-
-  @override
-  Widget build(BuildContext context) {
-    // Mock: "flex items-center p-6 pt-0"
-    // Padding: AppDimensions.spacingL (24px) L, R, B; 0 T
-    return Padding(
-      padding:
-          padding ??
-          const EdgeInsets.fromLTRB(
-            AppDimensions.spacingL,
-            0,
-            AppDimensions.spacingL,
-            AppDimensions.spacingL,
-          ),
-      child: child,
-    );
-  }
-}
diff --git a/lib/components/widgets/app_carousel.dart b/lib/components/widgets/app_carousel.dart
deleted file mode 100644
index f8a8e87..0000000
--- a/lib/components/widgets/app_carousel.dart
+++ /dev/null
@@ -1,234 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'dart:async';
-
-// Corrected import paths to be relative
-import '../../theme/app_colors.dart';
-import '../../theme/app_dimensions.dart';
-
-// TODO: Consider if a more advanced carousel package is needed for features like
-// infinite scroll, autoplay, complex animations, etc. For now, a basic PageView
-// with custom controls will be implemented.
-
-class AppCarousel extends StatefulWidget {
-  final List<Widget> items;
-  final double? height;
-  final bool showIndicator;
-  final bool showNavigationButtons;
-  final Duration autoPlayInterval;
-  final bool autoPlay;
-
-  const AppCarousel({
-    super.key,
-    required this.items,
-    this.height,
-    this.showIndicator = true,
-    this.showNavigationButtons = true,
-    this.autoPlay = false,
-    this.autoPlayInterval = const Duration(seconds: 5),
-  });
-
-  @override
-  State<AppCarousel> createState() => _AppCarouselState();
-}
-
-class _AppCarouselState extends State<AppCarousel> {
-  late PageController _pageController;
-  int _currentPage = 0;
-  Timer? _autoPlayTimer;
-
-  @override
-  void initState() {
-    super.initState();
-    _pageController = PageController();
-    if (widget.autoPlay) {
-      _startAutoPlay();
-    }
-  }
-
-  @override
-  void dispose() {
-    _pageController.dispose();
-    _autoPlayTimer?.cancel();
-    super.dispose();
-  }
-
-  void _startAutoPlay() {
-    _autoPlayTimer?.cancel(); // Cancel any existing timer
-    _autoPlayTimer = Timer.periodic(widget.autoPlayInterval, (timer) {
-      if (widget.items.isEmpty) return;
-      int nextPage = (_currentPage + 1) % widget.items.length;
-      _pageController.animateToPage(
-        nextPage,
-        duration: const Duration(milliseconds: 400),
-        curve: Curves.easeInOut,
-      );
-    });
-  }
-
-  void _onPageChanged(int page) {
-    setState(() {
-      _currentPage = page;
-    });
-    if (widget.autoPlay) {
-      // Restart timer on manual interaction
-      _startAutoPlay();
-    }
-  }
-
-  void _previousPage() {
-    if (widget.items.isEmpty || _currentPage == 0) return;
-    _pageController.previousPage(
-      duration: const Duration(milliseconds: 300),
-      curve: Curves.easeInOut,
-    );
-  }
-
-  void _nextPage() {
-    if (widget.items.isEmpty || _currentPage == widget.items.length - 1) return;
-    _pageController.nextPage(
-      duration: const Duration(milliseconds: 300),
-      curve: Curves.easeInOut,
-    );
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    if (widget.items.isEmpty) {
-      return SizedBox(
-        height: widget.height ?? 200,
-      ); // Placeholder for empty carousel
-    }
-
-    return SizedBox(
-      height: widget.height ?? 200, // Default height if not provided
-      child: Stack(
-        alignment: Alignment.bottomCenter,
-        children: [
-          PageView(
-            controller: _pageController,
-            onPageChanged: _onPageChanged,
-            children: widget.items,
-          ),
-          if (widget.showIndicator)
-            Positioned(
-              bottom:
-                  AppDimensions
-                      .spacingS, // Corrected: paddingSmall -> spacingS (or spacingM depending on desired size)
-              child: _buildPageIndicator(),
-            ),
-          if (widget.showNavigationButtons) _buildNavigationControls(),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildPageIndicator() {
-    return Row(
-      mainAxisAlignment: MainAxisAlignment.center,
-      children: List.generate(widget.items.length, (index) {
-        return Container(
-          width:
-              AppDimensions
-                  .spacingS, // Corrected: iconSizeXs -> spacingS (or a small specific dimension like 8.0)
-          height: AppDimensions.spacingS, // Corrected: iconSizeXs -> spacingS
-          margin: const EdgeInsets.symmetric(
-            horizontal:
-                AppDimensions.spacingXs, // Corrected: spacingXxs -> spacingXs
-          ),
-          decoration: BoxDecoration(
-            shape: BoxShape.circle,
-            color:
-                _currentPage == index
-                    ? AppColors
-                        .primaryBlue // Corrected: primary -> primaryBlue
-                    : AppColors
-                        .mediumGray, // Corrected: grey400 -> mediumGray (or lightGray)
-          ),
-        );
-      }),
-    );
-  }
-
-  Widget _buildNavigationControls() {
-    return Positioned.fill(
-      child: Align(
-        alignment: Alignment.center,
-        child: Row(
-          mainAxisAlignment: MainAxisAlignment.spaceBetween,
-          children: [
-            CupertinoButton(
-              onPressed: _currentPage > 0 ? _previousPage : null,
-              padding: const EdgeInsets.all(
-                AppDimensions.spacingS,
-              ), // Corrected: paddingSmall -> spacingS
-              child: Icon(
-                CupertinoIcons.chevron_left,
-                color:
-                    _currentPage > 0
-                        ? AppColors.primaryBlue
-                        : AppColors
-                            .mediumGray, // Corrected: primary -> primaryBlue, grey500 -> mediumGray
-                size:
-                    AppDimensions
-                        .iconSizeMedium, // Corrected: iconSizeLarge -> iconSizeMedium (or specific value)
-              ),
-            ),
-            CupertinoButton(
-              onPressed:
-                  _currentPage < widget.items.length - 1 ? _nextPage : null,
-              padding: const EdgeInsets.all(
-                AppDimensions.spacingS,
-              ), // Corrected: paddingSmall -> spacingS
-              child: Icon(
-                CupertinoIcons.chevron_right,
-                color:
-                    _currentPage < widget.items.length - 1
-                        ? AppColors
-                            .primaryBlue // Corrected: primary -> primaryBlue
-                        : AppColors
-                            .mediumGray, // Corrected: grey500 -> mediumGray
-                size:
-                    AppDimensions
-                        .iconSizeMedium, // Corrected: iconSizeLarge -> iconSizeMedium
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
-
-// Example Usage (to be placed in a screen/page):
-/*
-class MyCarouselPage extends StatelessWidget {
-  const MyCarouselPage({super.key});
-
-  @override
-  Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
-      navigationBar: const CupertinoNavigationBar(
-        middle: Text('Carousel Example'),
-      ),
-      child: SafeArea(
-        child: ListView(
-          children: [
-            AppCarousel(
-              height: 250,
-              autoPlay: true,
-              items: [
-                Container(color: CupertinoColors.activeBlue, child: const Center(child: Text('Page 1', style: TextStyle(color: CupertinoColors.white, fontSize: 24)))),
-                Container(color: CupertinoColors.activeGreen, child: const Center(child: Text('Page 2', style: TextStyle(color: CupertinoColors.white, fontSize: 24)))),
-                Container(color: CupertinoColors.activeOrange, child: const Center(child: Text('Page 3', style: TextStyle(color: CupertinoColors.white, fontSize: 24)))),
-                Container(color: CupertinoColors.systemPink, child: const Center(child: Text('Page 4', style: TextStyle(color: CupertinoColors.white, fontSize: 24)))),
-              ],
-            ),
-            const SizedBox(height: 20),
-            // Other content
-          ],
-        ),
-      ),
-    );
-  }
-}
-*/
diff --git a/lib/core/services/logout_service.dart b/lib/core/services/logout_service.dart
index ca70389..fd99e12 100644
--- a/lib/core/services/logout_service.dart
+++ b/lib/core/services/logout_service.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import '../providers/auth_provider.dart';
diff --git a/lib/core/widgets/auth_loading_widget.dart b/lib/core/widgets/auth_loading_widget.dart
index a1fd251..7f9270d 100644
--- a/lib/core/widgets/auth_loading_widget.dart
+++ b/lib/core/widgets/auth_loading_widget.dart
@@ -1,23 +1,24 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 
 class AuthLoadingWidget extends StatelessWidget {
   const AuthLoadingWidget({Key? key}) : super(key: key);
 
   @override
   Widget build(BuildContext context) {
-    return const CupertinoPageScaffold(
-      child: Center(
+    return Scaffold(
+      body: Center(
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
-            CupertinoActivityIndicator(radius: 20),
+            SizedBox(
+              width: 40,
+              height: 40,
+              child: CircularProgressIndicator(strokeWidth: 4),
+            ),
             SizedBox(height: 16),
             Text(
               'Loading...',
-              style: TextStyle(
-                fontSize: 16,
-                color: CupertinoColors.secondaryLabel,
-              ),
+              style: TextStyle(fontSize: 16, color: Colors.grey),
             ),
           ],
         ),
diff --git a/lib/main.dart b/lib/main.dart
index cfc267e..5b42cbb 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,9 +1,10 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 import 'navigation/simple_router.dart';
 import 'core/providers/patient_provider.dart';
 import 'core/providers/analysis_provider.dart';
 import 'core/services/service_locator.dart';
+import 'theme/app_theme.dart';
 
 void main() async {
   // Ensure Flutter binding is initialized
@@ -16,6 +17,7 @@ void main() async {
     MultiProvider(
       providers: [
         ChangeNotifierProvider.value(value: ServiceLocator().authProvider),
+        ChangeNotifierProvider(create: (_) => AppTheme()),
         ChangeNotifierProvider(create: (context) => PatientProvider()),
         ChangeNotifierProvider(create: (context) => AnalysisProvider()),
       ],
@@ -29,10 +31,18 @@ class VetAnalyticsApp extends StatelessWidget {
 
   @override
   Widget build(BuildContext context) {
-    return CupertinoApp.router(
-      title: 'VetAnalytics',
-      debugShowCheckedModeBanner: false,
-      routerConfig: SimpleRouter.createRouter(),
+    return Consumer<AppTheme>(
+      builder:
+          (context, appTheme, _) => MaterialApp.router(
+            title: 'VetAnalytics',
+            debugShowCheckedModeBanner: false,
+            theme: appTheme.lightTheme,
+            darkTheme: appTheme.darkTheme,
+            themeMode: appTheme.isDarkMode ? ThemeMode.dark : ThemeMode.light,
+            routerConfig: SimpleRouter.createRouter(),
+            // Enable Material 3 globally
+            // Note: individual widgets already opt-in via ThemeData.useMaterial3
+          ),
     );
   }
 }
diff --git a/lib/pages/dashboard_page.dart b/lib/pages/dashboard_page.dart
index ab78149..da0b834 100644
--- a/lib/pages/dashboard_page.dart
+++ b/lib/pages/dashboard_page.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import '../theme/app_colors.dart';
@@ -176,9 +176,9 @@ class _DashboardPageState extends State<DashboardPage> {
 
     return Stack(
       children: [
-        CupertinoPageScaffold(
+        Scaffold(
           backgroundColor: AppColors.backgroundWhite,
-          child: Container(
+          body: Container(
             decoration: const BoxDecoration(
               gradient: LinearGradient(
                 begin: Alignment.topLeft,
@@ -278,7 +278,7 @@ class _DashboardPageState extends State<DashboardPage> {
                       child: const Row(
                         mainAxisSize: MainAxisSize.min,
                         children: [
-                          Icon(CupertinoIcons.plus, size: 16),
+                          Icon(Icons.add, size: 16),
                           SizedBox(width: AppDimensions.spacingS),
                           Text('Aggiungi Paziente'),
                         ],
@@ -320,7 +320,7 @@ class _DashboardPageState extends State<DashboardPage> {
               child: const Row(
                 mainAxisSize: MainAxisSize.min,
                 children: [
-                  Icon(CupertinoIcons.plus, size: 16),
+                  Icon(Icons.add, size: 16),
                   SizedBox(width: AppDimensions.spacingS),
                   Text('Aggiungi Paziente'),
                 ],
@@ -341,7 +341,7 @@ class _DashboardPageState extends State<DashboardPage> {
         final card = _buildStatCard(
           title: 'Pazienti Totali',
           value: totalPatients,
-          icon: CupertinoIcons.person_2,
+          icon: Icons.people,
           color: AppColors.primaryBlue,
         );
 
@@ -475,7 +475,7 @@ class _DashboardPageState extends State<DashboardPage> {
                 prefix: const Padding(
                   padding: EdgeInsets.only(left: 12, right: 16),
                   child: Icon(
-                    CupertinoIcons.search,
+                    Icons.search,
                     color: AppColors.mediumGray,
                     size: 16,
                   ),
@@ -490,7 +490,7 @@ class _DashboardPageState extends State<DashboardPage> {
             child: const Row(
               mainAxisSize: MainAxisSize.min,
               children: [
-                Icon(CupertinoIcons.slider_horizontal_3, size: 16),
+                Icon(Icons.tune, size: 16),
                 SizedBox(width: 8),
                 Text('Filtri'),
               ],
@@ -510,7 +510,7 @@ class _DashboardPageState extends State<DashboardPage> {
             child: Column(
               mainAxisAlignment: MainAxisAlignment.center,
               children: [
-                CupertinoActivityIndicator(),
+                CircularProgressIndicator(),
                 SizedBox(height: 16),
                 Text('Caricamento pazienti...'),
               ],
@@ -525,19 +525,19 @@ class _DashboardPageState extends State<DashboardPage> {
               mainAxisAlignment: MainAxisAlignment.center,
               children: [
                 const Icon(
-                  CupertinoIcons.exclamationmark_triangle,
+                  Icons.error_outline,
                   size: 48,
-                  color: CupertinoColors.systemRed,
+                  color: AppColors.errorRed,
                 ),
                 const SizedBox(height: 16),
                 Text(
                   patientProvider.errorMessage ?? 'Errore nel caricamento',
-                  style: const TextStyle(color: CupertinoColors.systemRed),
+                  style: const TextStyle(color: AppColors.errorRed),
                 ),
                 const SizedBox(height: 16),
-                CupertinoButton.filled(
-                  child: const Text('Riprova'),
+                PrimaryButton(
                   onPressed: () => patientProvider.refresh(),
+                  child: const Text('Riprova'),
                 ),
               ],
             ),
@@ -618,7 +618,7 @@ class _DashboardPageState extends State<DashboardPage> {
       return Container(
         padding: const EdgeInsets.symmetric(vertical: AppDimensions.spacingL),
         alignment: Alignment.center,
-        child: const CupertinoActivityIndicator(),
+        child: const CircularProgressIndicator(),
       );
     }
 
@@ -626,10 +626,10 @@ class _DashboardPageState extends State<DashboardPage> {
       return Container(
         padding: const EdgeInsets.symmetric(vertical: AppDimensions.spacingL),
         alignment: Alignment.center,
-        child: CupertinoButton(
-          padding: EdgeInsets.zero,
-          child: const Text('Carica altri pazienti'),
+        child: SecondaryButton(
+          size: ButtonSize.medium,
           onPressed: () => patientProvider.loadMorePatients(),
+          child: const Text('Carica altri pazienti'),
         ),
       );
     }
@@ -750,7 +750,7 @@ class _DashboardPageState extends State<DashboardPage> {
                   Row(
                     children: [
                       const Icon(
-                        CupertinoIcons.calendar,
+                        Icons.calendar_today,
                         size: 12,
                         color: AppColors.textSecondary,
                       ),
@@ -845,11 +845,7 @@ class _DashboardPageState extends State<DashboardPage> {
       ),
       child: Column(
         children: [
-          const Icon(
-            CupertinoIcons.search,
-            size: 48,
-            color: AppColors.mediumGray,
-          ),
+          const Icon(Icons.search, size: 48, color: AppColors.mediumGray),
           const SizedBox(height: AppDimensions.spacingL),
           Text(
             'Nessun paziente trovato',
diff --git a/lib/pages/landing_page.dart b/lib/pages/landing_page.dart
index 8b72043..da6a006 100644
--- a/lib/pages/landing_page.dart
+++ b/lib/pages/landing_page.dart
@@ -1,10 +1,10 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import '../theme/app_colors.dart';
 import '../theme/app_text_styles.dart';
 import '../theme/app_dimensions.dart';
-import '../components/buttons/index.dart';
 import '../components/navigation/app_header.dart';
+import '../components/buttons/index.dart';
 
 // Data models for the landing page sections
 class FeatureItem {
@@ -42,19 +42,19 @@ class _LandingPageState extends State<LandingPage> {
   // Features data in Italian
   static const List<FeatureItem> features = [
     FeatureItem(
-      icon: CupertinoIcons.waveform_path_ecg,
+      icon: Icons.monitor_heart,
       title: "Analisi Istantanea",
       description:
           "Ottieni analisi complete del sangue in secondi con insight basati sull'intelligenza artificiale",
     ),
     FeatureItem(
-      icon: CupertinoIcons.shield_fill,
+      icon: Icons.shield,
       title: "Conforme HIPAA",
       description:
           "Sicurezza di livello aziendale che garantisce la protezione di tutti i dati dei pazienti",
     ),
     FeatureItem(
-      icon: CupertinoIcons.bolt_fill,
+      icon: Icons.bolt,
       title: "Risultati in Tempo Reale",
       description:
           "Insight diagnostici immediati per accelerare le decisioni di cura dei pazienti",
@@ -63,18 +63,10 @@ class _LandingPageState extends State<LandingPage> {
 
   // Stats data in Italian
   static const List<StatItem> stats = [
+    StatItem(icon: Icons.group, value: "500+", label: "Cliniche Veterinarie"),
+    StatItem(icon: Icons.description, value: "50K+", label: "Test Analizzati"),
     StatItem(
-      icon: CupertinoIcons.group,
-      value: "500+",
-      label: "Cliniche Veterinarie",
-    ),
-    StatItem(
-      icon: CupertinoIcons.doc_text,
-      value: "50K+",
-      label: "Test Analizzati",
-    ),
-    StatItem(
-      icon: CupertinoIcons.chart_bar,
+      icon: Icons.bar_chart,
       value: "99.2%",
       label: "Tasso di Accuratezza",
     ),
@@ -82,14 +74,12 @@ class _LandingPageState extends State<LandingPage> {
 
   @override
   Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
+    return Scaffold(
       backgroundColor: AppColors.backgroundWhite,
-      child: SingleChildScrollView(
+      appBar: const LandingHeader(),
+      body: SingleChildScrollView(
         child: Column(
           children: [
-            // Header
-            const LandingHeader(),
-
             // Hero Section
             _buildHeroSection(context),
 
@@ -208,6 +198,7 @@ class _LandingPageState extends State<LandingPage> {
                 width: double.infinity,
                 child: PrimaryButton(
                   size: ButtonSize.large,
+                  width: double.infinity,
                   onPressed: () => context.go('/login'),
                   child: const Row(
                     mainAxisSize: MainAxisSize.min,
@@ -215,7 +206,7 @@ class _LandingPageState extends State<LandingPage> {
                     children: [
                       Text('Inizia Analisi'),
                       SizedBox(width: AppDimensions.spacingS),
-                      Icon(CupertinoIcons.chevron_right, size: 20),
+                      Icon(Icons.chevron_right, size: 20),
                     ],
                   ),
                 ),
@@ -225,12 +216,13 @@ class _LandingPageState extends State<LandingPage> {
                 width: double.infinity,
                 child: OutlineButton(
                   size: ButtonSize.large,
+                  width: double.infinity,
                   onPressed: () => debugPrint('Guarda Demo tapped'),
                   child: const Row(
                     mainAxisSize: MainAxisSize.min,
                     mainAxisAlignment: MainAxisAlignment.center,
                     children: [
-                      Icon(CupertinoIcons.play_fill, size: 20),
+                      Icon(Icons.play_arrow, size: 20),
                       SizedBox(width: AppDimensions.spacingS),
                       Text('Guarda Demo'),
                     ],
@@ -249,6 +241,7 @@ class _LandingPageState extends State<LandingPage> {
                 children: [
                   PrimaryButton(
                     size: ButtonSize.large,
+                    width: double.infinity,
                     onPressed: () => context.go('/login'),
                     child: const Row(
                       mainAxisSize: MainAxisSize.min,
@@ -256,18 +249,19 @@ class _LandingPageState extends State<LandingPage> {
                       children: [
                         Text('Inizia Analisi'),
                         SizedBox(width: AppDimensions.spacingS),
-                        Icon(CupertinoIcons.chevron_right, size: 20),
+                        Icon(Icons.chevron_right, size: 20),
                       ],
                     ),
                   ),
                   const SizedBox(width: AppDimensions.spacingM),
                   OutlineButton(
                     size: ButtonSize.large,
+                    width: double.infinity,
                     onPressed: () => debugPrint('Guarda Demo tapped'),
                     child: const Row(
                       mainAxisSize: MainAxisSize.min,
                       children: [
-                        Icon(CupertinoIcons.play_fill, size: 20),
+                        Icon(Icons.play_arrow, size: 20),
                         SizedBox(width: AppDimensions.spacingS),
                         Text('Guarda Demo'),
                       ],
@@ -564,16 +558,15 @@ class _LandingPageState extends State<LandingPage> {
               const SizedBox(height: AppDimensions.spacingXl),
 
               // CTA button
-              Button(
+              SecondaryButton(
                 size: ButtonSize.large,
                 onPressed: () => context.go('/login'),
-                variant: ButtonVariant.secondary,
                 child: const Row(
                   mainAxisSize: MainAxisSize.min,
                   children: [
                     Text('Inizia Oggi'),
                     SizedBox(width: AppDimensions.spacingS),
-                    Icon(CupertinoIcons.chevron_right, size: 20),
+                    Icon(Icons.chevron_right, size: 20),
                   ],
                 ),
               ),
diff --git a/lib/pages/login_page.dart b/lib/pages/login_page.dart
index f06d1b9..eafd9d0 100644
--- a/lib/pages/login_page.dart
+++ b/lib/pages/login_page.dart
@@ -1,4 +1,7 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide IconButton;
+import 'package:flutter/material.dart'
+    as material
+    show IconButton, SegmentedButton, ButtonSegment;
 import 'package:provider/provider.dart';
 import 'package:go_router/go_router.dart';
 import '../components/buttons/index.dart';
@@ -288,9 +291,9 @@ class _LoginPageState extends State<LoginPage> {
 
   @override
   Widget build(BuildContext context) {
-    return CupertinoPageScaffold(
+    return Scaffold(
       backgroundColor: AppColors.backgroundWhite,
-      child: SafeArea(
+      body: SafeArea(
         child: Container(
           decoration: const BoxDecoration(
             gradient: LinearGradient(
@@ -362,22 +365,22 @@ class _LoginPageState extends State<LoginPage> {
                                           AppDimensions.spacingM,
                                         ),
                                         decoration: BoxDecoration(
-                                          color: CupertinoColors.systemRed
-                                              .withValues(alpha: 0.1),
+                                          color: AppColors.errorRed.withValues(
+                                            alpha: 0.1,
+                                          ),
                                           borderRadius: BorderRadius.circular(
                                             AppDimensions.radiusSmall,
                                           ),
                                           border: Border.all(
-                                            color: CupertinoColors.systemRed
+                                            color: AppColors.errorRed
                                                 .withValues(alpha: 0.3),
                                           ),
                                         ),
                                         child: Row(
                                           children: [
                                             const Icon(
-                                              CupertinoIcons
-                                                  .exclamationmark_triangle_fill,
-                                              color: CupertinoColors.systemRed,
+                                              Icons.warning,
+                                              color: AppColors.errorRed,
                                               size: 16,
                                             ),
                                             const SizedBox(
@@ -388,24 +391,25 @@ class _LoginPageState extends State<LoginPage> {
                                                 authProvider.errorMessage!,
                                                 style: AppTextStyles.body
                                                     .copyWith(
-                                                      color:
-                                                          CupertinoColors
-                                                              .systemRed,
+                                                      color: AppColors.errorRed,
                                                       fontSize: 14,
                                                     ),
                                               ),
                                             ),
-                                            CupertinoButton(
+                                            material.IconButton(
                                               padding: EdgeInsets.zero,
+                                              visualDensity:
+                                                  VisualDensity.compact,
+                                              constraints:
+                                                  const BoxConstraints(),
+                                              icon: const Icon(
+                                                Icons.close,
+                                                color: AppColors.errorRed,
+                                                size: 16,
+                                              ),
                                               onPressed:
                                                   () =>
                                                       authProvider.clearError(),
-                                              child: const Icon(
-                                                CupertinoIcons.xmark,
-                                                color:
-                                                    CupertinoColors.systemRed,
-                                                size: 16,
-                                              ),
                                             ),
                                           ],
                                         ),
@@ -428,8 +432,16 @@ class _LoginPageState extends State<LoginPage> {
                                   onPressed: isLoading ? null : _handleSubmit,
                                   child:
                                       isLoading
-                                          ? const CupertinoActivityIndicator(
-                                            color: AppColors.white,
+                                          ? const SizedBox(
+                                            width: 24,
+                                            height: 24,
+                                            child: CircularProgressIndicator(
+                                              strokeWidth: 2,
+                                              valueColor:
+                                                  AlwaysStoppedAnimation<Color>(
+                                                    AppColors.white,
+                                                  ),
+                                            ),
                                           )
                                           : Text(
                                             _isLogin
@@ -523,7 +535,7 @@ class _LoginPageState extends State<LoginPage> {
               right: AppDimensions.spacingM,
             ),
             child: Icon(
-              CupertinoIcons.person,
+              Icons.person_outline,
               color: AppColors.mediumGray,
               size: 18,
             ),
@@ -546,7 +558,7 @@ class _LoginPageState extends State<LoginPage> {
                 right: AppDimensions.spacingM,
               ),
               child: Icon(
-                CupertinoIcons.mail,
+                Icons.mail_outline,
                 color: AppColors.mediumGray,
                 size: 18,
               ),
@@ -571,7 +583,7 @@ class _LoginPageState extends State<LoginPage> {
               right: AppDimensions.spacingM,
             ),
             child: Icon(
-              CupertinoIcons.lock,
+              Icons.lock_outline,
               color: AppColors.mediumGray,
               size: 18,
             ),
@@ -596,7 +608,7 @@ class _LoginPageState extends State<LoginPage> {
                 right: AppDimensions.spacingM,
               ),
               child: Icon(
-                CupertinoIcons.lock,
+                Icons.lock_outline,
                 color: AppColors.mediumGray,
                 size: 18,
               ),
@@ -625,25 +637,25 @@ class _LoginPageState extends State<LoginPage> {
                   ),
                 ),
                 const SizedBox(height: AppDimensions.spacingS),
-                CupertinoSlidingSegmentedControl<UserRole>(
-                  children: const {
-                    UserRole.veterinarian: Padding(
-                      padding: EdgeInsets.all(AppDimensions.spacingS),
-                      child: Text('Veterinario'),
+                material.SegmentedButton<UserRole>(
+                  segments: const [
+                    material.ButtonSegment<UserRole>(
+                      value: UserRole.veterinarian,
+                      label: Text('Veterinario'),
                     ),
-                    UserRole.veterinaryTechnician: Padding(
-                      padding: EdgeInsets.all(AppDimensions.spacingS),
-                      child: Text('Tecnico'),
+                    material.ButtonSegment<UserRole>(
+                      value: UserRole.veterinaryTechnician,
+                      label: Text('Tecnico'),
                     ),
-                  },
-                  onValueChanged: (UserRole? value) {
-                    if (value != null) {
+                  ],
+                  selected: {_selectedRole},
+                  onSelectionChanged: (Set<UserRole> newSelection) {
+                    if (newSelection.isNotEmpty) {
                       setState(() {
-                        _selectedRole = value;
+                        _selectedRole = newSelection.first;
                       });
                     }
                   },
-                  groupValue: _selectedRole,
                 ),
               ],
             ),
@@ -664,11 +676,7 @@ class _LoginPageState extends State<LoginPage> {
                 left: AppDimensions.spacingS,
                 right: AppDimensions.spacingM,
               ),
-              child: Icon(
-                CupertinoIcons.person_fill,
-                color: AppColors.mediumGray,
-                size: 18,
-              ),
+              child: Icon(Icons.person, color: AppColors.mediumGray, size: 18),
             ),
           ),
 
@@ -687,11 +695,7 @@ class _LoginPageState extends State<LoginPage> {
                 left: AppDimensions.spacingS,
                 right: AppDimensions.spacingM,
               ),
-              child: Icon(
-                CupertinoIcons.person_fill,
-                color: AppColors.mediumGray,
-                size: 18,
-              ),
+              child: Icon(Icons.person, color: AppColors.mediumGray, size: 18),
             ),
           ),
 
@@ -711,7 +715,7 @@ class _LoginPageState extends State<LoginPage> {
                 right: AppDimensions.spacingM,
               ),
               child: Icon(
-                CupertinoIcons.doc_text,
+                Icons.description_outlined,
                 color: AppColors.mediumGray,
                 size: 18,
               ),
@@ -734,7 +738,7 @@ class _LoginPageState extends State<LoginPage> {
                 right: AppDimensions.spacingM,
               ),
               child: Icon(
-                CupertinoIcons.building_2_fill,
+                Icons.business,
                 color: AppColors.mediumGray,
                 size: 18,
               ),
@@ -756,11 +760,7 @@ class _LoginPageState extends State<LoginPage> {
                 left: AppDimensions.spacingS,
                 right: AppDimensions.spacingM,
               ),
-              child: Icon(
-                CupertinoIcons.phone,
-                color: AppColors.mediumGray,
-                size: 18,
-              ),
+              child: Icon(Icons.phone, color: AppColors.mediumGray, size: 18),
             ),
           ),
         ],
@@ -770,8 +770,8 @@ class _LoginPageState extends State<LoginPage> {
 
   Widget _buildToggle() {
     return Center(
-      child: CupertinoButton(
-        padding: EdgeInsets.zero,
+      child: TextButton(
+        style: TextButton.styleFrom(padding: EdgeInsets.zero),
         onPressed: _toggleMode,
         child: Text(
           _isLogin
diff --git a/lib/pages/patient_details_page.dart b/lib/pages/patient_details_page.dart
index 9dfe05c..a507102 100644
--- a/lib/pages/patient_details_page.dart
+++ b/lib/pages/patient_details_page.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart' hide IconButton;
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import '../theme/app_colors.dart';
@@ -442,13 +442,13 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
   IconData _getStatusIcon(String status) {
     switch (status.toLowerCase()) {
       case 'normale':
-        return CupertinoIcons.checkmark_circle_fill;
+        return Icons.check_circle;
       case 'alterato_lieve':
-        return CupertinoIcons.exclamationmark_triangle_fill;
+        return Icons.warning;
       case 'alterato_grave':
-        return CupertinoIcons.xmark_circle_fill;
+        return Icons.cancel;
       default:
-        return CupertinoIcons.circle_fill;
+        return Icons.circle;
     }
   }
 
@@ -517,9 +517,9 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
 
     return Stack(
       children: [
-        CupertinoPageScaffold(
+        Scaffold(
           backgroundColor: AppColors.backgroundWhite,
-          child: Column(
+          body: Column(
             children: [
               // Header
               AppHeader(
@@ -555,7 +555,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
-            CupertinoActivityIndicator(),
+            CircularProgressIndicator(),
             SizedBox(height: 16),
             Text('Caricamento paziente...'),
           ],
@@ -568,20 +568,16 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
-            const Icon(
-              CupertinoIcons.exclamationmark_triangle,
-              size: 48,
-              color: CupertinoColors.systemRed,
-            ),
+            const Icon(Icons.warning, size: 48, color: AppColors.errorRed),
             const SizedBox(height: 16),
             Text(
               _errorMessage!,
-              style: const TextStyle(color: CupertinoColors.systemRed),
+              style: const TextStyle(color: AppColors.errorRed),
             ),
             const SizedBox(height: 16),
-            CupertinoButton.filled(
-              child: const Text('Riprova'),
+            PrimaryButton(
               onPressed: () => _loadPatientData(),
+              child: const Text('Riprova'),
             ),
           ],
         ),
@@ -605,7 +601,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: const Row(
                 mainAxisSize: MainAxisSize.min,
                 children: [
-                  Icon(CupertinoIcons.back, size: 16),
+                  Icon(Icons.arrow_back, size: 16),
                   SizedBox(width: AppDimensions.spacingXs),
                   Text("Torna alla Dashboard"),
                 ],
@@ -628,17 +624,17 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                   AppTab(
                     id: 'results',
                     label: 'Risultati Analisi',
-                    icon: CupertinoIcons.doc_text,
+                    icon: Icons.description,
                   ),
                   AppTab(
                     id: 'treatment',
                     label: 'Piano Terapeutico',
-                    icon: CupertinoIcons.bandage,
+                    icon: Icons.healing,
                   ),
                   AppTab(
                     id: 'history',
                     label: 'Storia Medica',
-                    icon: CupertinoIcons.time,
+                    icon: Icons.schedule,
                   ),
                 ],
                 children: [
@@ -681,15 +677,15 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                                   : AppBadgeVariant.secondary,
                           icon:
                               _patient!.isActive
-                                  ? CupertinoIcons.checkmark_circle_fill
-                                  : CupertinoIcons.circle_fill,
+                                  ? Icons.check_circle
+                                  : Icons.circle,
                         ),
                         if (_urgencyLevel != null) ...[
                           const SizedBox(width: AppDimensions.spacingM),
                           AppBadge(
                             label: _urgencyLevel!,
                             variant: _getUrgencyVariant(_urgencyLevel),
-                            icon: CupertinoIcons.exclamationmark_triangle_fill,
+                            icon: Icons.warning,
                           ),
                         ],
                       ],
@@ -706,7 +702,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                     child: const Row(
                       mainAxisSize: MainAxisSize.min,
                       children: [
-                        Icon(CupertinoIcons.cloud_upload, size: 16),
+                        Icon(Icons.cloud_upload, size: 16),
                         SizedBox(width: AppDimensions.spacingXs),
                         Text("Carica Nuovo Test"),
                       ],
@@ -719,7 +715,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                     child: const Row(
                       mainAxisSize: MainAxisSize.min,
                       children: [
-                        Icon(CupertinoIcons.pencil, size: 16),
+                        Icon(Icons.edit, size: 16),
                         SizedBox(width: AppDimensions.spacingXs),
                         Text("Aggiorna Paziente"),
                       ],
@@ -857,7 +853,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
-            CupertinoActivityIndicator(),
+            CircularProgressIndicator(),
             SizedBox(height: 16),
             Text('Caricamento analisi...'),
           ],
@@ -889,7 +885,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                 borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
               ),
               child: const Icon(
-                CupertinoIcons.hourglass,
+                Icons.hourglass_empty,
                 color: AppColors.warningOrange,
                 size: 40,
               ),
@@ -923,7 +919,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                 borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
               ),
               child: const Icon(
-                CupertinoIcons.doc_text,
+                Icons.description,
                 color: AppColors.primaryBlue,
                 size: 40,
               ),
@@ -944,7 +940,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: const Row(
                 mainAxisSize: MainAxisSize.min,
                 children: [
-                  Icon(CupertinoIcons.cloud_upload, size: 16),
+                  Icon(Icons.cloud_upload, size: 16),
                   SizedBox(width: AppDimensions.spacingXs),
                   Text("Carica Prima Analisi"),
                 ],
@@ -1064,7 +1060,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                   ),
                 ),
                 child: const Icon(
-                  CupertinoIcons.doc_text_search,
+                  Icons.manage_search,
                   color: AppColors.primaryBlue,
                   size: 24,
                 ),
@@ -1080,7 +1076,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                       Row(
                         children: [
                           const Icon(
-                            CupertinoIcons.calendar,
+                            Icons.calendar_today,
                             size: 16,
                             color: AppColors.textSecondary,
                           ),
@@ -1118,7 +1114,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.exclamationmark_triangle_fill,
+                Icons.warning,
                 color: AppColors.destructiveRed,
                 size: 20,
               ),
@@ -1137,7 +1133,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               AppBadge(
                 label: _urgencyLevel!,
                 variant: _getUrgencyVariant(_urgencyLevel),
-                icon: CupertinoIcons.exclamationmark_triangle_fill,
+                icon: Icons.warning,
               ),
               const SizedBox(width: AppDimensions.spacingS),
               Text(
@@ -1229,7 +1225,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.exclamationmark_triangle_fill,
+                Icons.warning,
                 color: AppColors.destructiveRed,
                 size: 20,
               ),
@@ -1257,7 +1253,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: Row(
                 children: [
                   const Icon(
-                    CupertinoIcons.exclamationmark_circle_fill,
+                    Icons.error,
                     color: AppColors.destructiveRed,
                     size: 16,
                   ),
@@ -1289,7 +1285,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.exclamationmark_triangle_fill,
+                Icons.warning,
                 color: AppColors.destructiveRed,
                 size: 20,
               ),
@@ -1317,7 +1313,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: Row(
                 children: [
                   const Icon(
-                    CupertinoIcons.exclamationmark_circle_fill,
+                    Icons.error,
                     color: AppColors.destructiveRed,
                     size: 16,
                   ),
@@ -1349,7 +1345,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.doc_text_search,
+                Icons.manage_search,
                 color: AppColors.primaryBlue,
                 size: 20,
               ),
@@ -1378,7 +1374,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.doc_checkmark,
+                Icons.assignment_turned_in,
                 color: AppColors.primaryBlue,
                 size: 20,
               ),
@@ -1505,11 +1501,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         children: [
           Row(
             children: [
-              const Icon(
-                CupertinoIcons.person_fill,
-                color: AppColors.primaryBlue,
-                size: 20,
-              ),
+              const Icon(Icons.person, color: AppColors.primaryBlue, size: 20),
               const SizedBox(width: AppDimensions.spacingS),
               Text(
                 "Educazione Proprietario",
@@ -1535,7 +1527,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.exclamationmark_triangle_fill,
+                Icons.warning,
                 color: AppColors.destructiveRed,
                 size: 20,
               ),
@@ -1563,7 +1555,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: Row(
                 children: [
                   const Icon(
-                    CupertinoIcons.exclamationmark_circle_fill,
+                    Icons.error,
                     color: AppColors.destructiveRed,
                     size: 16,
                   ),
@@ -1712,7 +1704,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         child: Column(
           mainAxisAlignment: MainAxisAlignment.center,
           children: [
-            CupertinoActivityIndicator(),
+            CircularProgressIndicator(),
             SizedBox(height: 16),
             Text('Caricamento piano terapeutico...'),
           ],
@@ -1744,7 +1736,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                 borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
               ),
               child: const Icon(
-                CupertinoIcons.hourglass,
+                Icons.hourglass_empty,
                 color: AppColors.warningOrange,
                 size: 40,
               ),
@@ -1798,11 +1790,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         children: [
           Row(
             children: [
-              const Icon(
-                CupertinoIcons.search,
-                color: AppColors.primaryBlue,
-                size: 20,
-              ),
+              const Icon(Icons.search, color: AppColors.primaryBlue, size: 20),
               const SizedBox(width: AppDimensions.spacingS),
               Text("Piano Diagnostico", style: AppTextStyles.title3),
             ],
@@ -1874,11 +1862,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
         children: [
           Row(
             children: [
-              const Icon(
-                CupertinoIcons.bandage,
-                color: AppColors.primaryBlue,
-                size: 20,
-              ),
+              const Icon(Icons.healing, color: AppColors.primaryBlue, size: 20),
               const SizedBox(width: AppDimensions.spacingS),
               Text("Piano Terapeutico", style: AppTextStyles.title3),
             ],
@@ -1896,8 +1880,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
             ),
             const SizedBox(height: AppDimensions.spacingS),
             ...medications.map(
-              (treatment) =>
-                  _buildTreatmentItem(treatment, CupertinoIcons.capsule),
+              (treatment) => _buildTreatmentItem(treatment, Icons.medication),
             ),
             const SizedBox(height: AppDimensions.spacingM),
           ],
@@ -1913,8 +1896,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
             ),
             const SizedBox(height: AppDimensions.spacingS),
             ...supplements.map(
-              (treatment) =>
-                  _buildTreatmentItem(treatment, CupertinoIcons.plus_circle),
+              (treatment) => _buildTreatmentItem(treatment, Icons.add_circle),
             ),
             const SizedBox(height: AppDimensions.spacingM),
           ],
@@ -1930,8 +1912,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
             ),
             const SizedBox(height: AppDimensions.spacingS),
             ...supports.map(
-              (treatment) =>
-                  _buildTreatmentItem(treatment, CupertinoIcons.heart),
+              (treatment) => _buildTreatmentItem(treatment, Icons.favorite),
             ),
           ],
         ],
@@ -2025,7 +2006,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
           Row(
             children: [
               const Icon(
-                CupertinoIcons.calendar_today,
+                Icons.calendar_today,
                 color: AppColors.primaryBlue,
                 size: 20,
               ),
@@ -2045,7 +2026,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
               child: Row(
                 children: [
                   const Icon(
-                    CupertinoIcons.clock,
+                    Icons.access_time,
                     color: AppColors.primaryBlue,
                     size: 16,
                   ),
@@ -2081,7 +2062,7 @@ class _PatientDetailsPageState extends State<PatientDetailsPage> {
                 child: Row(
                   children: [
                     const Icon(
-                      CupertinoIcons.add_circled_solid,
+                      Icons.add_circle,
                       color: AppColors.mediumGray,
                       size: 14,
                     ),
diff --git a/lib/pages/patient_details_page.dart.backup b/lib/pages/patient_details_page.dart.backup
deleted file mode 100644
index adf1398..0000000
--- a/lib/pages/patient_details_page.dart.backup
+++ /dev/null
@@ -1,910 +0,0 @@
-import 'package:flutter/cupertino.dart';
-import 'package:go_router/go_router.dart';
-import 'package:provider/provider.dart';
-import '../theme/app_colors.dart';
-import '../theme/app_text_styles.dart';
-import '../theme/app_dimensions.dart';
-import '../components/buttons/index.dart';
-import '../components/navigation/app_header.dart';
-import '../components/navigation/app_tabs.dart';
-import '../components/cards/info_card.dart';
-import '../components/display/badge.dart';
-import '../core/providers/patient_provider.dart';
-import '../core/models/patient_models.dart';
-import '../core/services/logout_service.dart';
-import '../utils/auth_utils.dart';
-
-/// Blood work finding model
-class BloodworkFinding {
-  final String parameter;
-  final String value;
-  final String unit;
-  final String range;
-  final String status;
-
-  const BloodworkFinding({
-    required this.parameter,
-    required this.value,
-    required this.unit,
-    required this.range,
-    required this.status,
-  });
-}
-
-/// Blood work result model
-class BloodworkResult {
-  final String id;
-  final DateTime date;
-  final String type;
-  final String status;
-  final String summary;
-  final List<BloodworkFinding> findings;
-
-  const BloodworkResult({
-    required this.id,
-    required this.date,
-    required this.type,
-    required this.status,
-    required this.summary,
-    required this.findings,
-  });
-}
-
-/// Medical history entry model
-class MedicalHistoryEntry {
-  final String title;
-  final DateTime date;
-  final String description;
-
-  const MedicalHistoryEntry({
-    required this.title,
-    required this.date,
-    required this.description,
-  });
-}
-
-/// Patient Details page showing comprehensive patient information
-class PatientDetailsPage extends StatefulWidget {
-  final String patientId;
-
-  const PatientDetailsPage({super.key, required this.patientId});
-
-  @override
-  State<PatientDetailsPage> createState() => _PatientDetailsPageState();
-}
-
-class _PatientDetailsPageState extends State<PatientDetailsPage> {
-  PatientModel? _patient;
-  bool _isLoading = true;
-  String? _errorMessage;
-  late List<BloodworkResult> _bloodworkResults;
-  late List<MedicalHistoryEntry> _medicalHistory;
-
-  @override
-  void initState() {
-    super.initState();
-    _loadPatientData();
-  }
-
-  Future<void> _loadPatientData() async {
-    try {
-      setState(() {
-        _isLoading = true;
-        _errorMessage = null;
-      });
-
-      final patientProvider = Provider.of<PatientProvider>(
-        context,
-        listen: false,
-      );
-      final patient = await patientProvider.getPatientById(widget.patientId);
-
-      if (patient != null) {
-        setState(() {
-          _patient = patient;
-          _isLoading = false;
-        });
-        _loadMockAnalysisData(); // For now, keep mock analysis data
-      } else {
-        setState(() {
-          _isLoading = false;
-          _errorMessage = 'Patient not found';
-        });
-      }
-    } catch (e) {
-      setState(() {
-        _isLoading = false;
-        _errorMessage = 'Error loading patient: $e';
-      });
-    }
-  }
-
-  void _loadMockAnalysisData() {
-    // Mock bloodwork results (keep for now until we connect to analysis API)
-    _bloodworkResults = [
-      // Check if diagnostic summary exists and has data
-      if (_patient!.diagnosticSummary.isNotEmpty)
-        BloodworkResult(
-          id: "1",
-          date: _patient!.updatedAt,
-          type: "Analisi Disponibile",
-          status: "normal",
-          summary: "Dati di analisi salvati nel sistema",
-          findings: [
-            const BloodworkFinding(
-              parameter: "Stato Analisi",
-              value: "Disponibile",
-              unit: "",
-              range: "",
-              status: "normal",
-            ),
-          ],
-        ),
-    ];
-
-    // Real medical history from patient data
-    _medicalHistory = [
-      MedicalHistoryEntry(
-        title: "Creazione Paziente",
-        date: _patient!.createdAt,
-        description:
-            "Paziente registrato nel sistema${_patient!.diagnosticSummary.isNotEmpty ? ' con dati di analisi.' : '. In attesa di analisi.'}",
-      ),
-      if (_patient!.medicalHistory.isNotEmpty)
-        ...(_patient!.medicalHistory.entries.map(
-          (entry) => MedicalHistoryEntry(
-            title: entry.key,
-            date: _patient!.updatedAt, // Use updated date as fallback
-            description: entry.value.toString(),
-          ),
-        )),
-    ];
-  }
-
-  AppBadgeVariant _getStatusVariant(String status) {
-    switch (status.toLowerCase()) {
-      case 'normal':
-        return AppBadgeVariant.success;
-      case 'attention':
-        return AppBadgeVariant.warning;
-      case 'high':
-        return AppBadgeVariant.destructive;
-      case 'healthy':
-        return AppBadgeVariant.success;
-      default:
-        return AppBadgeVariant.secondary;
-    }
-  }
-
-  IconData _getStatusIcon(String status) {
-    switch (status.toLowerCase()) {
-      case 'normal':
-        return CupertinoIcons.checkmark_circle_fill;
-      case 'attention':
-        return CupertinoIcons.exclamationmark_triangle_fill;
-      case 'high':
-        return CupertinoIcons.arrow_up_circle_fill;
-      case 'healthy':
-        return CupertinoIcons.heart_fill;
-      default:
-        return CupertinoIcons.circle_fill;
-    }
-  }
-
-  String _getStatusLabel(String status) {
-    switch (status.toLowerCase()) {
-      case 'normal':
-        return 'Normale';
-      case 'attention':
-        return 'Attenzione';
-      case 'high':
-        return 'Alto';
-      case 'healthy':
-        return 'Sano';
-      default:
-        return status;
-    }
-  }
-
-  String _formatDate(DateTime date) {
-    return "${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}";
-  }
-
-  @override
-  Widget build(BuildContext context) {
-    // Simple auth check - show login screen if not authenticated
-    if (!AuthUtils.isAuthenticated(context)) {
-      return AuthUtils.buildLoginRequiredScreen(context);
-    }
-
-    return CupertinoPageScaffold(
-      backgroundColor: AppColors.backgroundWhite,
-      child: Column(
-        children: [
-          // Header
-          AppHeader(
-            title: Text("Dettagli Paziente", style: AppTextStyles.title2),
-            showAuth: true,
-            onProfileTap: () => context.go('/profile'),
-            onLogoutTap: () => LogoutService.showLogoutDialog(context),
-          ),
-
-          // Content
-          Expanded(child: _buildContent()),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildContent() {
-    if (_isLoading) {
-      return const Center(
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            CupertinoActivityIndicator(),
-            SizedBox(height: 16),
-            Text('Caricamento paziente...'),
-          ],
-        ),
-      );
-    }
-
-    if (_errorMessage != null) {
-      return Center(
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            const Icon(
-              CupertinoIcons.exclamationmark_triangle,
-              size: 48,
-              color: CupertinoColors.systemRed,
-            ),
-            const SizedBox(height: 16),
-            Text(
-              _errorMessage!,
-              style: const TextStyle(color: CupertinoColors.systemRed),
-            ),
-            const SizedBox(height: 16),
-            CupertinoButton.filled(
-              child: const Text('Riprova'),
-              onPressed: () => _loadPatientData(),
-            ),
-          ],
-        ),
-      );
-    }
-
-    if (_patient == null) {
-      return const Center(child: Text('Paziente non trovato'));
-    }
-
-    return SingleChildScrollView(
-      padding: const EdgeInsets.all(AppDimensions.spacingL),
-      child: ConstrainedBox(
-        constraints: const BoxConstraints(maxWidth: 1200),
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            // Back to Dashboard button
-            SecondaryButton(
-              onPressed: () => context.go('/dashboard'),
-              child: const Row(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  Icon(CupertinoIcons.back, size: 16),
-                  SizedBox(width: AppDimensions.spacingXs),
-                  Text("Torna alla Dashboard"),
-                ],
-              ),
-            ),
-
-            const SizedBox(height: AppDimensions.spacingL),
-
-            // Patient Header Card
-            _buildPatientHeader(),
-
-            const SizedBox(height: AppDimensions.spacingL),
-
-            // Tabs
-            SizedBox(
-              height: 800, // Fixed height for tabs content
-              child: AppTabs(
-                tabAlignment: Alignment.center,
-                tabs: const [
-                  AppTab(
-                    id: 'results',
-                    label: 'Risultati Analisi',
-                    icon: CupertinoIcons.doc_text,
-                  ),
-                  AppTab(
-                    id: 'history',
-                    label: 'Storia Medica',
-                    icon: CupertinoIcons.time,
-                  ),
-                  AppTab(
-                    id: 'trends',
-                    label: 'Tendenze',
-                    icon: CupertinoIcons.graph_square,
-                  ),
-                ],
-                children: [
-                  _buildResultsTab(),
-                  _buildHistoryTab(),
-                  _buildTrendsTab(),
-                ],
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-
-  Widget _buildPatientHeader() {
-    return InfoCard(
-      padding: const EdgeInsets.all(AppDimensions.spacingL),
-      child: Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          // Header row with name, status, and actions
-          Row(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              Expanded(
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    // Name and status
-                    Row(
-                      children: [
-                        Text(_patient!.name, style: AppTextStyles.title1),
-                        const SizedBox(width: AppDimensions.spacingM),
-                        AppBadge(
-                          label: _patient!.isActive ? 'Attivo' : 'Inattivo',
-                          variant:
-                              _patient!.isActive
-                                  ? AppBadgeVariant.success
-                                  : AppBadgeVariant.secondary,
-                          icon:
-                              _patient!.isActive
-                                  ? CupertinoIcons.checkmark_circle_fill
-                                  : CupertinoIcons.circle_fill,
-                        ),
-                      ],
-                    ),
-                    const SizedBox(height: AppDimensions.spacingL),
-                  ],
-                ),
-              ),
-              // Upload button
-              PrimaryButton(
-                onPressed: () => context.go('/upload/${widget.patientId}'),
-                child: const Row(
-                  mainAxisSize: MainAxisSize.min,
-                  children: [
-                    Icon(CupertinoIcons.cloud_upload, size: 16),
-                    SizedBox(width: AppDimensions.spacingXs),
-                    Text("Carica Nuovo Test"),
-                  ],
-                ),
-              ),
-            ],
-          ),
-
-          // Patient details grid
-          LayoutBuilder(
-            builder: (context, constraints) {
-              final isWide = constraints.maxWidth > 768;
-
-              if (isWide) {
-                // Three-column layout for desktop
-                return Row(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Expanded(child: _buildOwnerInfo()),
-                    const SizedBox(width: AppDimensions.spacingL),
-                    Expanded(child: _buildPatientInfo()),
-                    const SizedBox(width: AppDimensions.spacingL),
-                    Expanded(child: _buildVisitInfo()),
-                  ],
-                );
-              } else {
-                // Stacked layout for mobile
-                return Column(
-                  children: [
-                    _buildOwnerInfo(),
-                    const SizedBox(height: AppDimensions.spacingL),
-                    _buildPatientInfo(),
-                    const SizedBox(height: AppDimensions.spacingL),
-                    _buildVisitInfo(),
-                  ],
-                );
-              }
-            },
-          ),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildOwnerInfo() {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        Text(
-          "Informazioni Proprietario",
-          style: AppTextStyles.body.copyWith(
-            fontWeight: FontWeight.w600,
-            color: AppColors.textSecondary,
-          ),
-        ),
-        const SizedBox(height: AppDimensions.spacingS),
-        _buildInfoRow("Nome", _patient!.ownerInfo.name),
-        _buildInfoRow("Telefono", _patient!.ownerInfo.phone),
-        _buildInfoRow("Email", _patient!.ownerInfo.email),
-      ],
-    );
-  }
-
-  Widget _buildPatientInfo() {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        Text(
-          "Dettagli Paziente",
-          style: AppTextStyles.body.copyWith(
-            fontWeight: FontWeight.w600,
-            color: AppColors.textSecondary,
-          ),
-        ),
-        const SizedBox(height: AppDimensions.spacingS),
-        _buildInfoRow("Specie", _patient!.species),
-        _buildInfoRow("Razza", _patient!.breed),
-        _buildInfoRow("Età", _patient!.age.toString()),
-        _buildInfoRow("Sesso", _patient!.sex),
-        _buildInfoRow(
-          "Peso",
-          _patient!.weight != null
-              ? "${_patient!.weight!.toStringAsFixed(1)} kg"
-              : "Non specificato",
-        ),
-      ],
-    );
-  }
-
-  Widget _buildVisitInfo() {
-    return Column(
-      crossAxisAlignment: CrossAxisAlignment.start,
-      children: [
-        Text(
-          "Informazioni Visite",
-          style: AppTextStyles.body.copyWith(
-            fontWeight: FontWeight.w600,
-            color: AppColors.textSecondary,
-          ),
-        ),
-        const SizedBox(height: AppDimensions.spacingS),
-        _buildInfoRow("Data Creazione", _formatDate(_patient!.createdAt)),
-        _buildInfoRow("Ultimo Aggiornamento", _formatDate(_patient!.updatedAt)),
-        _buildInfoRow("ID Paziente", _patient!.patientId),
-        _buildInfoRow("Totale Test", "${_bloodworkResults.length}"),
-      ],
-    );
-  }
-
-  Widget _buildInfoRow(String label, String value) {
-    return Padding(
-      padding: const EdgeInsets.only(bottom: AppDimensions.spacingXs),
-      child: Row(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          SizedBox(
-            width: 80,
-            child: Text(
-              "$label:",
-              style: AppTextStyles.body.copyWith(fontWeight: FontWeight.w500),
-            ),
-          ),
-          Expanded(child: Text(value, style: AppTextStyles.body)),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildResultsTab() {
-    if (_bloodworkResults.isEmpty) {
-      return Center(
-        child: Column(
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: [
-            Container(
-              width: 80,
-              height: 80,
-              decoration: BoxDecoration(
-                color: AppColors.primaryBlue.withValues(alpha: 0.1),
-                borderRadius: BorderRadius.circular(AppDimensions.radiusLarge),
-              ),
-              child: const Icon(
-                CupertinoIcons.doc_text,
-                color: AppColors.primaryBlue,
-                size: 40,
-              ),
-            ),
-            const SizedBox(height: AppDimensions.spacingL),
-            Text("Nessuna Analisi Disponibile", style: AppTextStyles.title3),
-            const SizedBox(height: AppDimensions.spacingS),
-            Text(
-              "Non ci sono ancora risultati di analisi per questo paziente.",
-              style: AppTextStyles.body.copyWith(
-                color: AppColors.textSecondary,
-              ),
-              textAlign: TextAlign.center,
-            ),
-            const SizedBox(height: AppDimensions.spacingL),
-            PrimaryButton(
-              onPressed: () => context.go('/upload/${widget.patientId}'),
-              child: const Row(
-                mainAxisSize: MainAxisSize.min,
-                children: [
-                  Icon(CupertinoIcons.cloud_upload, size: 16),
-                  SizedBox(width: AppDimensions.spacingXs),
-                  Text("Carica Prima Analisi"),
-                ],
-              ),
-            ),
-          ],
-        ),
-      );
-    }
-
-    return SingleChildScrollView(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      child: Column(
-        children:
-            _bloodworkResults.asMap().entries.map((entry) {
-              final index = entry.key;
-              final result = entry.value;
-              return Container(
-                margin: EdgeInsets.only(
-                  bottom:
-                      index < _bloodworkResults.length - 1
-                          ? AppDimensions.spacingL
-                          : 0,
-                ),
-                child: _buildResultCard(result),
-              );
-            }).toList(),
-      ),
-    );
-  }
-
-  Widget _buildResultCard(BloodworkResult result) {
-    return InfoCard(
-      padding: const EdgeInsets.all(AppDimensions.spacingL),
-      child: Column(
-        crossAxisAlignment: CrossAxisAlignment.start,
-        children: [
-          // Header
-          Row(
-            children: [
-              Container(
-                width: 48,
-                height: 48,
-                decoration: BoxDecoration(
-                  color: AppColors.primaryBlue.withValues(alpha: 0.1),
-                  borderRadius: BorderRadius.circular(
-                    AppDimensions.radiusMedium,
-                  ),
-                ),
-                child: const Icon(
-                  CupertinoIcons.doc_text,
-                  color: AppColors.primaryBlue,
-                  size: 24,
-                ),
-              ),
-              const SizedBox(width: AppDimensions.spacingM),
-              Expanded(
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Text(result.type, style: AppTextStyles.title3),
-                    const SizedBox(height: AppDimensions.spacingXs),
-                    Row(
-                      children: [
-                        const Icon(
-                          CupertinoIcons.calendar,
-                          size: 16,
-                          color: AppColors.textSecondary,
-                        ),
-                        const SizedBox(width: AppDimensions.spacingXs),
-                        Text(
-                          _formatDate(result.date),
-                          style: AppTextStyles.body.copyWith(
-                            color: AppColors.textSecondary,
-                          ),
-                        ),
-                      ],
-                    ),
-                  ],
-                ),
-              ),
-              AppBadge(
-                label: _getStatusLabel(result.status),
-                variant: _getStatusVariant(result.status),
-              ),
-              const SizedBox(width: AppDimensions.spacingM),
-              SecondaryButton(
-                size: ButtonSize.small,
-                onPressed: () {
-                  // TODO: Implement download functionality
-                },
-                child: const Row(
-                  mainAxisSize: MainAxisSize.min,
-                  children: [
-                    Icon(CupertinoIcons.cloud_download, size: 14),
-                    SizedBox(width: AppDimensions.spacingXs),
-                    Text("Scarica"),
-                  ],
-                ),
-              ),
-            ],
-          ),
-
-          const SizedBox(height: AppDimensions.spacingL),
-
-          // Summary
-          Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              Text(
-                "Riepilogo",
-                style: AppTextStyles.body.copyWith(fontWeight: FontWeight.w600),
-              ),
-              const SizedBox(height: AppDimensions.spacingXs),
-              Text(
-                result.summary,
-                style: AppTextStyles.body.copyWith(
-                  color: AppColors.textSecondary,
-                ),
-              ),
-            ],
-          ),
-
-          const SizedBox(height: AppDimensions.spacingL),
-
-          // Detailed Results Table
-          Column(
-            crossAxisAlignment: CrossAxisAlignment.start,
-            children: [
-              Text(
-                "Risultati Dettagliati",
-                style: AppTextStyles.body.copyWith(fontWeight: FontWeight.w600),
-              ),
-              const SizedBox(height: AppDimensions.spacingM),
-              _buildResultsTable(result.findings),
-            ],
-          ),
-        ],
-      ),
-    );
-  }
-
-  Widget _buildResultsTable(List<BloodworkFinding> findings) {
-    return Container(
-      decoration: BoxDecoration(
-        border: Border.all(color: AppColors.borderGray),
-        borderRadius: BorderRadius.circular(AppDimensions.radiusMedium),
-      ),
-      child: Column(
-        children: [
-          // Table header
-          Container(
-            padding: const EdgeInsets.all(AppDimensions.spacingM),
-            decoration: BoxDecoration(
-              color: AppColors.backgroundSecondary.withValues(alpha: 0.5),
-              borderRadius: const BorderRadius.only(
-                topLeft: Radius.circular(AppDimensions.radiusMedium),
-                topRight: Radius.circular(AppDimensions.radiusMedium),
-              ),
-            ),
-            child: Row(
-              children: [
-                Expanded(
-                  flex: 2,
-                  child: Text(
-                    "Parametro",
-                    style: AppTextStyles.body.copyWith(
-                      fontWeight: FontWeight.w600,
-                    ),
-                  ),
-                ),
-                Expanded(
-                  child: Text(
-                    "Valore",
-                    style: AppTextStyles.body.copyWith(
-                      fontWeight: FontWeight.w600,
-                    ),
-                  ),
-                ),
-                Expanded(
-                  child: Text(
-                    "Range",
-                    style: AppTextStyles.body.copyWith(
-                      fontWeight: FontWeight.w600,
-                    ),
-                  ),
-                ),
-                Expanded(
-                  child: Text(
-                    "Stato",
-                    style: AppTextStyles.body.copyWith(
-                      fontWeight: FontWeight.w600,
-                    ),
-                  ),
-                ),
-              ],
-            ),
-          ),
-          // Table rows
-          ...findings.asMap().entries.map((entry) {
-            final index = entry.key;
-            final finding = entry.value;
-            return Container(
-              padding: const EdgeInsets.all(AppDimensions.spacingM),
-              decoration: BoxDecoration(
-                border:
-                    index < findings.length - 1
-                        ? const Border(
-                          bottom: BorderSide(color: AppColors.borderGray),
-                        )
-                        : null,
-              ),
-              child: Row(
-                children: [
-                  Expanded(
-                    flex: 2,
-                    child: Text(
-                      finding.parameter,
-                      style: AppTextStyles.body.copyWith(
-                        fontWeight: FontWeight.w500,
-                      ),
-                    ),
-                  ),
-                  Expanded(
-                    child: Text(
-                      "${finding.value} ${finding.unit}",
-                      style: AppTextStyles.body,
-                    ),
-                  ),
-                  Expanded(
-                    child: Text(
-                      finding.range,
-                      style: AppTextStyles.body.copyWith(
-                        color: AppColors.textSecondary,
-                      ),
-                    ),
-                  ),
-                  Expanded(
-                    child: Row(
-                      children: [
-                        Icon(
-                          _getStatusIcon(finding.status),
-                          size: 16,
-                          color: _getStatusColor(finding.status),
-                        ),
-                        const SizedBox(width: AppDimensions.spacingXs),
-                        Text(
-                          _getStatusLabel(finding.status),
-                          style: AppTextStyles.body,
-                        ),
-                      ],
-                    ),
-                  ),
-                ],
-              ),
-            );
-          }),
-        ],
-      ),
-    );
-  }
-
-  Color _getStatusColor(String status) {
-    switch (status.toLowerCase()) {
-      case 'normal':
-        return AppColors.successGreen;
-      case 'attention':
-        return AppColors.warningOrange;
-      case 'high':
-        return AppColors.destructiveRed;
-      default:
-        return AppColors.textSecondary;
-    }
-  }
-
-  Widget _buildHistoryTab() {
-    return SingleChildScrollView(
-      padding: const EdgeInsets.all(AppDimensions.spacingM),
-      child: InfoCard(
-        padding: const EdgeInsets.all(AppDimensions.spacingL),
-        child: Column(
-          crossAxisAlignment: CrossAxisAlignment.start,
-          children: [
-            Text("Storia Medica", style: AppTextStyles.title3),
-            const SizedBox(height: AppDimensions.spacingL),
-            ..._medicalHistory.map(
-              (entry) => Container(
-                margin: const EdgeInsets.only(bottom: AppDimensions.spacingM),
-                padding: const EdgeInsets.all(AppDimensions.spacingM),
-                decoration: BoxDecoration(
-                  color: AppColors.backgroundSecondary.withValues(alpha: 0.5),
-                  borderRadius: BorderRadius.circular(
-                    AppDimensions.radiusMedium,
-                  ),
-                ),
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.start,
-                  children: [
-                    Row(
-                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                      children: [
-                        Text(
-                          entry.title,
-                          style: AppTextStyles.body.copyWith(
-                            fontWeight: FontWeight.w600,
-                          ),
-                        ),
-                        Text(
-                          _formatDate(entry.date),
-                          style: AppTextStyles.bodySmall.copyWith(
-                            color: AppColors.textSecondary,
-                          ),
-                        ),
-                      ],
-                    ),
-                    const SizedBox(height: AppDimensions.spacingXs),
-                    Text(
-                      entry.description,
-                      style: AppTextStyles.bodySmall.copyWith(
-                        color: AppColors.textSecondary,
-                      ),
-                    ),
-                  ],
-                ),
-              ),
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-
-  Widget _buildTrendsTab() {
-    return Center(
-      child: InfoCard(
-        padding: const EdgeInsets.all(AppDimensions.spacingXl),
-        child: Column(
-          mainAxisSize: MainAxisSize.min,
-          children: [
-            Icon(
-              CupertinoIcons.graph_square,
-              size: 48,
-              color: AppColors.textSecondary,
-            ),
-            const SizedBox(height: AppDimensions.spacingM),
-            Text("Analisi Tendenze", style: AppTextStyles.title3),
-            const SizedBox(height: AppDimensions.spacingS),
-            Text(
-              "L'analisi delle tendenze sarà disponibile con più risultati di test nel tempo.",
-              style: AppTextStyles.body.copyWith(
-                color: AppColors.textSecondary,
-              ),
-              textAlign: TextAlign.center,
-            ),
-          ],
-        ),
-      ),
-    );
-  }
-}
diff --git a/lib/pages/profile_page.dart b/lib/pages/profile_page.dart
index de8de8c..c44e8d1 100644
--- a/lib/pages/profile_page.dart
+++ b/lib/pages/profile_page.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:provider/provider.dart';
 import '../theme/app_colors.dart';
@@ -365,9 +365,9 @@ class _ProfilePageState extends State<ProfilePage> {
       return AuthUtils.buildLoginRequiredScreen(context);
     }
 
-    return CupertinoPageScaffold(
+    return Scaffold(
       backgroundColor: AppColors.backgroundWhite,
-      child: Column(
+      body: Column(
         children: [
           // Header
           AppHeader(
@@ -381,7 +381,7 @@ class _ProfilePageState extends State<ProfilePage> {
           Expanded(
             child:
                 _isLoadingProfile
-                    ? const Center(child: CupertinoActivityIndicator())
+                    ? const Center(child: CircularProgressIndicator())
                     : _profile == null
                     ? const Center(child: Text("Nessun profilo disponibile"))
                     : SingleChildScrollView(
@@ -397,7 +397,7 @@ class _ProfilePageState extends State<ProfilePage> {
                               child: const Row(
                                 mainAxisSize: MainAxisSize.min,
                                 children: [
-                                  Icon(CupertinoIcons.back, size: 16),
+                                  Icon(Icons.arrow_back, size: 16),
                                   SizedBox(width: AppDimensions.spacingXs),
                                   Text("Torna alla Dashboard"),
                                 ],
@@ -421,17 +421,17 @@ class _ProfilePageState extends State<ProfilePage> {
                                   AppTab(
                                     id: 'profile',
                                     label: 'Profilo',
-                                    icon: CupertinoIcons.person,
+                                    icon: Icons.person,
                                   ),
                                   AppTab(
                                     id: 'notifications',
                                     label: 'Notifiche',
-                                    icon: CupertinoIcons.bell,
+                                    icon: Icons.notifications,
                                   ),
                                   AppTab(
                                     id: 'security',
                                     label: 'Sicurezza',
-                                    icon: CupertinoIcons.shield,
+                                    icon: Icons.shield,
                                   ),
                                 ],
                                 children: [
@@ -581,7 +581,7 @@ class _ProfilePageState extends State<ProfilePage> {
                   child: const Row(
                     mainAxisSize: MainAxisSize.min,
                     children: [
-                      Icon(CupertinoIcons.checkmark, size: 16),
+                      Icon(Icons.check, size: 16),
                       SizedBox(width: AppDimensions.spacingXs),
                       Text("Salva Modifiche"),
                     ],
@@ -782,7 +782,7 @@ class _ProfilePageState extends State<ProfilePage> {
                   child: const Row(
                     mainAxisSize: MainAxisSize.min,
                     children: [
-                      Icon(CupertinoIcons.checkmark, size: 16),
+                      Icon(Icons.check, size: 16),
                       SizedBox(width: AppDimensions.spacingXs),
                       Text("Salva Preferenze"),
                     ],
@@ -995,7 +995,7 @@ class _ProfilePageState extends State<ProfilePage> {
             child: Row(
               children: [
                 Icon(
-                  CupertinoIcons.shield,
+                  Icons.shield,
                   color: AppColors.mediumGray,
                   size: AppDimensions.iconSizeMedium,
                 ),
@@ -1055,7 +1055,7 @@ class _ProfilePageState extends State<ProfilePage> {
                 mainAxisSize: MainAxisSize.min,
                 mainAxisAlignment: MainAxisAlignment.center,
                 children: [
-                  Icon(CupertinoIcons.settings, size: 16),
+                  Icon(Icons.settings, size: 16),
                   SizedBox(width: AppDimensions.spacingXs),
                   Text("Configura 2FA"),
                 ],
diff --git a/lib/pages/upload_page.dart b/lib/pages/upload_page.dart
index b13d1df..0b7db2f 100644
--- a/lib/pages/upload_page.dart
+++ b/lib/pages/upload_page.dart
@@ -1,20 +1,19 @@
 import 'dart:async';
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:go_router/go_router.dart';
 import 'package:file_picker/file_picker.dart';
 import 'package:provider/provider.dart';
 import '../theme/app_colors.dart';
 import '../theme/app_text_styles.dart';
 import '../theme/app_dimensions.dart';
-import '../components/buttons/index.dart';
-import '../components/navigation/app_header.dart';
 import '../components/cards/info_card.dart';
 import '../components/forms/file_upload.dart';
-import '../components/feedback/app_progress_indicator.dart';
 import '../core/providers/analysis_provider.dart';
 import '../components/dialogs/app_custom_dialog.dart';
 import '../core/services/logout_service.dart';
 import '../utils/auth_utils.dart';
+import '../components/buttons/index.dart' hide IconButton;
+import '../components/navigation/app_header.dart';
 
 /// Upload page for analyzing bloodwork files
 class UploadPage extends StatefulWidget {
@@ -169,389 +168,393 @@ class _UploadPageState extends State<UploadPage> {
       return AuthUtils.buildLoginRequiredScreen(context);
     }
 
-    return CupertinoPageScaffold(
+    return Scaffold(
       backgroundColor: AppColors.backgroundWhite,
-      child: Column(
+      appBar: AuthenticatedAppHeader(
+        onProfileTap: () => context.go('/profile'),
+        onLogoutTap: () => LogoutService.showLogoutDialog(context),
+        actions: const [], // extra actions not needed
+      ),
+      body: Column(
         children: [
-          // Header
-          AppHeader(
-            title: const Text("Carica File", style: AppTextStyles.title2),
-            showAuth: true,
-            onProfileTap: () => context.go('/profile'),
-            onLogoutTap: () => LogoutService.showLogoutDialog(context),
-          ),
-
           // Content
           Expanded(
             child: SingleChildScrollView(
               padding: const EdgeInsets.all(AppDimensions.spacingL),
-              child: ConstrainedBox(
-                constraints: const BoxConstraints(maxWidth: 1024),
-                child: Column(
-                  crossAxisAlignment: CrossAxisAlignment.center,
-                  children: [
-                    // Page Title
-                    Text(
-                      "Carica File Analisi Sangue",
-                      style: AppTextStyles.title1.copyWith(
-                        fontWeight: FontWeight.bold,
-                      ),
-                      textAlign: TextAlign.center,
-                    ),
-                    const SizedBox(height: AppDimensions.spacingS),
-                    Text(
-                      "Carica report PDF per analisi alimentata da IA",
-                      style: AppTextStyles.body.copyWith(
-                        color: AppColors.textSecondary,
-                      ),
-                      textAlign: TextAlign.center,
-                    ),
-                    const SizedBox(height: AppDimensions.spacingXs),
-                    Container(
-                      padding: const EdgeInsets.symmetric(
-                        horizontal: AppDimensions.spacingM,
-                        vertical: AppDimensions.spacingS,
+              child: Center(
+                child: ConstrainedBox(
+                  constraints: const BoxConstraints(maxWidth: 1024),
+                  child: Column(
+                    crossAxisAlignment: CrossAxisAlignment.center,
+                    children: [
+                      // Page Title
+                      Text(
+                        "Carica File Analisi Sangue",
+                        style: AppTextStyles.title1.copyWith(
+                          fontWeight: FontWeight.bold,
+                        ),
+                        textAlign: TextAlign.center,
                       ),
-                      decoration: BoxDecoration(
-                        color: AppColors.lightGray,
-                        borderRadius: BorderRadius.circular(
-                          AppDimensions.radiusSmall,
+                      const SizedBox(height: AppDimensions.spacingS),
+                      Text(
+                        "Carica report PDF per analisi alimentata da IA",
+                        style: AppTextStyles.body.copyWith(
+                          color: AppColors.textSecondary,
                         ),
+                        textAlign: TextAlign.center,
                       ),
-                      child: Row(
-                        mainAxisSize: MainAxisSize.min,
-                        children: [
-                          const Icon(
-                            CupertinoIcons.info_circle,
-                            size: 16,
-                            color: AppColors.primaryBlue,
+                      const SizedBox(height: AppDimensions.spacingXs),
+                      Container(
+                        padding: const EdgeInsets.symmetric(
+                          horizontal: AppDimensions.spacingM,
+                          vertical: AppDimensions.spacingS,
+                        ),
+                        decoration: BoxDecoration(
+                          color: AppColors.lightGray,
+                          borderRadius: BorderRadius.circular(
+                            AppDimensions.radiusSmall,
                           ),
-                          const SizedBox(width: AppDimensions.spacingXs),
-                          Text(
-                            "Al momento supportiamo solo file PDF. Upload immagini in arrivo!",
-                            style: AppTextStyles.caption.copyWith(
-                              color: AppColors.textSecondary,
+                        ),
+                        child: Row(
+                          mainAxisSize: MainAxisSize.min,
+                          children: [
+                            const Icon(
+                              Icons.info,
+                              size: 16,
+                              color: AppColors.primaryBlue,
                             ),
-                          ),
-                        ],
-                      ),
-                    ),
-
-                    const SizedBox(height: AppDimensions.spacingXl),
-
-                    // Upload Area
-                    InfoCard(
-                      padding: const EdgeInsets.all(AppDimensions.spacingXl),
-                      child: FileUploadField(
-                        onFileSelected: _handleFileSelected,
-                        label: "Trascina e rilascia i tuoi file PDF qui",
-                        maxFileSizeMB: 10,
-                        isLoading: _isUploading,
+                            const SizedBox(width: AppDimensions.spacingXs),
+                            Text(
+                              "Al momento supportiamo solo file PDF. Upload immagini in arrivo!",
+                              style: AppTextStyles.caption.copyWith(
+                                color: AppColors.textSecondary,
+                              ),
+                            ),
+                          ],
+                        ),
                       ),
-                    ),
 
-                    if (_selectedFiles.isNotEmpty) ...[
-                      const SizedBox(height: AppDimensions.spacingL),
+                      const SizedBox(height: AppDimensions.spacingXl),
 
-                      // Selected Files List
+                      // Upload Area
                       InfoCard(
-                        padding: const EdgeInsets.all(AppDimensions.spacingL),
-                        child: Column(
-                          crossAxisAlignment: CrossAxisAlignment.start,
-                          children: [
-                            Row(
-                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                              children: [
-                                Row(
-                                  children: [
-                                    const Icon(
-                                      CupertinoIcons.doc_text,
-                                      size: 20,
-                                      color: AppColors.primaryBlue,
-                                    ),
-                                    const SizedBox(
-                                      width: AppDimensions.spacingS,
-                                    ),
-                                    Column(
-                                      crossAxisAlignment:
-                                          CrossAxisAlignment.start,
-                                      children: [
-                                        Text(
-                                          "File Selezionati (${_selectedFiles.length})",
-                                          style: AppTextStyles.body.copyWith(
-                                            fontWeight: FontWeight.w600,
+                        padding: const EdgeInsets.all(AppDimensions.spacingXl),
+                        child: FileUploadField(
+                          onFileSelected: _handleFileSelected,
+                          label: "Trascina e rilascia i tuoi file PDF qui",
+                          maxFileSizeMB: 10,
+                          isLoading: _isUploading,
+                        ),
+                      ),
+
+                      if (_selectedFiles.isNotEmpty) ...[
+                        const SizedBox(height: AppDimensions.spacingL),
+
+                        // Selected Files List
+                        InfoCard(
+                          padding: const EdgeInsets.all(AppDimensions.spacingL),
+                          child: Column(
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Row(
+                                mainAxisAlignment:
+                                    MainAxisAlignment.spaceBetween,
+                                children: [
+                                  Row(
+                                    children: [
+                                      const Icon(
+                                        Icons.description,
+                                        size: 20,
+                                        color: AppColors.primaryBlue,
+                                      ),
+                                      const SizedBox(
+                                        width: AppDimensions.spacingS,
+                                      ),
+                                      Column(
+                                        crossAxisAlignment:
+                                            CrossAxisAlignment.start,
+                                        children: [
+                                          Text(
+                                            "File Selezionati (${_selectedFiles.length})",
+                                            style: AppTextStyles.body.copyWith(
+                                              fontWeight: FontWeight.w600,
+                                            ),
                                           ),
-                                        ),
-                                        Builder(
-                                          builder: (context) {
-                                            final pdfCount =
-                                                _selectedFiles
-                                                    .where(
-                                                      (f) =>
-                                                          f.extension
-                                                              ?.toLowerCase() ==
-                                                          'pdf',
-                                                    )
-                                                    .length;
-                                            return Text(
-                                              "$pdfCount PDF pronti per il caricamento",
-                                              style: AppTextStyles.caption
-                                                  .copyWith(
-                                                    color:
-                                                        AppColors.textSecondary,
-                                                  ),
-                                            );
-                                          },
-                                        ),
-                                      ],
-                                    ),
-                                  ],
-                                ),
-                                if (!_isUploading)
-                                  GhostButton(
-                                    size: ButtonSize.small,
+                                          Builder(
+                                            builder: (context) {
+                                              final pdfCount =
+                                                  _selectedFiles
+                                                      .where(
+                                                        (f) =>
+                                                            f.extension
+                                                                ?.toLowerCase() ==
+                                                            'pdf',
+                                                      )
+                                                      .length;
+                                              return Text(
+                                                "$pdfCount PDF pronti per il caricamento",
+                                                style: AppTextStyles.caption
+                                                    .copyWith(
+                                                      color:
+                                                          AppColors
+                                                              .textSecondary,
+                                                    ),
+                                              );
+                                            },
+                                          ),
+                                        ],
+                                      ),
+                                    ],
+                                  ),
+                                  LinkButton(
                                     onPressed: _clearAllFiles,
                                     child: const Text("Rimuovi Tutti"),
                                   ),
-                              ],
-                            ),
-
-                            const SizedBox(height: AppDimensions.spacingM),
-
-                            // File list with PDF/non-PDF indicators
-                            ..._selectedFiles.asMap().entries.map((entry) {
-                              final index = entry.key;
-                              final file = entry.value;
-                              final isPdf =
-                                  file.extension?.toLowerCase() == 'pdf';
-
-                              return Container(
-                                margin: EdgeInsets.only(
-                                  bottom:
-                                      index < _selectedFiles.length - 1
-                                          ? AppDimensions.spacingS
-                                          : 0,
-                                ),
-                                padding: const EdgeInsets.all(
-                                  AppDimensions.spacingM,
-                                ),
-                                decoration: BoxDecoration(
-                                  color:
-                                      isPdf
-                                          ? AppColors.backgroundSecondary
-                                              .withValues(alpha: 0.5)
-                                          : AppColors.destructiveRed.withValues(
-                                            alpha: 0.1,
-                                          ),
-                                  borderRadius: BorderRadius.circular(
-                                    AppDimensions.radiusMedium,
+                                ],
+                              ),
+
+                              const SizedBox(height: AppDimensions.spacingM),
+
+                              // File list with PDF/non-PDF indicators
+                              ..._selectedFiles.asMap().entries.map((entry) {
+                                final index = entry.key;
+                                final file = entry.value;
+                                final isPdf =
+                                    file.extension?.toLowerCase() == 'pdf';
+
+                                return Container(
+                                  margin: EdgeInsets.only(
+                                    bottom:
+                                        index < _selectedFiles.length - 1
+                                            ? AppDimensions.spacingS
+                                            : 0,
                                   ),
-                                  border:
-                                      !isPdf
-                                          ? Border.all(
-                                            color: AppColors.destructiveRed
-                                                .withValues(alpha: 0.3),
-                                            width: 1,
-                                          )
-                                          : null,
-                                ),
-                                child: Row(
-                                  children: [
-                                    Icon(
-                                      _getFileIcon(file.extension ?? ''),
-                                      size: 20,
-                                      color:
-                                          isPdf
-                                              ? AppColors.primaryBlue
-                                              : AppColors.destructiveRed,
-                                    ),
-                                    const SizedBox(
-                                      width: AppDimensions.spacingM,
+                                  padding: const EdgeInsets.all(
+                                    AppDimensions.spacingM,
+                                  ),
+                                  decoration: BoxDecoration(
+                                    color:
+                                        isPdf
+                                            ? AppColors.backgroundSecondary
+                                                .withValues(alpha: 0.5)
+                                            : AppColors.destructiveRed
+                                                .withValues(alpha: 0.1),
+                                    borderRadius: BorderRadius.circular(
+                                      AppDimensions.radiusMedium,
                                     ),
-                                    Expanded(
-                                      child: Column(
-                                        crossAxisAlignment:
-                                            CrossAxisAlignment.start,
-                                        children: [
-                                          Row(
-                                            children: [
-                                              Expanded(
-                                                child: Text(
-                                                  file.name,
-                                                  style: AppTextStyles.body
-                                                      .copyWith(
-                                                        fontWeight:
-                                                            FontWeight.w500,
-                                                        color:
-                                                            isPdf
-                                                                ? null
-                                                                : AppColors
-                                                                    .destructiveRed,
-                                                      ),
-                                                ),
-                                              ),
-                                              if (!isPdf) ...[
-                                                const SizedBox(
-                                                  width:
-                                                      AppDimensions.spacingXs,
-                                                ),
-                                                Container(
-                                                  padding:
-                                                      const EdgeInsets.symmetric(
-                                                        horizontal:
-                                                            AppDimensions
-                                                                .spacingXs,
-                                                        vertical: 2,
-                                                      ),
-                                                  decoration: BoxDecoration(
-                                                    color:
-                                                        AppColors
-                                                            .destructiveRed,
-                                                    borderRadius:
-                                                        BorderRadius.circular(
-                                                          AppDimensions
-                                                              .radiusSmall,
-                                                        ),
-                                                  ),
+                                    border:
+                                        !isPdf
+                                            ? Border.all(
+                                              color: AppColors.destructiveRed
+                                                  .withValues(alpha: 0.3),
+                                              width: 1,
+                                            )
+                                            : null,
+                                  ),
+                                  child: Row(
+                                    children: [
+                                      Icon(
+                                        _getFileIcon(file.extension ?? ''),
+                                        size: 20,
+                                        color:
+                                            isPdf
+                                                ? AppColors.primaryBlue
+                                                : AppColors.destructiveRed,
+                                      ),
+                                      const SizedBox(
+                                        width: AppDimensions.spacingM,
+                                      ),
+                                      Expanded(
+                                        child: Column(
+                                          crossAxisAlignment:
+                                              CrossAxisAlignment.start,
+                                          children: [
+                                            Row(
+                                              children: [
+                                                Expanded(
                                                   child: Text(
-                                                    'NON SUPPORTATO',
-                                                    style: AppTextStyles.caption
+                                                    file.name,
+                                                    style: AppTextStyles.body
                                                         .copyWith(
-                                                          color:
-                                                              AppColors.white,
                                                           fontWeight:
-                                                              FontWeight.w600,
+                                                              FontWeight.w500,
+                                                          color:
+                                                              isPdf
+                                                                  ? null
+                                                                  : AppColors
+                                                                      .destructiveRed,
                                                         ),
                                                   ),
                                                 ),
+                                                if (!isPdf) ...[
+                                                  const SizedBox(
+                                                    width:
+                                                        AppDimensions.spacingXs,
+                                                  ),
+                                                  Container(
+                                                    padding:
+                                                        const EdgeInsets.symmetric(
+                                                          horizontal:
+                                                              AppDimensions
+                                                                  .spacingXs,
+                                                          vertical: 2,
+                                                        ),
+                                                    decoration: BoxDecoration(
+                                                      color:
+                                                          AppColors
+                                                              .destructiveRed,
+                                                      borderRadius:
+                                                          BorderRadius.circular(
+                                                            AppDimensions
+                                                                .radiusSmall,
+                                                          ),
+                                                    ),
+                                                    child: Text(
+                                                      'NON SUPPORTATO',
+                                                      style: AppTextStyles
+                                                          .caption
+                                                          .copyWith(
+                                                            color:
+                                                                AppColors.white,
+                                                            fontWeight:
+                                                                FontWeight.w600,
+                                                          ),
+                                                    ),
+                                                  ),
+                                                ],
                                               ],
-                                            ],
-                                          ),
-                                          Text(
-                                            _formatFileSize(file.size),
-                                            style: AppTextStyles.bodySmall
-                                                .copyWith(
-                                                  color:
-                                                      isPdf
-                                                          ? AppColors
-                                                              .textSecondary
-                                                          : AppColors
-                                                              .destructiveRed
-                                                              .withValues(
-                                                                alpha: 0.8,
-                                                              ),
-                                                ),
-                                          ),
-                                        ],
+                                            ),
+                                            Text(
+                                              _formatFileSize(file.size),
+                                              style: AppTextStyles.bodySmall
+                                                  .copyWith(
+                                                    color:
+                                                        isPdf
+                                                            ? AppColors
+                                                                .textSecondary
+                                                            : AppColors
+                                                                .destructiveRed
+                                                                .withValues(
+                                                                  alpha: 0.8,
+                                                                ),
+                                                  ),
+                                            ),
+                                          ],
+                                        ),
                                       ),
-                                    ),
-                                    if (!_isUploading)
-                                      GhostButton(
-                                        size: ButtonSize.small,
-                                        onPressed: () => _removeFile(index),
-                                        child: const Icon(
-                                          CupertinoIcons.xmark,
+                                      IconButton(
+                                        icon: const Icon(
+                                          Icons.close,
                                           size: 16,
                                           color: AppColors.textSecondary,
                                         ),
+                                        onPressed: () => _removeFile(index),
                                       ),
-                                  ],
-                                ),
-                              );
-                            }),
-                          ],
+                                    ],
+                                  ),
+                                );
+                              }),
+                            ],
+                          ),
                         ),
-                      ),
-                    ],
+                      ],
 
-                    if (_isUploading) ...[
-                      const SizedBox(height: AppDimensions.spacingL),
+                      if (_isUploading) ...[
+                        const SizedBox(height: AppDimensions.spacingL),
 
-                      // Upload Progress
-                      InfoCard(
-                        padding: const EdgeInsets.all(AppDimensions.spacingL),
-                        child: Column(
-                          children: [
-                            Row(
-                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
-                              children: [
-                                Text(
-                                  "Caricamento file...",
-                                  style: AppTextStyles.body.copyWith(
-                                    fontWeight: FontWeight.w600,
+                        // Upload Progress
+                        InfoCard(
+                          padding: const EdgeInsets.all(AppDimensions.spacingL),
+                          child: Column(
+                            children: [
+                              Row(
+                                mainAxisAlignment:
+                                    MainAxisAlignment.spaceBetween,
+                                children: [
+                                  Text(
+                                    "Caricamento file...",
+                                    style: AppTextStyles.body.copyWith(
+                                      fontWeight: FontWeight.w600,
+                                    ),
                                   ),
-                                ),
-                                Text(
-                                  "${(_uploadProgress * 100).toInt()}%",
-                                  style: AppTextStyles.bodySmall.copyWith(
-                                    color: AppColors.textSecondary,
+                                  Text(
+                                    "${(_uploadProgress * 100).toInt()}%",
+                                    style: AppTextStyles.bodySmall.copyWith(
+                                      color: AppColors.textSecondary,
+                                    ),
+                                  ),
+                                ],
+                              ),
+                              const SizedBox(height: AppDimensions.spacingM),
+                              SizedBox(
+                                height: 8,
+                                child: LinearProgressIndicator(
+                                  value: _uploadProgress,
+                                  backgroundColor: AppColors.lightGray,
+                                  valueColor: const AlwaysStoppedAnimation(
+                                    AppColors.primaryBlue,
                                   ),
                                 ),
-                              ],
-                            ),
-                            const SizedBox(height: AppDimensions.spacingM),
-                            AppProgressIndicator(
-                              value: _uploadProgress,
-                              height: 8,
-                            ),
-                          ],
-                        ),
-                      ),
-                    ],
-
-                    const SizedBox(height: AppDimensions.spacingXl),
-
-                    // Action Buttons
-                    Row(
-                      mainAxisAlignment: MainAxisAlignment.center,
-                      children: [
-                        SecondaryButton(
-                          onPressed:
-                              _isUploading
-                                  ? null
-                                  : () => context.go('/dashboard'),
-                          child: const Text("Annulla"),
-                        ),
-                        const SizedBox(width: AppDimensions.spacingM),
-                        PrimaryButton(
-                          onPressed:
-                              (_selectedFiles.isEmpty || _isUploading)
-                                  ? null
-                                  : _handleUpload,
-                          child: Text(
-                            _isUploading ? "Caricamento..." : "Analizza File",
+                              ),
+                            ],
                           ),
                         ),
                       ],
-                    ),
 
-                    const SizedBox(height: AppDimensions.spacingXxl),
+                      const SizedBox(height: AppDimensions.spacingXl),
 
-                    // Info Cards
-                    LayoutBuilder(
-                      builder: (context, constraints) {
-                        final isWide = constraints.maxWidth > 600;
+                      // Action Buttons
+                      Row(
+                        mainAxisAlignment: MainAxisAlignment.center,
+                        children: [
+                          OutlineButton(
+                            onPressed:
+                                _isUploading
+                                    ? null
+                                    : () => context.go('/dashboard'),
+                            child: const Text("Annulla"),
+                          ),
+                          const SizedBox(width: AppDimensions.spacingM),
+                          PrimaryButton(
+                            size: ButtonSize.medium,
+                            onPressed:
+                                (_selectedFiles.isEmpty || _isUploading)
+                                    ? null
+                                    : _handleUpload,
+                            isLoading: _isUploading,
+                            child: const Text("Analizza File"),
+                          ),
+                        ],
+                      ),
 
-                        if (isWide) {
-                          return Row(
-                            children: [
-                              Expanded(child: _buildSupportedFormatsCard()),
-                              const SizedBox(width: AppDimensions.spacingL),
-                              Expanded(child: _buildProcessingTimeCard()),
-                            ],
-                          );
-                        } else {
-                          return Column(
-                            children: [
-                              _buildSupportedFormatsCard(),
-                              const SizedBox(height: AppDimensions.spacingL),
-                              _buildProcessingTimeCard(),
-                            ],
-                          );
-                        }
-                      },
-                    ),
-                  ],
+                      const SizedBox(height: AppDimensions.spacingXxl),
+
+                      // Info Cards
+                      LayoutBuilder(
+                        builder: (context, constraints) {
+                          final isWide = constraints.maxWidth > 600;
+
+                          if (isWide) {
+                            return Row(
+                              children: [
+                                Expanded(child: _buildSupportedFormatsCard()),
+                                const SizedBox(width: AppDimensions.spacingL),
+                                Expanded(child: _buildProcessingTimeCard()),
+                              ],
+                            );
+                          } else {
+                            return Column(
+                              children: [
+                                _buildSupportedFormatsCard(),
+                                const SizedBox(height: AppDimensions.spacingL),
+                                _buildProcessingTimeCard(),
+                              ],
+                            );
+                          }
+                        },
+                      ),
+                    ],
+                  ),
                 ),
               ),
             ),
@@ -564,13 +567,13 @@ class _UploadPageState extends State<UploadPage> {
   IconData _getFileIcon(String extension) {
     switch (extension.toLowerCase()) {
       case 'pdf':
-        return CupertinoIcons.doc_text;
+        return Icons.picture_as_pdf;
       case 'jpg':
       case 'jpeg':
       case 'png':
-        return CupertinoIcons.photo;
+        return Icons.photo;
       default:
-        return CupertinoIcons.doc;
+        return Icons.insert_drive_file;
     }
   }
 
@@ -588,7 +591,7 @@ class _UploadPageState extends State<UploadPage> {
               borderRadius: BorderRadius.circular(AppDimensions.radiusFull),
             ),
             child: const Icon(
-              CupertinoIcons.checkmark_circle_fill,
+              Icons.check_circle,
               color: AppColors.successGreen,
               size: 20,
             ),
@@ -633,7 +636,7 @@ class _UploadPageState extends State<UploadPage> {
               borderRadius: BorderRadius.circular(AppDimensions.radiusFull),
             ),
             child: const Icon(
-              CupertinoIcons.exclamationmark_triangle_fill,
+              Icons.warning,
               color: AppColors.warningOrange,
               size: 20,
             ),
diff --git a/lib/theme/app_colors.dart b/lib/theme/app_colors.dart
index 3f3f436..b8648a9 100644
--- a/lib/theme/app_colors.dart
+++ b/lib/theme/app_colors.dart
@@ -1,4 +1,4 @@
-import "package:flutter/cupertino.dart";
+import 'package:flutter/material.dart';
 
 /// AppColors defines the color palette for the entire application.
 ///
diff --git a/lib/theme/app_gradients.dart b/lib/theme/app_gradients.dart
index 13c6598..5a5ea8c 100644
--- a/lib/theme/app_gradients.dart
+++ b/lib/theme/app_gradients.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'app_colors.dart';
 
 /// Defines gradient styles used throughout the application.
diff --git a/lib/theme/app_text_styles.dart b/lib/theme/app_text_styles.dart
index 2497ff7..72d54a5 100644
--- a/lib/theme/app_text_styles.dart
+++ b/lib/theme/app_text_styles.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'app_colors.dart';
 
 /// AppTextStyles defines typography for the entire application.
diff --git a/lib/theme/app_theme.dart b/lib/theme/app_theme.dart
index 7ee5367..9f4782b 100644
--- a/lib/theme/app_theme.dart
+++ b/lib/theme/app_theme.dart
@@ -1,4 +1,4 @@
-import 'package:flutter/cupertino.dart';
+import 'package:flutter/material.dart';
 import 'package:provider/provider.dart';
 
 import 'app_colors.dart';
@@ -36,37 +36,36 @@ class AppTheme extends ChangeNotifier {
   }
 
   /// Create light mode theme data
-  CupertinoThemeData get lightTheme {
-    return const CupertinoThemeData(
+  ThemeData get lightTheme {
+    return ThemeData(
       brightness: Brightness.light,
       primaryColor: AppColors.primaryBlue,
-      primaryContrastingColor: AppColors.white,
       scaffoldBackgroundColor: AppColors.backgroundWhite,
-      textTheme: CupertinoTextThemeData(
-        textStyle: AppTextStyles.body,
-        actionTextStyle: AppTextStyles.buttonPrimary,
-        tabLabelTextStyle: AppTextStyles.buttonSecondary,
-        navTitleTextStyle: AppTextStyles.title3,
-        navLargeTitleTextStyle: AppTextStyles.largeTitle,
-        navActionTextStyle: AppTextStyles.buttonPrimary,
-        pickerTextStyle: AppTextStyles.body,
-        dateTimePickerTextStyle: AppTextStyles.body,
+      colorScheme: ColorScheme.fromSeed(
+        seedColor: AppColors.primaryBlue,
+      ).copyWith(
+        primary: AppColors.primaryBlue,
+        secondary: AppColors.primaryBlue,
+        error: AppColors.destructiveRed,
+        background: AppColors.backgroundWhite,
       ),
-      barBackgroundColor: AppColors.backgroundWhite,
+      textTheme: const TextTheme(
+        displayLarge: AppTextStyles.largeTitle,
+        titleLarge: AppTextStyles.title2,
+        titleMedium: AppTextStyles.title3,
+        bodyLarge: AppTextStyles.body,
+        bodyMedium: AppTextStyles.bodySmall,
+        labelLarge: AppTextStyles.buttonPrimary,
+      ),
+      useMaterial3: true,
     );
   }
 
-  /// Create dark mode theme data
-  CupertinoThemeData get darkTheme {
-    // Note: For now, we're using light theme everywhere
-    // This is a placeholder for future dark mode implementation
-    return lightTheme;
-  }
+  /// Create dark mode theme data (placeholder - mirrors light for now)
+  ThemeData get darkTheme => lightTheme.copyWith(brightness: Brightness.dark);
 
   /// Get current theme based on mode
-  CupertinoThemeData get currentTheme {
-    return isDarkMode ? darkTheme : lightTheme;
-  }
+  ThemeData get currentTheme => isDarkMode ? darkTheme : lightTheme;
 
   /// Static method to access theme from context
   static AppTheme of(BuildContext context) {
diff --git a/pubspec.lock b/pubspec.lock
index 542fb21..a852e21 100644
--- a/pubspec.lock
+++ b/pubspec.lock
@@ -185,14 +185,6 @@ packages:
       url: "https://pub.dev"
     source: hosted
     version: "3.0.6"
-  cupertino_icons:
-    dependency: "direct main"
-    description:
-      name: cupertino_icons
-      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
-      url: "https://pub.dev"
-    source: hosted
-    version: "1.0.8"
   dart_style:
     dependency: transitive
     description:
diff --git a/pubspec.yaml b/pubspec.yaml
index 3d724a2..cae9efe 100644
--- a/pubspec.yaml
+++ b/pubspec.yaml
@@ -30,7 +30,6 @@ environment:
 dependencies:
   flutter:
     sdk: flutter
-  cupertino_icons: ^1.0.8
   file_picker: ^10.1.9
   http: ^1.4.0
   http_parser: ^4.1.2
@@ -69,7 +68,7 @@ flutter:
   # The following line ensures that the Material Icons font is
   # included with your application, so that you can use the icons in
   # the material Icons class.
-  uses-material-design: false
+  uses-material-design: true
 
   # To add assets to your application, add an assets section, like this:
   # assets:
